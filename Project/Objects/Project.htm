<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Feb  7 21:45:37 2023
<BR><P>
<H3>Maximum Stack Usage =      14392 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
simple_pjsua &rArr; pjsua_create &rArr; pjsua_destroy2 &rArr; pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[cf]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf]">NMI_Handler</a><BR>
 <LI><a href="#[d1]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">MemManage_Handler</a><BR>
 <LI><a href="#[d2]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">BusFault_Handler</a><BR>
 <LI><a href="#[d3]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d3]">UsageFault_Handler</a><BR>
 <LI><a href="#[d5]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d5]">DebugMon_Handler</a><BR>
 <LI><a href="#[ea]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ea]">ADC_IRQHandler</a><BR>
 <LI><a href="#[23e]">stateless_send_transport_cb</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23e]">stateless_send_transport_cb</a><BR>
 <LI><a href="#[4ed]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ed]">dnsParseName</a><BR>
 <LI><a href="#[5b7]">inv_set_state</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[400]">pjsip_inv_send_msg</a><BR>
 <LI><a href="#[52c]">exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52c]">exit</a><BR>
 <LI><a href="#[768]">send_refresh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[502]">sess_shutdown</a><BR>
 <LI><a href="#[214]">on_answer_call_med_tp_complete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[721]">pjsua_call_answer2</a><BR>
 <LI><a href="#[590]">get_name_len</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[590]">get_name_len</a><BR>
 <LI><a href="#[41d]">check_pending_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[420]">send_data</a><BR>
 <LI><a href="#[8d7]">pj_xml_clone</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8d7]">pj_xml_clone</a><BR>
 <LI><a href="#[8dd]">xml_parse_node</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8dd]">xml_parse_node</a><BR>
 <LI><a href="#[8e0]">xml_print_node</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e0]">xml_print_node</a><BR>
 <LI><a href="#[665]">pjsip_inv_process_redirect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b6]">inv_uac_recurse</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[ea]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d2]">BusFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ec]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ed]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ee]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[eb]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[118]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[119]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11a]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[117]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[126]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e3]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e4]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e5]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e6]">DMA1_Stream3_IRQHandler</a> from bsp_i2s.o(.text.DMA1_Stream3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e7]">DMA1_Stream4_IRQHandler</a> from bsp_i2s.o(.text.DMA1_Stream4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e8]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e9]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[107]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[131]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[110]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[111]">DMA2_Stream1_IRQHandler</a> from bsp_sai.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[112]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[113]">DMA2_Stream3_IRQHandler</a> from stm324x9i_eval_sd.o(.text.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[114]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11c]">DMA2_Stream5_IRQHandler</a> from bsp_sai.o(.text.DMA2_Stream5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11d]">DMA2_Stream6_IRQHandler</a> from stm324x9i_eval_sd.o(.text.DMA2_Stream6_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d5]">DebugMon_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[115]">ETH_IRQHandler</a> from stm32f4xx_eth_driver.o(.text.ETH_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[116]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[de]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[100]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[df]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e0]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e1]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e2]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ef]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[dc]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[108]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[128]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[127]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d0]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f8]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f7]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[fa]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f9]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[121]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[120]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[130]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12f]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d1]">MemManage_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[cf]">NMI_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11b]">OTG_FS_IRQHandler</a> from task_usb.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[102]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[123]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[122]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[125]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[124]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d9]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d6]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[dd]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[101]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[db]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ce]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12e]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[109]">SDIO_IRQHandler</a> from stm324x9i_eval_sd.o(.text.SDIO_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[138]">SD_DMAError</a> from stm32f4xx_hal_sd.o(.text.SD_DMAError) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[138]">SD_DMAError</a> from stm32f4xx_hal_sd.o(.text.SD_DMAError) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[137]">SD_DMAReceiveCplt</a> from stm32f4xx_hal_sd.o(.text.SD_DMAReceiveCplt) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[136]">SD_DMARxAbort</a> from stm32f4xx_hal_sd.o(.text.SD_DMARxAbort) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_IRQHandler)
 <LI><a href="#[139]">SD_DMATransmitCplt</a> from stm32f4xx_hal_sd.o(.text.SD_DMATransmitCplt) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[135]">SD_DMATxAbort</a> from stm32f4xx_hal_sd.o(.text.SD_DMATxAbort) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_IRQHandler)
 <LI><a href="#[26e]">SD_initialize</a> from sd_diskio_dma_rtos.o(.text.SD_initialize) referenced from sd_diskio_dma_rtos.o(.rodata.SD_Driver)
 <LI><a href="#[272]">SD_ioctl</a> from sd_diskio_dma_rtos.o(.text.SD_ioctl) referenced from sd_diskio_dma_rtos.o(.rodata.SD_Driver)
 <LI><a href="#[270]">SD_read</a> from sd_diskio_dma_rtos.o(.text.SD_read) referenced from sd_diskio_dma_rtos.o(.rodata.SD_Driver)
 <LI><a href="#[26f]">SD_status</a> from sd_diskio_dma_rtos.o(.text.SD_status) referenced from sd_diskio_dma_rtos.o(.rodata.SD_Driver)
 <LI><a href="#[271]">SD_write</a> from sd_diskio_dma_rtos.o(.text.SD_write) referenced from sd_diskio_dma_rtos.o(.rodata.SD_Driver)
 <LI><a href="#[fb]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[fc]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10b]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12b]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12c]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12d]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d4]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d7]">SysTick_Handler</a> from systemisr.o(.text.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[133]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[da]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f0]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f3]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f2]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f1]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f4]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f5]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f6]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10a]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10e]">TIM6_DAC_IRQHandler</a> from systemtick.o(.text.TIM6_DAC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10f]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[103]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[106]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[105]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[104]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10c]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10d]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[129]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12a]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[fd]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[fe]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ff]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11f]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d3]">UsageFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d8]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[134]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[26a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[26a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[26b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[239]">auto_rereg_timer_cb</a> from pjsua_acc.o(.text.auto_rereg_timer_cb) referenced 2 times from pjsua_acc.o(.text.schedule_reregistration)
 <LI><a href="#[221]">buddy_timer_cb</a> from pjsua_pres.o(.text.buddy_timer_cb) referenced 2 times from pjsua_pres.o(.text.pjsua_evsub_on_state)
 <LI><a href="#[14b]">ca_thread_func</a> from stm_dev.o(.text.ca_thread_func) referenced 2 times from stm_dev.o(.text.esp32_stream_start)
 <LI><a href="#[143]">call_med_event_cb</a> from pjsua_media.o(.text.call_med_event_cb) referenced 2 times from pjsua_media.o(.text.call_media_on_event)
 <LI><a href="#[217]">call_media_init_cb</a> from pjsua_media.o(.text.call_media_init_cb) referenced 2 times from pjsua_media.o(.text.pjsua_call_media_init)
 <LI><a href="#[212]">call_media_on_event</a> from pjsua_media.o(.text.call_media_on_event) referenced 2 times from pjsua_aud.o(.text.pjsua_aud_channel_update)
 <LI><a href="#[212]">call_media_on_event</a> from pjsua_media.o(.text.call_media_on_event) referenced 2 times from pjsua_aud.o(.text.pjsua_aud_stop_stream)
 <LI><a href="#[1cd]">clock_callback</a> from master_port.o(.text.clock_callback) referenced 2 times from master_port.o(.text.pjmedia_master_port_create)
 <LI><a href="#[1c0]">clock_thread</a> from clock_thread.o(.text.clock_thread) referenced 2 times from clock_thread.o(.text.pjmedia_clock_start)
 <LI><a href="#[290]">clone_binary_attr</a> from stun_msg.o(.text.clone_binary_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[293]">clone_empty_attr</a> from stun_msg.o(.text.clone_empty_attr) referenced 2 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[289]">clone_errcode_attr</a> from stun_msg.o(.text.clone_errcode_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[286]">clone_msgint_attr</a> from stun_msg.o(.text.clone_msgint_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.create_sdp_body)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.inv_handle_incoming_reliable_response)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.pjsip_create_sdp_body)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.pjsip_inv_create_ack)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.pjsip_inv_invite)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.pjsip_inv_update)
 <LI><a href="#[146]">clone_sdp</a> from sip_inv.o(.text.clone_sdp) referenced 2 times from sip_inv.o(.text.process_answer)
 <LI><a href="#[278]">clone_sockaddr_attr</a> from stun_msg.o(.text.clone_sockaddr_attr) referenced from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[278]">clone_sockaddr_attr</a> from stun_msg.o(.text.clone_sockaddr_attr) referenced 9 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[275]">clone_string_attr</a> from stun_msg.o(.text.clone_string_attr) referenced from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[275]">clone_string_attr</a> from stun_msg.o(.text.clone_string_attr) referenced 4 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[27e]">clone_uint64_attr</a> from stun_msg.o(.text.clone_uint64_attr) referenced 2 times from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[27e]">clone_uint64_attr</a> from stun_msg.o(.text.clone_uint64_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[27b]">clone_uint_attr</a> from stun_msg.o(.text.clone_uint_attr) referenced 2 times from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[27b]">clone_uint_attr</a> from stun_msg.o(.text.clone_uint_attr) referenced 12 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[28c]">clone_unknown_attr</a> from stun_msg.o(.text.clone_unknown_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[213]">close_snd_timer_cb</a> from pjsua_aud.o(.text.close_snd_timer_cb) referenced 2 times from pjsua_aud.o(.text.pjsua_aud_subsys_start)
 <LI><a href="#[1ee]">cmp_mod_name</a> from sip_endpoint.o(.text.cmp_mod_name) referenced 4 times from sip_endpoint.o(.text.pjsip_endpt_register_module)
 <LI><a href="#[17a]">cpool_create_pool</a> from pool_caching.o(.text.cpool_create_pool) referenced 2 times from pool_caching.o(.text.pj_caching_pool_init)
 <LI><a href="#[17c]">cpool_dump_status</a> from pool_caching.o(.text.cpool_dump_status) referenced 2 times from pool_caching.o(.text.pj_caching_pool_init)
 <LI><a href="#[17d]">cpool_on_block_alloc</a> from pool_caching.o(.text.cpool_on_block_alloc) referenced 2 times from pool_caching.o(.text.pj_caching_pool_init)
 <LI><a href="#[17e]">cpool_on_block_free</a> from pool_caching.o(.text.cpool_on_block_free) referenced 2 times from pool_caching.o(.text.pj_caching_pool_init)
 <LI><a href="#[17b]">cpool_release_pool</a> from pool_caching.o(.text.cpool_release_pool) referenced 2 times from pool_caching.o(.text.pj_caching_pool_init)
 <LI><a href="#[261]">dataconn_on_connect_complete</a> from turn_sock.o(.text.dataconn_on_connect_complete) referenced 2 times from turn_sock.o(.text.turn_on_connect_complete)
 <LI><a href="#[261]">dataconn_on_connect_complete</a> from turn_sock.o(.text.dataconn_on_connect_complete) referenced 2 times from turn_sock.o(.text.turn_on_connection_attempt)
 <LI><a href="#[25f]">dataconn_on_data_read</a> from turn_sock.o(.text.dataconn_on_data_read) referenced 2 times from turn_sock.o(.text.turn_on_connect_complete)
 <LI><a href="#[25f]">dataconn_on_data_read</a> from turn_sock.o(.text.dataconn_on_data_read) referenced 2 times from turn_sock.o(.text.turn_on_connection_attempt)
 <LI><a href="#[260]">dataconn_on_data_sent</a> from turn_sock.o(.text.dataconn_on_data_sent) referenced 2 times from turn_sock.o(.text.turn_on_connect_complete)
 <LI><a href="#[260]">dataconn_on_data_sent</a> from turn_sock.o(.text.dataconn_on_data_sent) referenced 2 times from turn_sock.o(.text.turn_on_connection_attempt)
 <LI><a href="#[28e]">decode_binary_attr</a> from stun_msg.o(.text.decode_binary_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[291]">decode_empty_attr</a> from stun_msg.o(.text.decode_empty_attr) referenced 2 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[287]">decode_errcode_attr</a> from stun_msg.o(.text.decode_errcode_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[284]">decode_msgint_attr</a> from stun_msg.o(.text.decode_msgint_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[276]">decode_sockaddr_attr</a> from stun_msg.o(.text.decode_sockaddr_attr) referenced from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[276]">decode_sockaddr_attr</a> from stun_msg.o(.text.decode_sockaddr_attr) referenced 5 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[273]">decode_string_attr</a> from stun_msg.o(.text.decode_string_attr) referenced from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[273]">decode_string_attr</a> from stun_msg.o(.text.decode_string_attr) referenced 4 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[27c]">decode_uint64_attr</a> from stun_msg.o(.text.decode_uint64_attr) referenced 2 times from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[27c]">decode_uint64_attr</a> from stun_msg.o(.text.decode_uint64_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[279]">decode_uint_attr</a> from stun_msg.o(.text.decode_uint_attr) referenced 2 times from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[279]">decode_uint_attr</a> from stun_msg.o(.text.decode_uint_attr) referenced 12 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[28a]">decode_unknown_attr</a> from stun_msg.o(.text.decode_unknown_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[28d]">decode_xored_sockaddr_attr</a> from stun_msg.o(.text.decode_xored_sockaddr_attr) referenced 4 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[88]">default_block_alloc</a> from pool_policy_malloc.o(.text.default_block_alloc) referenced 2 times from pool_policy_malloc.o(.data.pj_pool_factory_default_policy)
 <LI><a href="#[89]">default_block_free</a> from pool_policy_malloc.o(.text.default_block_free) referenced 2 times from pool_policy_malloc.o(.data.pj_pool_factory_default_policy)
 <LI><a href="#[8a]">default_pool_callback</a> from pool_policy_malloc.o(.text.default_pool_callback) referenced 2 times from pool_policy_malloc.o(.data.pj_pool_factory_default_policy)
 <LI><a href="#[1c3]">destroy_port</a> from conference.o(.text.destroy_port) referenced 2 times from conference.o(.text.pjmedia_conf_create)
 <LI><a href="#[23f]">destroy_stun_resolve_cb</a> from pjsua_core.o(.text.destroy_stun_resolve_cb) referenced 2 times from pjsua_core.o(.text.stun_resolve_dec_ref)
 <LI><a href="#[19b]">destroy_timer_callback</a> from stun_transaction.o(.text.destroy_timer_callback) referenced 2 times from stun_transaction.o(.text.pj_stun_client_tsx_create)
 <LI><a href="#[145]">dlg_on_destroy</a> from sip_dialog.o(.text.dlg_on_destroy) referenced 2 times from sip_dialog.o(.text.create_dialog)
 <LI><a href="#[148]">dnsProcessResponse</a> from dns_client.o(.text.dnsProcessResponse) referenced 2 times from dns_client.o(.text.dnsResolve)
 <LI><a href="#[200]">dns_a_callback</a> from sip_resolve.o(.text.dns_a_callback) referenced 2 times from sip_resolve.o(.text.pjsip_resolve)
 <LI><a href="#[149]">dns_callback</a> from srv_resolver.o(.text.dns_callback) referenced 4 times from srv_resolver.o(.text.dns_callback)
 <LI><a href="#[149]">dns_callback</a> from srv_resolver.o(.text.dns_callback) referenced 2 times from srv_resolver.o(.text.pj_dns_srv_resolve)
 <LI><a href="#[17f]">dns_resolver_on_destroy</a> from resolver.o(.text.dns_resolver_on_destroy) referenced 2 times from resolver.o(.text.pj_dns_resolver_create)
 <LI><a href="#[1aa]">dns_srv_resolver_cb</a> from stun_sock.o(.text.dns_srv_resolver_cb) referenced 2 times from stun_sock.o(.text.pj_stun_sock_start)
 <LI><a href="#[1b1]">dns_srv_resolver_cb</a> from turn_session.o(.text.dns_srv_resolver_cb) referenced 2 times from turn_session.o(.text.pj_turn_session_set_server)
 <LI><a href="#[211]">dtmf_callback</a> from pjsua_aud.o(.text.dtmf_callback) referenced 2 times from pjsua_aud.o(.text.pjsua_aud_channel_update)
 <LI><a href="#[210]">dtmf_event_callback</a> from pjsua_aud.o(.text.dtmf_event_callback) referenced 2 times from pjsua_aud.o(.text.pjsua_aud_channel_update)
 <LI><a href="#[39]">echo_supp_cancel_echo</a> from echo_suppress.o(.text.echo_supp_cancel_echo) referenced 2 times from echo_common.o(.data.echo_supp_op)
 <LI><a href="#[36]">echo_supp_create</a> from echo_suppress.o(.text.echo_supp_create) referenced 2 times from echo_common.o(.data.echo_supp_op)
 <LI><a href="#[37]">echo_supp_destroy</a> from echo_suppress.o(.text.echo_supp_destroy) referenced 2 times from echo_common.o(.data.echo_supp_op)
 <LI><a href="#[3a]">echo_supp_get_stat</a> from echo_suppress.o(.text.echo_supp_get_stat) referenced 2 times from echo_common.o(.data.echo_supp_op)
 <LI><a href="#[38]">echo_supp_reset</a> from echo_suppress.o(.text.echo_supp_reset) referenced 2 times from echo_common.o(.data.echo_supp_op)
 <LI><a href="#[28f]">encode_binary_attr</a> from stun_msg.o(.text.encode_binary_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[292]">encode_empty_attr</a> from stun_msg.o(.text.encode_empty_attr) referenced 2 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[288]">encode_errcode_attr</a> from stun_msg.o(.text.encode_errcode_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[285]">encode_msgint_attr</a> from stun_msg.o(.text.encode_msgint_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[277]">encode_sockaddr_attr</a> from stun_msg.o(.text.encode_sockaddr_attr) referenced from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[277]">encode_sockaddr_attr</a> from stun_msg.o(.text.encode_sockaddr_attr) referenced 9 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[274]">encode_string_attr</a> from stun_msg.o(.text.encode_string_attr) referenced from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[274]">encode_string_attr</a> from stun_msg.o(.text.encode_string_attr) referenced 4 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[27d]">encode_uint64_attr</a> from stun_msg.o(.text.encode_uint64_attr) referenced 2 times from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[27d]">encode_uint64_attr</a> from stun_msg.o(.text.encode_uint64_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[27a]">encode_uint_attr</a> from stun_msg.o(.text.encode_uint_attr) referenced 2 times from stun_msg.o(.rodata.extended_attr_desc)
 <LI><a href="#[27a]">encode_uint_attr</a> from stun_msg.o(.text.encode_uint_attr) referenced 12 times from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[28b]">encode_unknown_attr</a> from stun_msg.o(.text.encode_unknown_attr) referenced from stun_msg.o(.rodata.mandatory_attr_desc)
 <LI><a href="#[18f]">end_of_cand_ind_timer</a> from ice_session.o(.text.end_of_cand_ind_timer) referenced 2 times from ice_session.o(.text.pj_ice_sess_start_check)
 <LI><a href="#[1ec]">endpt_on_rx_msg</a> from sip_endpoint.o(.text.endpt_on_rx_msg) referenced 2 times from sip_endpoint.o(.text.pjsip_endpt_create)
 <LI><a href="#[1ed]">endpt_on_tx_msg</a> from sip_endpoint.o(.text.endpt_on_tx_msg) referenced 2 times from sip_endpoint.o(.text.pjsip_endpt_create)
 <LI><a href="#[40]">esp32_factory_create_stream</a> from stm_dev.o(.text.esp32_factory_create_stream) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[3f]">esp32_factory_default_param</a> from stm_dev.o(.text.esp32_factory_default_param) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[3c]">esp32_factory_destroy</a> from stm_dev.o(.text.esp32_factory_destroy) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[3d]">esp32_factory_get_dev_count</a> from stm_dev.o(.text.esp32_factory_get_dev_count) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[3e]">esp32_factory_get_dev_info</a> from stm_dev.o(.text.esp32_factory_get_dev_info) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[3b]">esp32_factory_init</a> from stm_dev.o(.text.esp32_factory_init) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[41]">esp32_factory_refresh</a> from stm_dev.o(.text.esp32_factory_refresh) referenced 2 times from stm_dev.o(.data.esp_factory_op)
 <LI><a href="#[47]">esp32_stream_destroy</a> from stm_dev.o(.text.esp32_stream_destroy) referenced 2 times from stm_dev.o(.data.esp_stream_op)
 <LI><a href="#[43]">esp32_stream_get_cap</a> from stm_dev.o(.text.esp32_stream_get_cap) referenced 2 times from stm_dev.o(.data.esp_stream_op)
 <LI><a href="#[42]">esp32_stream_get_param</a> from stm_dev.o(.text.esp32_stream_get_param) referenced 2 times from stm_dev.o(.data.esp_stream_op)
 <LI><a href="#[44]">esp32_stream_set_cap</a> from stm_dev.o(.text.esp32_stream_set_cap) referenced 2 times from stm_dev.o(.data.esp_stream_op)
 <LI><a href="#[45]">esp32_stream_start</a> from stm_dev.o(.text.esp32_stream_start) referenced 2 times from stm_dev.o(.data.esp_stream_op)
 <LI><a href="#[46]">esp32_stream_stop</a> from stm_dev.o(.text.esp32_stream_stop) referenced 2 times from stm_dev.o(.data.esp_stream_op)
 <LI><a href="#[1c6]">event_worker_thread</a> from event.o(.text.event_worker_thread) referenced 2 times from event.o(.text.pjmedia_event_mgr_create)
 <LI><a href="#[1f2]">evsub_on_destroy</a> from evsub.o(.text.evsub_on_destroy) referenced 2 times from evsub.o(.text.pjsip_evsub_create_uac)
 <LI><a href="#[1f2]">evsub_on_destroy</a> from evsub.o(.text.evsub_on_destroy) referenced 2 times from evsub.o(.text.pjsip_evsub_create_uas)
 <LI><a href="#[199]">exception_cleanup</a> from except.o(.text.exception_cleanup) referenced 2 times from except.o(.text.pj_push_exception_handler_)
 <LI><a href="#[269]">fputc</a> from retarget_io.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[51]">g711_alloc_codec</a> from g711.o(.text.g711_alloc_codec) referenced 2 times from g711.o(.data.g711_factory_op)
 <LI><a href="#[56]">g711_close</a> from g711.o(.text.g711_close) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[52]">g711_dealloc_codec</a> from g711.o(.text.g711_dealloc_codec) referenced 2 times from g711.o(.data.g711_factory_op)
 <LI><a href="#[5a]">g711_decode</a> from g711.o(.text.g711_decode) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[4f]">g711_default_attr</a> from g711.o(.text.g711_default_attr) referenced 2 times from g711.o(.data.g711_factory_op)
 <LI><a href="#[59]">g711_encode</a> from g711.o(.text.g711_encode) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[50]">g711_enum_codecs</a> from g711.o(.text.g711_enum_codecs) referenced 2 times from g711.o(.data.g711_factory_op)
 <LI><a href="#[54]">g711_init</a> from g711.o(.text.g711_init) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[57]">g711_modify</a> from g711.o(.text.g711_modify) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[55]">g711_open</a> from g711.o(.text.g711_open) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[58]">g711_parse</a> from g711.o(.text.g711_parse) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[5b]">g711_recover</a> from g711.o(.text.g711_recover) referenced 2 times from g711.o(.data.g711_op)
 <LI><a href="#[4e]">g711_test_alloc</a> from g711.o(.text.g711_test_alloc) referenced 2 times from g711.o(.data.g711_factory_op)
 <LI><a href="#[1c1]">get_frame</a> from conference.o(.text.get_frame) referenced 2 times from conference.o(.text.pjmedia_conf_create)
 <LI><a href="#[1da]">get_frame</a> from stream.o(.text.get_frame) referenced 2 times from stream.o(.text.pjmedia_stream_create)
 <LI><a href="#[1d9]">get_frame_ext</a> from stream.o(.text.get_frame_ext) referenced 2 times from stream.o(.text.pjmedia_stream_create)
 <LI><a href="#[181]">grp_lock_acquire</a> from lock.o(.text.grp_lock_acquire) referenced 2 times from lock.o(.text.pj_grp_lock_create)
 <LI><a href="#[184]">grp_lock_destroy</a> from lock.o(.text.grp_lock_destroy) referenced 2 times from lock.o(.text.pj_grp_lock_create)
 <LI><a href="#[183]">grp_lock_release</a> from lock.o(.text.grp_lock_release) referenced 2 times from lock.o(.text.pj_grp_lock_create)
 <LI><a href="#[182]">grp_lock_tryacquire</a> from lock.o(.text.grp_lock_tryacquire) referenced 2 times from lock.o(.text.pj_grp_lock_create)
 <LI><a href="#[231]">handle_call_on_ip_change_cb</a> from pjsua_acc.o(.text.handle_call_on_ip_change_cb) referenced 2 times from pjsua_acc.o(.text.regc_cb)
 <LI><a href="#[142]">hangup_timer_cb</a> from pjsua_call.o(.text.hangup_timer_cb) referenced 2 times from pjsua_call.o(.text.call_inv_end_session)
 <LI><a href="#[14d]">ice_failed_nego_cb</a> from pjsua_media.o(.text.ice_failed_nego_cb) referenced 2 times from pjsua_media.o(.text.ice_failed_nego_cb)
 <LI><a href="#[14d]">ice_failed_nego_cb</a> from pjsua_media.o(.text.ice_failed_nego_cb) referenced 2 times from pjsua_media.o(.text.on_ice_complete)
 <LI><a href="#[14e]">ice_init_complete_cb</a> from pjsua_media.o(.text.ice_init_complete_cb) referenced 2 times from pjsua_media.o(.text.ice_init_complete_cb)
 <LI><a href="#[14e]">ice_init_complete_cb</a> from pjsua_media.o(.text.ice_init_complete_cb) referenced 2 times from pjsua_media.o(.text.on_ice_complete)
 <LI><a href="#[186]">ice_on_destroy</a> from ice_session.o(.text.ice_on_destroy) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[186]">ice_on_destroy</a> from ice_session.o(.text.ice_on_destroy) referenced 2 times from ice_session.o(.text.pj_ice_sess_detach_grp_lock)
 <LI><a href="#[1c7]">ice_on_ice_complete</a> from transport_ice.o(.text.ice_on_ice_complete) referenced 2 times from transport_ice.o(.text.pjmedia_ice_create3)
 <LI><a href="#[1c9]">ice_on_new_candidate</a> from transport_ice.o(.text.ice_on_new_candidate) referenced 2 times from transport_ice.o(.text.pjmedia_ice_create3)
 <LI><a href="#[1c8]">ice_on_rx_data</a> from transport_ice.o(.text.ice_on_rx_data) referenced 2 times from transport_ice.o(.text.pjmedia_ice_create3)
 <LI><a href="#[196]">ice_rx_data</a> from ice_strans.o(.text.ice_rx_data) referenced 2 times from ice_strans.o(.text.pj_ice_strans_init_ice)
 <LI><a href="#[190]">ice_st_on_destroy</a> from ice_strans.o(.text.ice_st_on_destroy) referenced 2 times from ice_strans.o(.text.pj_ice_strans_create)
 <LI><a href="#[197]">ice_tx_pkt</a> from ice_strans.o(.text.ice_tx_pkt) referenced 2 times from ice_strans.o(.text.pj_ice_strans_init_ice)
 <LI><a href="#[6f]">im_on_rx_request</a> from pjsua_im.o(.text.im_on_rx_request) referenced 2 times from pjsua_im.o(.data.mod_pjsua_im)
 <LI><a href="#[165]">int_parse_other_uri</a> from sip_parser.o(.text.int_parse_other_uri) referenced 4 times from sip_parser.o(.text.int_parse_uri)
 <LI><a href="#[165]">int_parse_other_uri</a> from sip_parser.o(.text.int_parse_other_uri) referenced 4 times from sip_parser.o(.text.int_parse_uri_or_name_addr)
 <LI><a href="#[150]">int_parse_sip_url</a> from sip_parser.o(.text.int_parse_sip_url) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[237]">internal_stun_resolve_cb</a> from pjsua_core.o(.text.internal_stun_resolve_cb) referenced 2 times from pjsua_core.o(.text.resolve_stun_server)
 <LI><a href="#[16a]">inv_on_state_calling</a> from sip_inv.o(.text.inv_on_state_calling) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[16e]">inv_on_state_confirmed</a> from sip_inv.o(.text.inv_on_state_confirmed) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[16d]">inv_on_state_connecting</a> from sip_inv.o(.text.inv_on_state_connecting) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[16f]">inv_on_state_disconnected</a> from sip_inv.o(.text.inv_on_state_disconnected) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[16c]">inv_on_state_early</a> from sip_inv.o(.text.inv_on_state_early) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[16b]">inv_on_state_incoming</a> from sip_inv.o(.text.inv_on_state_incoming) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[169]">inv_on_state_null</a> from sip_inv.o(.text.inv_on_state_null) referenced from sip_inv.o(.text.mod_inv_on_tsx_state)
 <LI><a href="#[179]">ioqueue_on_accept_complete</a> from activesock.o(.text.ioqueue_on_accept_complete) referenced 2 times from activesock.o(.text.pj_activesock_create)
 <LI><a href="#[178]">ioqueue_on_connect_complete</a> from activesock.o(.text.ioqueue_on_connect_complete) referenced 2 times from activesock.o(.text.pj_activesock_create)
 <LI><a href="#[176]">ioqueue_on_read_complete</a> from activesock.o(.text.ioqueue_on_read_complete) referenced 2 times from activesock.o(.text.pj_activesock_create)
 <LI><a href="#[177]">ioqueue_on_write_complete</a> from activesock.o(.text.ioqueue_on_write_complete) referenced 2 times from activesock.o(.text.pj_activesock_create)
 <LI><a href="#[1cb]">jbuf_discard_progressive</a> from jbuf.o(.text.jbuf_discard_progressive) referenced 2 times from jbuf.o(.text.pjmedia_jbuf_create)
 <LI><a href="#[1cb]">jbuf_discard_progressive</a> from jbuf.o(.text.jbuf_discard_progressive) referenced 2 times from jbuf.o(.text.pjmedia_jbuf_set_discard)
 <LI><a href="#[1cc]">jbuf_discard_static</a> from jbuf.o(.text.jbuf_discard_static) referenced 2 times from jbuf.o(.text.pjmedia_jbuf_set_discard)
 <LI><a href="#[1a9]">ka_timer_cb</a> from stun_sock.o(.text.ka_timer_cb) referenced 2 times from stun_sock.o(.text.pj_stun_sock_create)
 <LI><a href="#[265]">keep_alive_timer_cb</a> from pjsua_acc.o(.text.keep_alive_timer_cb) referenced 2 times from pjsua_acc.o(.text.update_keep_alive)
 <LI><a href="#[282]">lan8720DisableIrq</a> from lan8720_driver.o(.text.lan8720DisableIrq) referenced from lan8720_driver.o(.rodata.lan8720PhyDriver)
 <LI><a href="#[281]">lan8720EnableIrq</a> from lan8720_driver.o(.text.lan8720EnableIrq) referenced from lan8720_driver.o(.rodata.lan8720PhyDriver)
 <LI><a href="#[283]">lan8720EventHandler</a> from lan8720_driver.o(.text.lan8720EventHandler) referenced from lan8720_driver.o(.rodata.lan8720PhyDriver)
 <LI><a href="#[27f]">lan8720Init</a> from lan8720_driver.o(.text.lan8720Init) referenced from lan8720_driver.o(.rodata.lan8720PhyDriver)
 <LI><a href="#[280]">lan8720Tick</a> from lan8720_driver.o(.text.lan8720Tick) referenced from lan8720_driver.o(.rodata.lan8720PhyDriver)
 <LI><a href="#[203]">lis_create_transport</a> from sip_transport_tcp.o(.text.lis_create_transport) referenced 2 times from sip_transport_tcp.o(.text.pjsip_tcp_transport_start3)
 <LI><a href="#[204]">lis_destroy</a> from sip_transport_tcp.o(.text.lis_destroy) referenced 2 times from sip_transport_tcp.o(.text.pjsip_tcp_transport_start3)
 <LI><a href="#[202]">lis_on_destroy</a> from sip_transport_tcp.o(.text.lis_on_destroy) referenced 2 times from sip_transport_tcp.o(.text.pjsip_tcp_transport_start3)
 <LI><a href="#[167]">llmnrProcessQuery</a> from llmnr_responder.o(.text.llmnrProcessQuery) referenced 2 times from llmnr_responder.o(.text.llmnrResponderInit)
 <LI><a href="#[229]">log_writer</a> from pjsua_core.o(.text.log_writer) referenced 2 times from pjsua_core.o(.text.pjsua_reconfigure_logging)
 <LI><a href="#[8b]">logging_on_rx_msg</a> from pjsua_core.o(.text.logging_on_rx_msg) referenced 4 times from pjsua_core.o(.data.pjsua_msg_logger)
 <LI><a href="#[8c]">logging_on_tx_msg</a> from pjsua_core.o(.text.logging_on_tx_msg) referenced 4 times from pjsua_core.o(.data.pjsua_msg_logger)
 <LI><a href="#[198]">logging_shutdown</a> from log.o(.text.logging_shutdown) referenced 2 times from log.o(.text.pj_log_init)
 <LI><a href="#[132]">main</a> from systemmain.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[226]">media_channel_init_cb</a> from pjsua_media.o(.text.media_channel_init_cb) referenced 2 times from pjsua_media.o(.text.pjsua_media_channel_init)
 <LI><a href="#[20]">min_se_hdr_clone</a> from sip_timer.o(.text.min_se_hdr_clone) referenced 2 times from sip_timer.o(.data..L_MergedGlobals)
 <LI><a href="#[22]">min_se_hdr_print</a> from sip_timer.o(.text.min_se_hdr_print) referenced 2 times from sip_timer.o(.data..L_MergedGlobals)
 <LI><a href="#[21]">min_se_hdr_shallow_clone</a> from sip_timer.o(.text.min_se_hdr_shallow_clone) referenced 2 times from sip_timer.o(.data..L_MergedGlobals)
 <LI><a href="#[66]">mod_100rel_load</a> from sip_100rel.o(.text.mod_100rel_load) referenced 2 times from sip_100rel.o(.data.mod_100rel)
 <LI><a href="#[68]">mod_evsub_on_tsx_state</a> from evsub.o(.text.mod_evsub_on_tsx_state) referenced 2 times from evsub.o(.data.mod_evsub)
 <LI><a href="#[67]">mod_evsub_unload</a> from evsub.o(.text.mod_evsub_unload) referenced 2 times from evsub.o(.data.mod_evsub)
 <LI><a href="#[69]">mod_inv_load</a> from sip_inv.o(.text.mod_inv_load) referenced 2 times from sip_inv.o(.data.mod_inv)
 <LI><a href="#[6b]">mod_inv_on_rx_request</a> from sip_inv.o(.text.mod_inv_on_rx_request) referenced 2 times from sip_inv.o(.data.mod_inv)
 <LI><a href="#[6c]">mod_inv_on_rx_response</a> from sip_inv.o(.text.mod_inv_on_rx_response) referenced 2 times from sip_inv.o(.data.mod_inv)
 <LI><a href="#[6d]">mod_inv_on_tsx_state</a> from sip_inv.o(.text.mod_inv_on_tsx_state) referenced 2 times from sip_inv.o(.data.mod_inv)
 <LI><a href="#[6a]">mod_inv_unload</a> from sip_inv.o(.text.mod_inv_unload) referenced 2 times from sip_inv.o(.data.mod_inv)
 <LI><a href="#[6e]">mod_on_tx_msg</a> from sip_transport.o(.text.mod_on_tx_msg) referenced 4 times from sip_transport.o(.data.mod_msg_print)
 <LI><a href="#[26c]">mod_pjsua_on_rx_request</a> from pjsua_core.o(.text.mod_pjsua_on_rx_request) referenced from pjsua_core.o(.rodata..L__const.pjsua_init.mod_initializer)
 <LI><a href="#[26d]">mod_pjsua_on_rx_response</a> from pjsua_core.o(.text.mod_pjsua_on_rx_response) referenced from pjsua_core.o(.rodata..L__const.pjsua_init.mod_initializer)
 <LI><a href="#[5]">mod_tsx_layer_load</a> from sip_transaction.o(.text.mod_tsx_layer_load) referenced 2 times from sip_transaction.o(.data..L_MergedGlobals)
 <LI><a href="#[9]">mod_tsx_layer_on_rx_request</a> from sip_transaction.o(.text.mod_tsx_layer_on_rx_request) referenced 2 times from sip_transaction.o(.data..L_MergedGlobals)
 <LI><a href="#[a]">mod_tsx_layer_on_rx_response</a> from sip_transaction.o(.text.mod_tsx_layer_on_rx_response) referenced 2 times from sip_transaction.o(.data..L_MergedGlobals)
 <LI><a href="#[6]">mod_tsx_layer_start</a> from sip_transaction.o(.text.mod_tsx_layer_start) referenced 2 times from sip_transaction.o(.data..L_MergedGlobals)
 <LI><a href="#[7]">mod_tsx_layer_stop</a> from sip_transaction.o(.text.mod_tsx_layer_stop) referenced 2 times from sip_transaction.o(.data..L_MergedGlobals)
 <LI><a href="#[8]">mod_tsx_layer_unload</a> from sip_transaction.o(.text.mod_tsx_layer_unload) referenced 2 times from sip_transaction.o(.data..L_MergedGlobals)
 <LI><a href="#[72]">mod_ua_load</a> from sip_ua_layer.o(.text.mod_ua_load) referenced 2 times from sip_ua_layer.o(.data.mod_ua)
 <LI><a href="#[74]">mod_ua_on_rx_request</a> from sip_ua_layer.o(.text.mod_ua_on_rx_request) referenced 2 times from sip_ua_layer.o(.data.mod_ua)
 <LI><a href="#[75]">mod_ua_on_rx_response</a> from sip_ua_layer.o(.text.mod_ua_on_rx_response) referenced 2 times from sip_ua_layer.o(.data.mod_ua)
 <LI><a href="#[76]">mod_ua_on_tsx_state</a> from sip_ua_layer.o(.text.mod_ua_on_tsx_state) referenced 2 times from sip_ua_layer.o(.data.mod_ua)
 <LI><a href="#[73]">mod_ua_unload</a> from sip_ua_layer.o(.text.mod_ua_unload) referenced 2 times from sip_ua_layer.o(.data.mod_ua)
 <LI><a href="#[71]">mod_util_on_tsx_state</a> from sip_util_statefull.o(.text.mod_util_on_tsx_state) referenced 2 times from sip_util_statefull.o(.data.mod_stateful_util)
 <LI><a href="#[1f8]">multipart_clone_data</a> from sip_multipart.o(.text.multipart_clone_data) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_create)
 <LI><a href="#[1f7]">multipart_print_body</a> from sip_multipart.o(.text.multipart_print_body) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_add_part)
 <LI><a href="#[1f7]">multipart_print_body</a> from sip_multipart.o(.text.multipart_print_body) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_create)
 <LI><a href="#[1f7]">multipart_print_body</a> from sip_multipart.o(.text.multipart_print_body) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_find_part)
 <LI><a href="#[1f7]">multipart_print_body</a> from sip_multipart.o(.text.multipart_print_body) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_parse)
 <LI><a href="#[7c]">mwi_evsub_on_rx_notify</a> from pjsua_pres.o(.text.mwi_evsub_on_rx_notify) referenced 2 times from pjsua_pres.o(.data.mwi_cb)
 <LI><a href="#[7b]">mwi_evsub_on_state</a> from pjsua_pres.o(.text.mwi_evsub_on_state) referenced 2 times from pjsua_pres.o(.data.mwi_cb)
 <LI><a href="#[15]">mwi_on_evsub_client_refresh</a> from mwi.o(.text.mwi_on_evsub_client_refresh) referenced 2 times from mwi.o(.data..L_MergedGlobals)
 <LI><a href="#[14]">mwi_on_evsub_rx_notify</a> from mwi.o(.text.mwi_on_evsub_rx_notify) referenced 2 times from mwi.o(.data..L_MergedGlobals)
 <LI><a href="#[13]">mwi_on_evsub_rx_refresh</a> from mwi.o(.text.mwi_on_evsub_rx_refresh) referenced 2 times from mwi.o(.data..L_MergedGlobals)
 <LI><a href="#[16]">mwi_on_evsub_server_timeout</a> from mwi.o(.text.mwi_on_evsub_server_timeout) referenced 2 times from mwi.o(.data..L_MergedGlobals)
 <LI><a href="#[11]">mwi_on_evsub_state</a> from mwi.o(.text.mwi_on_evsub_state) referenced 2 times from mwi.o(.data..L_MergedGlobals)
 <LI><a href="#[12]">mwi_on_evsub_tsx_state</a> from mwi.o(.text.mwi_on_evsub_tsx_state) referenced 2 times from mwi.o(.data..L_MergedGlobals)
 <LI><a href="#[166]">nat_detect_cb</a> from pjsua_core.o(.text.nat_detect_cb) referenced 2 times from pjsua_core.o(.text.internal_stun_resolve_cb)
 <LI><a href="#[171]">nbnsProcessMessage</a> from nbns_common.o(.text.nbnsProcessMessage) referenced 2 times from nbns_common.o(.text.nbnsInit)
 <LI><a href="#[172]">netTask</a> from net.o(.text.netTask) referenced 2 times from net.o(.text.netInit)
 <LI><a href="#[1ce]">null_get_frame</a> from null_port.o(.text.null_get_frame) referenced 2 times from null_port.o(.text.pjmedia_null_port_create)
 <LI><a href="#[1d0]">null_on_destroy</a> from null_port.o(.text.null_on_destroy) referenced 2 times from null_port.o(.text.pjmedia_null_port_create)
 <LI><a href="#[82]">null_op</a> from lock.o(.text.null_op) referenced 8 times from lock.o(.data.null_lock_template)
 <LI><a href="#[1cf]">null_put_frame</a> from null_port.o(.text.null_put_frame) referenced 2 times from null_port.o(.text.pjmedia_null_port_create)
 <LI><a href="#[201]">on_accept_complete</a> from sip_transport_tcp.o(.text.on_accept_complete) referenced 2 times from sip_transport_tcp.o(.text.pjsip_tcp_transport_lis_start)
 <LI><a href="#[214]">on_answer_call_med_tp_complete</a> from pjsua_call.o(.text.on_answer_call_med_tp_complete) referenced 2 times from pjsua_call.o(.text.pjsua_call_answer2)
 <LI><a href="#[174]">on_aud_prev_play_frame</a> from pjsua_aud.o(.text.on_aud_prev_play_frame) referenced 2 times from pjsua_aud.o(.text.open_snd_dev)
 <LI><a href="#[175]">on_aud_prev_rec_frame</a> from pjsua_aud.o(.text.on_aud_prev_rec_frame) referenced 2 times from pjsua_aud.o(.text.open_snd_dev)
 <LI><a href="#[1a3]">on_cache_timeout</a> from stun_session.o(.text.on_cache_timeout) referenced 2 times from stun_session.o(.text.pj_stun_session_send_msg)
 <LI><a href="#[23b]">on_call_media_state</a> from task_main.o(.text.on_call_media_state) referenced 2 times from task_main.o(.text.simple_pjsua)
 <LI><a href="#[23c]">on_call_state</a> from task_main.o(.text.on_call_state) referenced 2 times from task_main.o(.text.simple_pjsua)
 <LI><a href="#[247]">on_connect_complete</a> from sip_transport_tcp.o(.text.on_connect_complete) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[264]">on_connect_complete_asock</a> from turn_sock.o(.text.on_connect_complete_asock) referenced 2 times from turn_sock.o(.text.turn_on_state)
 <LI><a href="#[248]">on_data_read</a> from sip_transport_tcp.o(.text.on_data_read) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[262]">on_data_read_asock</a> from turn_sock.o(.text.on_data_read_asock) referenced 2 times from turn_sock.o(.text.turn_on_state)
 <LI><a href="#[1a5]">on_data_recvfrom</a> from stun_sock.o(.text.on_data_recvfrom) referenced 2 times from stun_sock.o(.text.pj_stun_sock_create)
 <LI><a href="#[1a6]">on_data_sent</a> from stun_sock.o(.text.on_data_sent) referenced 2 times from stun_sock.o(.text.pj_stun_sock_create)
 <LI><a href="#[249]">on_data_sent</a> from sip_transport_tcp.o(.text.on_data_sent) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[263]">on_data_sent_asock</a> from turn_sock.o(.text.on_data_sent_asock) referenced 2 times from turn_sock.o(.text.turn_on_state)
 <LI><a href="#[224]">on_dlg_forked</a> from pjsua_call.o(.text.on_dlg_forked) referenced 2 times from pjsua_core.o(.text.pjsua_init)
 <LI><a href="#[195]">on_ice_complete</a> from ice_strans.o(.text.on_ice_complete) referenced 2 times from ice_strans.o(.text.pj_ice_strans_init_ice)
 <LI><a href="#[216]">on_ice_complete</a> from pjsua_media.o(.text.on_ice_complete) referenced 2 times from pjsua_media.o(.text.pjsua_call_media_init)
 <LI><a href="#[23a]">on_incoming_call</a> from task_main.o(.text.on_incoming_call) referenced 2 times from task_main.o(.text.simple_pjsua)
 <LI><a href="#[218]">on_incoming_call_med_tp_complete</a> from pjsua_call.o(.text.on_incoming_call_med_tp_complete) referenced 2 times from pjsua_call.o(.text.pjsua_call_on_incoming)
 <LI><a href="#[215]">on_make_call_med_tp_complete</a> from pjsua_call.o(.text.on_make_call_med_tp_complete) referenced 2 times from pjsua_call.o(.text.pjsua_call_make_call)
 <LI><a href="#[144]">on_media_event</a> from pjsua_media.o(.text.on_media_event) referenced 2 times from pjsua_aud.o(.text.close_snd_dev)
 <LI><a href="#[144]">on_media_event</a> from pjsua_media.o(.text.on_media_event) referenced 2 times from pjsua_aud.o(.text.open_snd_dev)
 <LI><a href="#[180]">on_read_complete</a> from resolver.o(.text.on_read_complete) referenced 2 times from resolver.o(.text.pj_dns_resolver_create)
 <LI><a href="#[19e]">on_read_complete</a> from nat_detect.o(.text.on_read_complete) referenced 2 times from nat_detect.o(.text.pj_stun_detect_nat_type2)
 <LI><a href="#[19f]">on_request_complete</a> from nat_detect.o(.text.on_request_complete) referenced 2 times from nat_detect.o(.text.pj_stun_detect_nat_type2)
 <LI><a href="#[1e4]">on_retransmit</a> from sip_100rel.o(.text.on_retransmit) referenced 2 times from sip_100rel.o(.text.pjsip_100rel_tx_response)
 <LI><a href="#[1e0]">on_rtp_data_sent</a> from transport_udp.o(.text.on_rtp_data_sent) referenced 2 times from transport_udp.o(.text.pjmedia_transport_udp_attach)
 <LI><a href="#[1de]">on_rx_rtcp</a> from stream.o(.text.on_rx_rtcp) referenced 2 times from stream.o(.text.pjmedia_stream_create)
 <LI><a href="#[1e1]">on_rx_rtcp</a> from transport_udp.o(.text.on_rx_rtcp) referenced 2 times from transport_udp.o(.text.pjmedia_transport_udp_attach)
 <LI><a href="#[1dd]">on_rx_rtp</a> from stream.o(.text.on_rx_rtp) referenced 2 times from stream.o(.text.pjmedia_stream_create)
 <LI><a href="#[1df]">on_rx_rtp</a> from transport_udp.o(.text.on_rx_rtp) referenced 2 times from transport_udp.o(.text.pjmedia_transport_udp_attach)
 <LI><a href="#[1d4]">on_scanner_error</a> from sdp.o(.text.on_scanner_error) referenced 2 times from sdp.o(.text.pjmedia_sdp_attr_get_rtcp)
 <LI><a href="#[1d4]">on_scanner_error</a> from sdp.o(.text.on_scanner_error) referenced 2 times from sdp.o(.text.pjmedia_sdp_attr_get_rtpmap)
 <LI><a href="#[1d4]">on_scanner_error</a> from sdp.o(.text.on_scanner_error) referenced 2 times from sdp.o(.text.pjmedia_sdp_attr_get_ssrc)
 <LI><a href="#[1d4]">on_scanner_error</a> from sdp.o(.text.on_scanner_error) referenced 2 times from sdp.o(.text.pjmedia_sdp_parse)
 <LI><a href="#[1a0]">on_send_msg</a> from nat_detect.o(.text.on_send_msg) referenced 2 times from nat_detect.o(.text.pj_stun_detect_nat_type2)
 <LI><a href="#[19d]">on_sess_timer</a> from nat_detect.o(.text.on_sess_timer) referenced 2 times from nat_detect.o(.text.pj_stun_detect_nat_type2)
 <LI><a href="#[187]">on_stun_request_complete</a> from ice_session.o(.text.on_stun_request_complete) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[188]">on_stun_rx_indication</a> from ice_session.o(.text.on_stun_rx_indication) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[189]">on_stun_rx_request</a> from ice_session.o(.text.on_stun_rx_request) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[18a]">on_stun_send_msg</a> from ice_session.o(.text.on_stun_send_msg) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[1bc]">on_syntax_error</a> from xml.o(.text.on_syntax_error) referenced 2 times from xml.o(.text.pj_xml_parse)
 <LI><a href="#[1f6]">on_syntax_error</a> from sip_parser.o(.text.on_syntax_error) referenced 2 times from sip_parser.o(.text.pjsip_find_msg)
 <LI><a href="#[1f6]">on_syntax_error</a> from sip_parser.o(.text.on_syntax_error) referenced 2 times from sip_parser.o(.text.pjsip_parse_hdr)
 <LI><a href="#[1f6]">on_syntax_error</a> from sip_parser.o(.text.on_syntax_error) referenced 2 times from sip_parser.o(.text.pjsip_parse_headers)
 <LI><a href="#[1f6]">on_syntax_error</a> from sip_parser.o(.text.on_syntax_error) referenced 2 times from sip_parser.o(.text.pjsip_parse_rdata)
 <LI><a href="#[1f6]">on_syntax_error</a> from sip_parser.o(.text.on_syntax_error) referenced 2 times from sip_parser.o(.text.pjsip_parse_uri)
 <LI><a href="#[24c]">on_timeout</a> from resolver.o(.text.on_timeout) referenced 2 times from resolver.o(.text.transmit_query)
 <LI><a href="#[14c]">on_timer</a> from evsub.o(.text.on_timer) referenced 2 times from evsub.o(.text.evsub_create)
 <LI><a href="#[185]">on_timer</a> from ice_session.o(.text.on_timer) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[1ad]">on_timer_event</a> from turn_session.o(.text.on_timer_event) referenced 2 times from turn_session.o(.text.pj_turn_session_create)
 <LI><a href="#[22b]">on_tp_state_callback</a> from pjsua_core.o(.text.on_tp_state_callback) referenced 4 times from pjsua_core.o(.text.pjsua_transport_create)
 <LI><a href="#[194]">on_valid_pair</a> from ice_strans.o(.text.on_valid_pair) referenced 2 times from ice_strans.o(.text.pj_ice_strans_init_ice)
 <LI><a href="#[8d]">options_on_rx_request</a> from pjsua_core.o(.text.options_on_rx_request) referenced 2 times from pjsua_core.o(.data.pjsua_options_handler)
 <LI><a href="#[87]">other_uri_clone</a> from sip_uri.o(.text.other_uri_clone) referenced 2 times from sip_uri.o(.data.other_uri_vptr)
 <LI><a href="#[86]">other_uri_cmp</a> from sip_uri.o(.text.other_uri_cmp) referenced 2 times from sip_uri.o(.data.other_uri_vptr)
 <LI><a href="#[83]">other_uri_get_scheme</a> from sip_uri.o(.text.other_uri_get_scheme) referenced 2 times from sip_uri.o(.data.other_uri_vptr)
 <LI><a href="#[84]">other_uri_get_uri</a> from sip_uri.o(.text.other_uri_get_uri) referenced 2 times from sip_uri.o(.data.other_uri_vptr)
 <LI><a href="#[85]">other_uri_print</a> from sip_uri.o(.text.other_uri_print) referenced 2 times from sip_uri.o(.data.other_uri_vptr)
 <LI><a href="#[151]">parse_hdr_accept</a> from sip_parser.o(.text.parse_hdr_accept) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[152]">parse_hdr_allow</a> from sip_parser.o(.text.parse_hdr_allow) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[1e5]">parse_hdr_authorization</a> from sip_auth_parser.o(.text.parse_hdr_authorization) referenced 2 times from sip_auth_parser.o(.text.pjsip_auth_init_parser)
 <LI><a href="#[153]">parse_hdr_call_id</a> from sip_parser.o(.text.parse_hdr_call_id) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[154]">parse_hdr_contact</a> from sip_parser.o(.text.parse_hdr_contact) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[155]">parse_hdr_content_len</a> from sip_parser.o(.text.parse_hdr_content_len) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[156]">parse_hdr_content_type</a> from sip_parser.o(.text.parse_hdr_content_type) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[157]">parse_hdr_cseq</a> from sip_parser.o(.text.parse_hdr_cseq) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[1f4]">parse_hdr_event</a> from evsub_msg.o(.text.parse_hdr_event) referenced 2 times from evsub_msg.o(.text.pjsip_evsub_init_parser)
 <LI><a href="#[158]">parse_hdr_expires</a> from sip_parser.o(.text.parse_hdr_expires) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[159]">parse_hdr_from</a> from sip_parser.o(.text.parse_hdr_from) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[15a]">parse_hdr_max_forwards</a> from sip_parser.o(.text.parse_hdr_max_forwards) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[15b]">parse_hdr_min_expires</a> from sip_parser.o(.text.parse_hdr_min_expires) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[207]">parse_hdr_min_se</a> from sip_timer.o(.text.parse_hdr_min_se) referenced 2 times from sip_timer.o(.text.pjsip_timer_init_module)
 <LI><a href="#[1e8]">parse_hdr_proxy_authenticate</a> from sip_auth_parser.o(.text.parse_hdr_proxy_authenticate) referenced 2 times from sip_auth_parser.o(.text.pjsip_auth_init_parser)
 <LI><a href="#[1e6]">parse_hdr_proxy_authorization</a> from sip_auth_parser.o(.text.parse_hdr_proxy_authorization) referenced 2 times from sip_auth_parser.o(.text.pjsip_auth_init_parser)
 <LI><a href="#[1fd]">parse_hdr_replaces</a> from sip_replaces.o(.text.parse_hdr_replaces) referenced 2 times from sip_replaces.o(.text.pjsip_replaces_init_module)
 <LI><a href="#[15e]">parse_hdr_require</a> from sip_parser.o(.text.parse_hdr_require) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[15f]">parse_hdr_retry_after</a> from sip_parser.o(.text.parse_hdr_retry_after) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[15d]">parse_hdr_route</a> from sip_parser.o(.text.parse_hdr_route) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[15c]">parse_hdr_rr</a> from sip_parser.o(.text.parse_hdr_rr) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[206]">parse_hdr_se</a> from sip_timer.o(.text.parse_hdr_se) referenced 2 times from sip_timer.o(.text.pjsip_timer_init_module)
 <LI><a href="#[1f5]">parse_hdr_sub_state</a> from evsub_msg.o(.text.parse_hdr_sub_state) referenced 2 times from evsub_msg.o(.text.pjsip_evsub_init_parser)
 <LI><a href="#[160]">parse_hdr_supported</a> from sip_parser.o(.text.parse_hdr_supported) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[161]">parse_hdr_to</a> from sip_parser.o(.text.parse_hdr_to) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[162]">parse_hdr_unsupported</a> from sip_parser.o(.text.parse_hdr_unsupported) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[163]">parse_hdr_via</a> from sip_parser.o(.text.parse_hdr_via) referenced 2 times from sip_parser.o(.text.init_sip_parser)
 <LI><a href="#[1e7]">parse_hdr_www_authenticate</a> from sip_auth_parser.o(.text.parse_hdr_www_authenticate) referenced 2 times from sip_auth_parser.o(.text.pjsip_auth_init_parser)
 <LI><a href="#[14a]">pb_thread_func</a> from stm_dev.o(.text.pb_thread_func) referenced 2 times from stm_dev.o(.text.esp32_stream_start)
 <LI><a href="#[18e]">periodic_timer</a> from ice_session.o(.text.periodic_timer) referenced 2 times from ice_session.o(.text.pj_ice_sess_create_check_list)
 <LI><a href="#[65]">pj_log_write</a> from log_writer_stdout.o(.text.pj_log_write) referenced 2 times from log.o(.data.log_writer)
 <LI><a href="#[7a]">pj_mutex_destroy</a> from os_core_unix.o(.text.pj_mutex_destroy) referenced 2 times from lock.o(.data.mutex_lock_template)
 <LI><a href="#[77]">pj_mutex_lock</a> from os_core_unix.o(.text.pj_mutex_lock) referenced 2 times from lock.o(.data.mutex_lock_template)
 <LI><a href="#[78]">pj_mutex_trylock</a> from os_core_unix.o(.text.pj_mutex_trylock) referenced 2 times from lock.o(.data.mutex_lock_template)
 <LI><a href="#[79]">pj_mutex_unlock</a> from os_core_unix.o(.text.pj_mutex_unlock) referenced 2 times from lock.o(.data.mutex_lock_template)
 <LI><a href="#[1bd]">pjlib_util_strerror</a> from errno_1.o(.text.pjlib_util_strerror) referenced 2 times from errno_1.o(.text.pjlib_util_init)
 <LI><a href="#[1be]">pjmedia_audiodev_strerror</a> from errno_3.o(.text.pjmedia_audiodev_strerror) referenced 2 times from audiodev_1.o(.text.pjmedia_aud_subsys_init)
 <LI><a href="#[53]">pjmedia_codec_g711_deinit</a> from g711.o(.text.pjmedia_codec_g711_deinit) referenced 2 times from g711.o(.data.g711_factory_op)
 <LI><a href="#[1bf]">pjmedia_esp32_audio_factory</a> from stm_dev.o(.text.pjmedia_esp32_audio_factory) referenced 2 times from audiodev_1.o(.text.pjmedia_aud_subsys_init)
 <LI><a href="#[1c4]">pjmedia_strerror</a> from errno_2.o(.text.pjmedia_strerror) referenced 2 times from endpoint.o(.text.pjmedia_endpt_create2)
 <LI><a href="#[1e2]">pjnath_strerror</a> from errno_4.o(.text.pjnath_strerror) referenced 2 times from errno_4.o(.text.pjnath_init)
 <LI><a href="#[1e3]">pjnath_strerror2</a> from errno_4.o(.text.pjnath_strerror2) referenced 2 times from errno_4.o(.text.pjnath_init)
 <LI><a href="#[29]">pjsip_authorization_hdr_clone</a> from sip_auth_msg.o(.text.pjsip_authorization_hdr_clone) referenced 2 times from sip_auth_msg.o(.data.authorization_hdr_vptr)
 <LI><a href="#[2b]">pjsip_authorization_hdr_print</a> from sip_auth_msg.o(.text.pjsip_authorization_hdr_print) referenced 2 times from sip_auth_msg.o(.data.authorization_hdr_vptr)
 <LI><a href="#[2a]">pjsip_authorization_hdr_shallow_clone</a> from sip_auth_msg.o(.text.pjsip_authorization_hdr_shallow_clone) referenced 2 times from sip_auth_msg.o(.data.authorization_hdr_vptr)
 <LI><a href="#[2c]">pjsip_clen_hdr_clone</a> from sip_msg.o(.text.pjsip_clen_hdr_clone) referenced 4 times from sip_msg.o(.data.clen_hdr_vptr)
 <LI><a href="#[2d]">pjsip_clen_hdr_print</a> from sip_msg.o(.text.pjsip_clen_hdr_print) referenced 2 times from sip_msg.o(.data.clen_hdr_vptr)
 <LI><a href="#[164]">pjsip_clone_text_data</a> from sip_msg.o(.text.pjsip_clone_text_data) referenced 2 times from sip_parser.o(.text.int_parse_msg)
 <LI><a href="#[164]">pjsip_clone_text_data</a> from sip_msg.o(.text.pjsip_clone_text_data) referenced 2 times from sip_msg.o(.text.pjsip_msg_body_create)
 <LI><a href="#[164]">pjsip_clone_text_data</a> from sip_msg.o(.text.pjsip_clone_text_data) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_parse)
 <LI><a href="#[164]">pjsip_clone_text_data</a> from sip_msg.o(.text.pjsip_clone_text_data) referenced 2 times from mwi.o(.text.pjsip_mwi_current_notify)
 <LI><a href="#[164]">pjsip_clone_text_data</a> from sip_msg.o(.text.pjsip_clone_text_data) referenced 2 times from sip_xfer.o(.text.pjsip_xfer_notify)
 <LI><a href="#[2e]">pjsip_contact_hdr_clone</a> from sip_msg.o(.text.pjsip_contact_hdr_clone) referenced 2 times from sip_msg.o(.data.contact_hdr_vptr)
 <LI><a href="#[30]">pjsip_contact_hdr_print</a> from sip_msg.o(.text.pjsip_contact_hdr_print) referenced 2 times from sip_msg.o(.data.contact_hdr_vptr)
 <LI><a href="#[2f]">pjsip_contact_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_contact_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.contact_hdr_vptr)
 <LI><a href="#[31]">pjsip_cseq_hdr_clone</a> from sip_msg.o(.text.pjsip_cseq_hdr_clone) referenced 2 times from sip_msg.o(.data.cseq_hdr_vptr)
 <LI><a href="#[33]">pjsip_cseq_hdr_print</a> from sip_msg.o(.text.pjsip_cseq_hdr_print) referenced 2 times from sip_msg.o(.data.cseq_hdr_vptr)
 <LI><a href="#[32]">pjsip_cseq_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_cseq_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.cseq_hdr_vptr)
 <LI><a href="#[34]">pjsip_ctype_hdr_clone</a> from sip_msg.o(.text.pjsip_ctype_hdr_clone) referenced 4 times from sip_msg.o(.data.ctype_hdr_vptr)
 <LI><a href="#[35]">pjsip_ctype_hdr_print</a> from sip_msg.o(.text.pjsip_ctype_hdr_print) referenced 2 times from sip_msg.o(.data.ctype_hdr_vptr)
 <LI><a href="#[48]">pjsip_event_hdr_clone</a> from evsub_msg.o(.text.pjsip_event_hdr_clone) referenced 2 times from evsub_msg.o(.data.event_hdr_vptr)
 <LI><a href="#[4a]">pjsip_event_hdr_print</a> from evsub_msg.o(.text.pjsip_event_hdr_print) referenced 2 times from evsub_msg.o(.data.event_hdr_vptr)
 <LI><a href="#[49]">pjsip_event_hdr_shallow_clone</a> from evsub_msg.o(.text.pjsip_event_hdr_shallow_clone) referenced 2 times from evsub_msg.o(.data.event_hdr_vptr)
 <LI><a href="#[4b]">pjsip_fromto_hdr_clone</a> from sip_msg.o(.text.pjsip_fromto_hdr_clone) referenced 2 times from sip_msg.o(.data.fromto_hdr_vptr)
 <LI><a href="#[4d]">pjsip_fromto_hdr_print</a> from sip_msg.o(.text.pjsip_fromto_hdr_print) referenced 2 times from sip_msg.o(.data.fromto_hdr_vptr)
 <LI><a href="#[4c]">pjsip_fromto_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_fromto_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.fromto_hdr_vptr)
 <LI><a href="#[5c]">pjsip_generic_array_hdr_clone</a> from sip_msg.o(.text.pjsip_generic_array_hdr_clone) referenced 2 times from sip_msg.o(.data.generic_array_hdr_vptr)
 <LI><a href="#[5e]">pjsip_generic_array_hdr_print</a> from sip_msg.o(.text.pjsip_generic_array_hdr_print) referenced 2 times from sip_msg.o(.data.generic_array_hdr_vptr)
 <LI><a href="#[5d]">pjsip_generic_array_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_generic_array_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.generic_array_hdr_vptr)
 <LI><a href="#[62]">pjsip_generic_int_hdr_clone</a> from sip_msg.o(.text.pjsip_generic_int_hdr_clone) referenced 2 times from sip_msg.o(.data.generic_int_hdr_vptr)
 <LI><a href="#[64]">pjsip_generic_int_hdr_print</a> from sip_msg.o(.text.pjsip_generic_int_hdr_print) referenced 2 times from sip_msg.o(.data.generic_int_hdr_vptr)
 <LI><a href="#[63]">pjsip_generic_int_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_generic_int_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.generic_int_hdr_vptr)
 <LI><a href="#[5f]">pjsip_generic_string_hdr_clone</a> from sip_msg.o(.text.pjsip_generic_string_hdr_clone) referenced 2 times from sip_msg.o(.data.generic_hdr_vptr)
 <LI><a href="#[61]">pjsip_generic_string_hdr_print</a> from sip_msg.o(.text.pjsip_generic_string_hdr_print) referenced 2 times from sip_msg.o(.data.generic_hdr_vptr)
 <LI><a href="#[60]">pjsip_generic_string_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_generic_string_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.generic_hdr_vptr)
 <LI><a href="#[c]">pjsip_get_uri</a> from sip_uri.o(.text.pjsip_get_uri) referenced 4 times from sip_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[81]">pjsip_name_addr_clone</a> from sip_uri.o(.text.pjsip_name_addr_clone) referenced 2 times from sip_uri.o(.data.name_addr_vptr)
 <LI><a href="#[80]">pjsip_name_addr_compare</a> from sip_uri.o(.text.pjsip_name_addr_compare) referenced 2 times from sip_uri.o(.data.name_addr_vptr)
 <LI><a href="#[7d]">pjsip_name_addr_get_scheme</a> from sip_uri.o(.text.pjsip_name_addr_get_scheme) referenced 2 times from sip_uri.o(.data.name_addr_vptr)
 <LI><a href="#[7e]">pjsip_name_addr_get_uri</a> from sip_uri.o(.text.pjsip_name_addr_get_uri) referenced 2 times from sip_uri.o(.data.name_addr_vptr)
 <LI><a href="#[7f]">pjsip_name_addr_print</a> from sip_uri.o(.text.pjsip_name_addr_print) referenced 2 times from sip_uri.o(.data.name_addr_vptr)
 <LI><a href="#[14f]">pjsip_print_text_body</a> from sip_msg.o(.text.pjsip_print_text_body) referenced 2 times from sip_util.o(.text.init_request_throw)
 <LI><a href="#[14f]">pjsip_print_text_body</a> from sip_msg.o(.text.pjsip_print_text_body) referenced 2 times from sip_parser.o(.text.int_parse_msg)
 <LI><a href="#[14f]">pjsip_print_text_body</a> from sip_msg.o(.text.pjsip_print_text_body) referenced 2 times from sip_msg.o(.text.pjsip_msg_body_create)
 <LI><a href="#[14f]">pjsip_print_text_body</a> from sip_msg.o(.text.pjsip_print_text_body) referenced 2 times from sip_multipart.o(.text.pjsip_multipart_parse)
 <LI><a href="#[14f]">pjsip_print_text_body</a> from sip_msg.o(.text.pjsip_print_text_body) referenced 2 times from mwi.o(.text.pjsip_mwi_current_notify)
 <LI><a href="#[14f]">pjsip_print_text_body</a> from sip_msg.o(.text.pjsip_print_text_body) referenced 2 times from sip_xfer.o(.text.pjsip_xfer_notify)
 <LI><a href="#[1fe]">pjsip_replaces_deinit_module</a> from sip_replaces.o(.text.pjsip_replaces_deinit_module) referenced 2 times from sip_replaces.o(.text.pjsip_replaces_init_module)
 <LI><a href="#[95]">pjsip_retry_after_hdr_clone</a> from sip_msg.o(.text.pjsip_retry_after_hdr_clone) referenced 2 times from sip_msg.o(.data.retry_after_hdr_vptr)
 <LI><a href="#[97]">pjsip_retry_after_hdr_print</a> from sip_msg.o(.text.pjsip_retry_after_hdr_print) referenced 2 times from sip_msg.o(.data.retry_after_hdr_vptr)
 <LI><a href="#[96]">pjsip_retry_after_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_retry_after_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.retry_after_hdr_vptr)
 <LI><a href="#[98]">pjsip_routing_hdr_clone</a> from sip_msg.o(.text.pjsip_routing_hdr_clone) referenced 2 times from sip_msg.o(.data.routing_hdr_vptr)
 <LI><a href="#[9a]">pjsip_routing_hdr_print</a> from sip_msg.o(.text.pjsip_routing_hdr_print) referenced 2 times from sip_msg.o(.data.routing_hdr_vptr)
 <LI><a href="#[99]">pjsip_routing_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_routing_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.routing_hdr_vptr)
 <LI><a href="#[1ea]">pjsip_strerror</a> from sip_errno.o(.text.pjsip_strerror) referenced 2 times from sip_endpoint.o(.text.pjsip_endpt_create)
 <LI><a href="#[9b]">pjsip_sub_state_hdr_clone</a> from evsub_msg.o(.text.pjsip_sub_state_hdr_clone) referenced 2 times from evsub_msg.o(.data.sub_state_hdr_vptr)
 <LI><a href="#[9d]">pjsip_sub_state_hdr_print</a> from evsub_msg.o(.text.pjsip_sub_state_hdr_print) referenced 2 times from evsub_msg.o(.data.sub_state_hdr_vptr)
 <LI><a href="#[9c]">pjsip_sub_state_hdr_shallow_clone</a> from evsub_msg.o(.text.pjsip_sub_state_hdr_shallow_clone) referenced 2 times from evsub_msg.o(.data.sub_state_hdr_vptr)
 <LI><a href="#[208]">pjsip_timer_deinit_module</a> from sip_timer.o(.text.pjsip_timer_deinit_module) referenced 2 times from sip_timer.o(.text.pjsip_timer_init_module)
 <LI><a href="#[f]">pjsip_url_clone</a> from sip_uri.o(.text.pjsip_url_clone) referenced 4 times from sip_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[e]">pjsip_url_compare</a> from sip_uri.o(.text.pjsip_url_compare) referenced 4 times from sip_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[10]">pjsip_url_get_scheme</a> from sip_uri.o(.text.pjsip_url_get_scheme) referenced 2 times from sip_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[d]">pjsip_url_print</a> from sip_uri.o(.text.pjsip_url_print) referenced 4 times from sip_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[c8]">pjsip_via_hdr_clone</a> from sip_msg.o(.text.pjsip_via_hdr_clone) referenced 2 times from sip_msg.o(.data.via_hdr_vptr)
 <LI><a href="#[ca]">pjsip_via_hdr_print</a> from sip_msg.o(.text.pjsip_via_hdr_print) referenced 2 times from sip_msg.o(.data.via_hdr_vptr)
 <LI><a href="#[c9]">pjsip_via_hdr_shallow_clone</a> from sip_msg.o(.text.pjsip_via_hdr_shallow_clone) referenced 2 times from sip_msg.o(.data.via_hdr_vptr)
 <LI><a href="#[cb]">pjsip_www_authenticate_hdr_clone</a> from sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_clone) referenced 2 times from sip_auth_msg.o(.data.www_authenticate_hdr_vptr)
 <LI><a href="#[cd]">pjsip_www_authenticate_hdr_print</a> from sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_print) referenced 2 times from sip_auth_msg.o(.data.www_authenticate_hdr_vptr)
 <LI><a href="#[cc]">pjsip_www_authenticate_hdr_shallow_clone</a> from sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_shallow_clone) referenced 2 times from sip_auth_msg.o(.data.www_authenticate_hdr_vptr)
 <LI><a href="#[b]">pjsips_url_get_scheme</a> from sip_uri.o(.text.pjsips_url_get_scheme) referenced 2 times from sip_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[1f3]">pjsipsimple_strerror</a> from errno_5.o(.text.pjsipsimple_strerror) referenced 2 times from evsub.o(.text.pjsip_evsub_init_module)
 <LI><a href="#[21d]">pjsua_call_on_create_offer</a> from pjsua_call.o(.text.pjsua_call_on_create_offer) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[21a]">pjsua_call_on_forked</a> from pjsua_call.o(.text.pjsua_call_on_forked) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[21b]">pjsua_call_on_media_update</a> from pjsua_call.o(.text.pjsua_call_on_media_update) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[21f]">pjsua_call_on_redirected</a> from pjsua_call.o(.text.pjsua_call_on_redirected) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[21c]">pjsua_call_on_rx_offer</a> from pjsua_call.o(.text.pjsua_call_on_rx_offer) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[220]">pjsua_call_on_rx_reinvite</a> from pjsua_call.o(.text.pjsua_call_on_rx_reinvite) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[219]">pjsua_call_on_state_changed</a> from pjsua_call.o(.text.pjsua_call_on_state_changed) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[21e]">pjsua_call_on_tsx_state_changed</a> from pjsua_call.o(.text.pjsua_call_on_tsx_state_changed) referenced 2 times from pjsua_call.o(.text.pjsua_call_subsys_init)
 <LI><a href="#[242]">pjsua_evsub_on_rx_notify</a> from pjsua_pres.o(.text.pjsua_evsub_on_rx_notify) referenced 2 times from pjsua_pres.o(.text.subscribe_buddy_presence)
 <LI><a href="#[240]">pjsua_evsub_on_state</a> from pjsua_pres.o(.text.pjsua_evsub_on_state) referenced 2 times from pjsua_pres.o(.text.subscribe_buddy_presence)
 <LI><a href="#[241]">pjsua_evsub_on_tsx_state</a> from pjsua_pres.o(.text.pjsua_evsub_on_tsx_state) referenced 2 times from pjsua_pres.o(.text.subscribe_buddy_presence)
 <LI><a href="#[1d7]">play_cb</a> from sound_port.o(.text.play_cb) referenced 2 times from sound_port.o(.text.pjmedia_snd_port_create2)
 <LI><a href="#[1d8]">play_cb_ext</a> from sound_port.o(.text.play_cb_ext) referenced 2 times from sound_port.o(.text.pjmedia_snd_port_create2)
 <LI><a href="#[8f]">plc_wsola_create</a> from plc_common.o(.text.plc_wsola_create) referenced 2 times from plc_common.o(.data.plc_wsola)
 <LI><a href="#[91]">plc_wsola_generate</a> from plc_common.o(.text.plc_wsola_generate) referenced 2 times from plc_common.o(.data.plc_wsola)
 <LI><a href="#[90]">plc_wsola_save</a> from plc_common.o(.text.plc_wsola_save) referenced 2 times from plc_common.o(.data.plc_wsola)
 <LI><a href="#[22c]">pool_buf_cleanup</a> from pool_buf.o(.text.pool_buf_cleanup) referenced 2 times from pool_buf.o(.text.pool_buf_initialize)
 <LI><a href="#[1eb]">pool_callback</a> from sip_endpoint.o(.text.pool_callback) referenced 2 times from sip_endpoint.o(.text.pjsip_endpt_create)
 <LI><a href="#[1eb]">pool_callback</a> from sip_endpoint.o(.text.pool_callback) referenced 2 times from sip_endpoint.o(.text.pjsip_endpt_create_pool)
 <LI><a href="#[22e]">pres_evsub_on_srv_state</a> from pjsua_pres.o(.text.pres_evsub_on_srv_state) referenced 2 times from pjsua_pres.o(.text.pres_on_rx_request)
 <LI><a href="#[1b]">pres_on_evsub_client_refresh</a> from presence.o(.text.pres_on_evsub_client_refresh) referenced 2 times from presence.o(.data..L_MergedGlobals)
 <LI><a href="#[1a]">pres_on_evsub_rx_notify</a> from presence.o(.text.pres_on_evsub_rx_notify) referenced 2 times from presence.o(.data..L_MergedGlobals)
 <LI><a href="#[19]">pres_on_evsub_rx_refresh</a> from presence.o(.text.pres_on_evsub_rx_refresh) referenced 2 times from presence.o(.data..L_MergedGlobals)
 <LI><a href="#[1c]">pres_on_evsub_server_timeout</a> from presence.o(.text.pres_on_evsub_server_timeout) referenced 2 times from presence.o(.data..L_MergedGlobals)
 <LI><a href="#[17]">pres_on_evsub_state</a> from presence.o(.text.pres_on_evsub_state) referenced 2 times from presence.o(.data..L_MergedGlobals)
 <LI><a href="#[18]">pres_on_evsub_tsx_state</a> from presence.o(.text.pres_on_evsub_tsx_state) referenced 2 times from presence.o(.data..L_MergedGlobals)
 <LI><a href="#[70]">pres_on_rx_request</a> from pjsua_pres.o(.text.pres_on_rx_request) referenced 2 times from pjsua_pres.o(.data.mod_pjsua_pres)
 <LI><a href="#[1f9]">pres_print_body</a> from presence_body.o(.text.pres_print_body) referenced 2 times from presence_body.o(.text.pjsip_pres_create_pidf)
 <LI><a href="#[1f9]">pres_print_body</a> from presence_body.o(.text.pres_print_body) referenced 2 times from presence_body.o(.text.pjsip_pres_create_xpidf)
 <LI><a href="#[228]">pres_timer_cb</a> from pjsua_pres.o(.text.pres_timer_cb) referenced 2 times from pjsua_pres.o(.text.pjsua_pres_start)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.create_sdp_body)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.inv_handle_incoming_reliable_response)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.pjsip_create_sdp_body)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 4 times from sip_inv.o(.text.pjsip_get_sdp_info)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.pjsip_inv_create_ack)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.pjsip_inv_invite)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.pjsip_inv_update)
 <LI><a href="#[147]">print_sdp</a> from sip_inv.o(.text.print_sdp) referenced 2 times from sip_inv.o(.text.process_answer)
 <LI><a href="#[267]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[22f]">prvRunThread</a> from freertos_posix_pthread.o(.text.prvRunThread) referenced 2 times from freertos_posix_pthread.o(.text.pthread_create)
 <LI><a href="#[230]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[268]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[250]">pubc_refresh_timer_cb</a> from publishc.o(.text.pubc_refresh_timer_cb) referenced 2 times from publishc.o(.text.tsx_callback)
 <LI><a href="#[227]">publish_cb</a> from pjsua_pres.o(.text.publish_cb) referenced 2 times from pjsua_pres.o(.text.pjsua_pres_init_publish_acc)
 <LI><a href="#[1c2]">put_frame</a> from conference.o(.text.put_frame) referenced 2 times from conference.o(.text.pjmedia_conf_create)
 <LI><a href="#[1db]">put_frame</a> from stream.o(.text.put_frame) referenced 2 times from stream.o(.text.pjmedia_stream_create)
 <LI><a href="#[1d5]">rec_cb</a> from sound_port.o(.text.rec_cb) referenced 2 times from sound_port.o(.text.pjmedia_snd_port_create2)
 <LI><a href="#[1d6]">rec_cb_ext</a> from sound_port.o(.text.rec_cb_ext) referenced 2 times from sound_port.o(.text.pjmedia_snd_port_create2)
 <LI><a href="#[20e]">regc_cb</a> from pjsua_acc.o(.text.regc_cb) referenced 2 times from pjsua_acc.o(.text.pjsua_acc_set_registration)
 <LI><a href="#[238]">regc_refresh_timer_cb</a> from sip_reg.o(.text.regc_refresh_timer_cb) referenced 2 times from sip_reg.o(.text.schedule_registration)
 <LI><a href="#[1fc]">regc_tsx_callback</a> from sip_reg.o(.text.regc_tsx_callback) referenced 2 times from sip_reg.o(.text.pjsip_regc_send)
 <LI><a href="#[20f]">regc_tsx_cb</a> from pjsua_acc.o(.text.regc_tsx_cb) referenced 2 times from pjsua_acc.o(.text.pjsua_acc_set_registration)
 <LI><a href="#[235]">reinv_timer_cb</a> from pjsua_call.o(.text.reinv_timer_cb) referenced 2 times from pjsua_call.o(.text.reset_call)
 <LI><a href="#[92]">replaces_hdr_clone</a> from sip_replaces.o(.text.replaces_hdr_clone) referenced 2 times from sip_replaces.o(.data.replaces_hdr_vptr)
 <LI><a href="#[94]">replaces_hdr_print</a> from sip_replaces.o(.text.replaces_hdr_print) referenced 2 times from sip_replaces.o(.data.replaces_hdr_vptr)
 <LI><a href="#[93]">replaces_hdr_shallow_clone</a> from sip_replaces.o(.text.replaces_hdr_shallow_clone) referenced 2 times from sip_replaces.o(.data.replaces_hdr_vptr)
 <LI><a href="#[1d3]">resample_destroy</a> from resample_port.o(.text.resample_destroy) referenced 2 times from resample_port.o(.text.pjmedia_resample_port_create)
 <LI><a href="#[1d1]">resample_get_frame</a> from resample_port.o(.text.resample_get_frame) referenced 2 times from resample_port.o(.text.pjmedia_resample_port_create)
 <LI><a href="#[1d2]">resample_put_frame</a> from resample_port.o(.text.resample_put_frame) referenced 2 times from resample_port.o(.text.pjmedia_resample_port_create)
 <LI><a href="#[19a]">retransmit_timer_callback</a> from stun_transaction.o(.text.retransmit_timer_callback) referenced 2 times from stun_transaction.o(.text.pj_stun_client_tsx_create)
 <LI><a href="#[13b]">saiRxDMA_ConvCplt</a> from audio.o(.text.saiRxDMA_ConvCplt) referenced 2 times from bsp_sai.o(.text.SAIA_RX_DMA_Init)
 <LI><a href="#[13a]">saiRxDMA_M1ConvCplt</a> from audio.o(.text.saiRxDMA_M1ConvCplt) referenced 2 times from bsp_sai.o(.text.SAIA_RX_DMA_Init)
 <LI><a href="#[13c]">saiTxDMA_ConvCplt</a> from audio.o(.text.saiTxDMA_ConvCplt) referenced 2 times from bsp_sai.o(.text.SAIA_TX_DMA_Init)
 <LI><a href="#[13d]">saiTxDMA_M1ConvCplt</a> from audio.o(.text.saiTxDMA_M1ConvCplt) referenced 2 times from bsp_sai.o(.text.SAIA_TX_DMA_Init)
 <LI><a href="#[1d]">se_hdr_clone</a> from sip_timer.o(.text.se_hdr_clone) referenced 2 times from sip_timer.o(.data..L_MergedGlobals)
 <LI><a href="#[1f]">se_hdr_print</a> from sip_timer.o(.text.se_hdr_print) referenced 2 times from sip_timer.o(.data..L_MergedGlobals)
 <LI><a href="#[1e]">se_hdr_shallow_clone</a> from sip_timer.o(.text.se_hdr_shallow_clone) referenced 2 times from sip_timer.o(.data..L_MergedGlobals)
 <LI><a href="#[1e9]">send_ack_callback</a> from sip_dialog.o(.text.send_ack_callback) referenced 2 times from sip_dialog.o(.text.pjsip_dlg_send_request)
 <LI><a href="#[254]">send_msg_callback</a> from sip_transaction.o(.text.send_msg_callback) referenced 4 times from sip_transaction.o(.text.tsx_send_msg)
 <LI><a href="#[20a]">send_raw_callback</a> from sip_transport.o(.text.send_raw_callback) referenced 2 times from sip_transport.o(.text.pjsip_tpmgr_send_raw)
 <LI><a href="#[1f1]">send_response_resolver_cb</a> from sip_util.o(.text.send_response_resolver_cb) referenced 2 times from sip_util.o(.text.pjsip_endpt_send_response)
 <LI><a href="#[1f0]">send_response_transport_cb</a> from sip_util.o(.text.send_response_transport_cb) referenced 2 times from sip_util.o(.text.pjsip_endpt_send_response)
 <LI><a href="#[1f0]">send_response_transport_cb</a> from sip_util.o(.text.send_response_transport_cb) referenced 2 times from sip_util.o(.text.send_response_resolver_cb)
 <LI><a href="#[19c]">sess_on_destroy</a> from nat_detect.o(.text.sess_on_destroy) referenced 2 times from nat_detect.o(.text.pj_stun_detect_nat_type2)
 <LI><a href="#[1a7]">sess_on_request_complete</a> from stun_sock.o(.text.sess_on_request_complete) referenced 2 times from stun_sock.o(.text.pj_stun_sock_create)
 <LI><a href="#[1a8]">sess_on_send_msg</a> from stun_sock.o(.text.sess_on_send_msg) referenced 2 times from stun_sock.o(.text.pj_stun_sock_create)
 <LI><a href="#[266]">simple_pjsua</a> from task_main.o(.text.simple_pjsua) referenced 2 times from task_main.o(.text.userAppEntry)
 <LI><a href="#[1ff]">srv_resolver_cb</a> from sip_resolve.o(.text.srv_resolver_cb) referenced 2 times from sip_resolve.o(.text.pjsip_resolve)
 <LI><a href="#[22d]">stack_alloc</a> from pool_buf.o(.text.stack_alloc) referenced 2 times from pool_buf.o(.text.pool_buf_initialize)
 <LI><a href="#[1ef]">stateless_send_resolver_callback</a> from sip_util.o(.text.stateless_send_resolver_callback) referenced 2 times from sip_util.o(.text.pjsip_endpt_send_request_stateless)
 <LI><a href="#[23e]">stateless_send_transport_cb</a> from sip_util.o(.text.stateless_send_transport_cb) referenced 2 times from sip_util.o(.text.stateless_send_transport_cb)
 <LI><a href="#[297]">stm32f4xxEthDisableIrq</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthDisableIrq) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[296]">stm32f4xxEthEnableIrq</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthEnableIrq) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[298]">stm32f4xxEthEventHandler</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthEventHandler) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[294]">stm32f4xxEthInit</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthInit) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[29d]">stm32f4xxEthReadPhyReg</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthReadPhyReg) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[299]">stm32f4xxEthSendPacket</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthSendPacket) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[295]">stm32f4xxEthTick</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthTick) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[29a]">stm32f4xxEthUpdateMacAddrFilter</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthUpdateMacAddrFilter) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[29b]">stm32f4xxEthUpdateMacConfig</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthUpdateMacConfig) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[29c]">stm32f4xxEthWritePhyReg</a> from stm32f4xx_eth_driver.o(.text.stm32f4xxEthWritePhyReg) referenced from stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
 <LI><a href="#[1dc]">stream_event_cb</a> from stream.o(.text.stream_event_cb) referenced 2 times from stream.o(.text.pjmedia_stream_create)
 <LI><a href="#[1dc]">stream_event_cb</a> from stream.o(.text.stream_event_cb) referenced 2 times from stream.o(.text.pjmedia_stream_destroy)
 <LI><a href="#[18b]">stun_auth_get_auth</a> from ice_session.o(.text.stun_auth_get_auth) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[18c]">stun_auth_get_cred</a> from ice_session.o(.text.stun_auth_get_cred) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[18d]">stun_auth_get_password</a> from ice_session.o(.text.stun_auth_get_password) referenced 2 times from ice_session.o(.text.pj_ice_sess_create)
 <LI><a href="#[193]">stun_on_data_sent</a> from ice_strans.o(.text.stun_on_data_sent) referenced 2 times from ice_strans.o(.text.pj_ice_strans_create)
 <LI><a href="#[1af]">stun_on_request_complete</a> from turn_session.o(.text.stun_on_request_complete) referenced 2 times from turn_session.o(.text.pj_turn_session_create)
 <LI><a href="#[191]">stun_on_rx_data</a> from ice_strans.o(.text.stun_on_rx_data) referenced 2 times from ice_strans.o(.text.pj_ice_strans_create)
 <LI><a href="#[1b0]">stun_on_rx_indication</a> from turn_session.o(.text.stun_on_rx_indication) referenced 2 times from turn_session.o(.text.pj_turn_session_create)
 <LI><a href="#[1ae]">stun_on_send_msg</a> from turn_session.o(.text.stun_on_send_msg) referenced 2 times from turn_session.o(.text.pj_turn_session_create)
 <LI><a href="#[192]">stun_on_status</a> from ice_strans.o(.text.stun_on_status) referenced 2 times from ice_strans.o(.text.pj_ice_strans_create)
 <LI><a href="#[1a1]">stun_sess_on_destroy</a> from stun_session.o(.text.stun_sess_on_destroy) referenced 2 times from stun_session.o(.text.pj_stun_session_create)
 <LI><a href="#[1a4]">stun_sock_destructor</a> from stun_sock.o(.text.stun_sock_destructor) referenced 2 times from stun_sock.o(.text.pj_stun_sock_create)
 <LI><a href="#[c5]">stun_tsx_on_complete</a> from stun_session.o(.text.stun_tsx_on_complete) referenced 2 times from stun_session.o(.data.tsx_cb)
 <LI><a href="#[c7]">stun_tsx_on_destroy</a> from stun_session.o(.text.stun_tsx_on_destroy) referenced 2 times from stun_session.o(.data.tsx_cb)
 <LI><a href="#[c6]">stun_tsx_on_send_msg</a> from stun_session.o(.text.stun_tsx_on_send_msg) referenced 2 times from stun_session.o(.data.tsx_cb)
 <LI><a href="#[245]">tcp_destroy_transport</a> from sip_transport_tcp.o(.text.tcp_destroy_transport) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[24b]">tcp_initial_timer</a> from sip_transport_tcp.o(.text.tcp_initial_timer) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[24a]">tcp_keep_alive_timer</a> from sip_transport_tcp.o(.text.tcp_keep_alive_timer) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[246]">tcp_on_destroy</a> from sip_transport_tcp.o(.text.tcp_on_destroy) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[243]">tcp_send_msg</a> from sip_transport_tcp.o(.text.tcp_send_msg) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[244]">tcp_shutdown</a> from sip_transport_tcp.o(.text.tcp_shutdown) referenced 2 times from sip_transport_tcp.o(.text.tcp_create)
 <LI><a href="#[1a2]">tdata_on_destroy</a> from stun_session.o(.text.tdata_on_destroy) referenced 2 times from stun_session.o(.text.pj_stun_session_send_msg)
 <LI><a href="#[4]">tel_uri_clone</a> from sip_tel_uri.o(.text.tel_uri_clone) referenced 2 times from sip_tel_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[3]">tel_uri_cmp</a> from sip_tel_uri.o(.text.tel_uri_cmp) referenced 2 times from sip_tel_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[0]">tel_uri_get_scheme</a> from sip_tel_uri.o(.text.tel_uri_get_scheme) referenced 2 times from sip_tel_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[1]">tel_uri_get_uri</a> from sip_tel_uri.o(.text.tel_uri_get_uri) referenced 2 times from sip_tel_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[205]">tel_uri_parse</a> from sip_tel_uri.o(.text.tel_uri_parse) referenced 2 times from sip_tel_uri.o(.text.pjsip_tel_uri_subsys_init)
 <LI><a href="#[2]">tel_uri_print</a> from sip_tel_uri.o(.text.tel_uri_print) referenced 2 times from sip_tel_uri.o(.data..L_MergedGlobals)
 <LI><a href="#[168]">terminate_timer_cb</a> from evsub.o(.text.terminate_timer_cb) referenced 2 times from evsub.o(.text.mod_evsub_on_tsx_state)
 <LI><a href="#[236]">test_stun_on_status</a> from pjsua_core.o(.text.test_stun_on_status) referenced 2 times from pjsua_core.o(.text.resolve_stun_entry)
 <LI><a href="#[1ab]">thread_main</a> from os_core_unix.o(.text.thread_main) referenced 2 times from os_core_unix.o(.text.pj_thread_create)
 <LI><a href="#[1b3]">timer_cb</a> from turn_sock.o(.text.timer_cb) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[22a]">timer_cb</a> from pjsua_core.o(.text.timer_cb) referenced 2 times from pjsua_core.o(.text.pjsua_schedule_timer2_dbg)
 <LI><a href="#[23d]">timer_cb</a> from sip_timer.o(.text.timer_cb) referenced 4 times from sip_timer.o(.text.start_timer)
 <LI><a href="#[1ca]">tp_ice_on_destroy</a> from transport_ice.o(.text.tp_ice_on_destroy) referenced 2 times from transport_ice.o(.text.pjmedia_ice_create3)
 <LI><a href="#[209]">tp_state_callback</a> from sip_transport.o(.text.tp_state_callback) referenced 2 times from sip_transport.o(.text.pjsip_tpmgr_create)
 <LI><a href="#[9f]">transport_attach</a> from transport_ice.o(.text.transport_attach) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[ac]">transport_attach</a> from transport_loop.o(.text.transport_attach) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[aa]">transport_attach2</a> from transport_ice.o(.text.transport_attach2) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b7]">transport_attach2</a> from transport_loop.o(.text.transport_attach2) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[253]">transport_callback</a> from sip_transaction.o(.text.transport_callback) referenced 2 times from sip_transaction.o(.text.tsx_send_msg)
 <LI><a href="#[a9]">transport_destroy</a> from transport_ice.o(.text.transport_destroy) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b6]">transport_destroy</a> from transport_loop.o(.text.transport_destroy) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a0]">transport_detach</a> from transport_ice.o(.text.transport_detach) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[ad]">transport_detach</a> from transport_loop.o(.text.transport_detach) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a5]">transport_encode_sdp</a> from transport_ice.o(.text.transport_encode_sdp) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b2]">transport_encode_sdp</a> from transport_loop.o(.text.transport_encode_sdp) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[9e]">transport_get_info</a> from transport_ice.o(.text.transport_get_info) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[ab]">transport_get_info</a> from transport_loop.o(.text.transport_get_info) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[20b]">transport_idle_callback</a> from sip_transport.o(.text.transport_idle_callback) referenced 2 times from sip_transport.o(.text.pjsip_transport_register)
 <LI><a href="#[a4]">transport_media_create</a> from transport_ice.o(.text.transport_media_create) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b1]">transport_media_create</a> from transport_loop.o(.text.transport_media_create) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a6]">transport_media_start</a> from transport_ice.o(.text.transport_media_start) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b3]">transport_media_start</a> from transport_loop.o(.text.transport_media_start) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a7]">transport_media_stop</a> from transport_ice.o(.text.transport_media_stop) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b4]">transport_media_stop</a> from transport_loop.o(.text.transport_media_stop) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[20c]">transport_send_callback</a> from sip_transport.o(.text.transport_send_callback) referenced 2 times from sip_transport.o(.text.pjsip_transport_send)
 <LI><a href="#[a2]">transport_send_rtcp</a> from transport_ice.o(.text.transport_send_rtcp) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[af]">transport_send_rtcp</a> from transport_loop.o(.text.transport_send_rtcp) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a3]">transport_send_rtcp2</a> from transport_ice.o(.text.transport_send_rtcp2) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b0]">transport_send_rtcp2</a> from transport_loop.o(.text.transport_send_rtcp2) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a1]">transport_send_rtp</a> from transport_ice.o(.text.transport_send_rtp) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[ae]">transport_send_rtp</a> from transport_loop.o(.text.transport_send_rtp) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[a8]">transport_simulate_lost</a> from transport_ice.o(.text.transport_simulate_lost) referenced 2 times from transport_ice.o(.data.transport_ice_op)
 <LI><a href="#[b5]">transport_simulate_lost</a> from transport_loop.o(.text.transport_simulate_lost) referenced 4 times from transport_loop.o(.data.transport_udp_op)
 <LI><a href="#[223]">trickle_ice_retrans_18x</a> from pjsua_call.o(.text.trickle_ice_retrans_18x) referenced 2 times from pjsua_call.o(.text.pjsua_ice_check_start_trickling)
 <LI><a href="#[222]">trickle_ice_send_sip_info</a> from pjsua_call.o(.text.trickle_ice_send_sip_info) referenced 2 times from pjsua_call.o(.text.pjsua_ice_check_start_trickling)
 <LI><a href="#[222]">trickle_ice_send_sip_info</a> from pjsua_call.o(.text.trickle_ice_send_sip_info) referenced 2 times from pjsua_call.o(.text.reset_call)
 <LI><a href="#[1fb]">tsx_callback</a> from publishc.o(.text.tsx_callback) referenced 2 times from publishc.o(.text.pjsip_publishc_send)
 <LI><a href="#[170]">tsx_layer_destroy</a> from sip_transaction.o(.text.tsx_layer_destroy) referenced 2 times from sip_transaction.o(.text.mod_tsx_layer_unload)
 <LI><a href="#[252]">tsx_on_destroy</a> from sip_transaction.o(.text.tsx_on_destroy) referenced 4 times from sip_transaction.o(.text.tsx_create)
 <LI><a href="#[255]">tsx_on_state_calling</a> from sip_transaction.o(.text.tsx_on_state_calling) referenced from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[257]">tsx_on_state_completed_uac</a> from sip_transaction.o(.text.tsx_on_state_completed_uac) referenced from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[25d]">tsx_on_state_completed_uas</a> from sip_transaction.o(.text.tsx_on_state_completed_uas) referenced from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[258]">tsx_on_state_confirmed</a> from sip_transaction.o(.text.tsx_on_state_confirmed) referenced 2 times from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[25a]">tsx_on_state_destroyed</a> from sip_transaction.o(.text.tsx_on_state_destroyed) referenced 2 times from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[20d]">tsx_on_state_null</a> from sip_transaction.o(.text.tsx_on_state_null) referenced 2 times from sip_transaction.o(.text.pjsip_tsx_create_uac2)
 <LI><a href="#[20d]">tsx_on_state_null</a> from sip_transaction.o(.text.tsx_on_state_null) referenced 2 times from sip_transaction.o(.text.pjsip_tsx_create_uas2)
 <LI><a href="#[20d]">tsx_on_state_null</a> from sip_transaction.o(.text.tsx_on_state_null) referenced 2 times from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[256]">tsx_on_state_proceeding_uac</a> from sip_transaction.o(.text.tsx_on_state_proceeding_uac) referenced from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[25c]">tsx_on_state_proceeding_uas</a> from sip_transaction.o(.text.tsx_on_state_proceeding_uas) referenced from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[259]">tsx_on_state_terminated</a> from sip_transaction.o(.text.tsx_on_state_terminated) referenced 2 times from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[25b]">tsx_on_state_trying</a> from sip_transaction.o(.text.tsx_on_state_trying) referenced from sip_transaction.o(.text.tsx_set_state)
 <LI><a href="#[251]">tsx_timer_callback</a> from sip_transaction.o(.text.tsx_timer_callback) referenced 2 times from sip_transaction.o(.text.tsx_create)
 <LI><a href="#[25e]">tsx_tp_state_callback</a> from sip_transaction.o(.text.tsx_tp_state_callback) referenced 2 times from sip_transaction.o(.text.tsx_update_transport)
 <LI><a href="#[1b6]">turn_on_channel_bound</a> from turn_sock.o(.text.turn_on_channel_bound) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[1b9]">turn_on_connect_complete</a> from turn_sock.o(.text.turn_on_connect_complete) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[1ba]">turn_on_connection_attempt</a> from turn_sock.o(.text.turn_on_connection_attempt) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[1bb]">turn_on_connection_bind_status</a> from turn_sock.o(.text.turn_on_connection_bind_status) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[140]">turn_on_data_sent</a> from ice_strans.o(.text.turn_on_data_sent) referenced 2 times from ice_strans.o(.text.add_update_turn)
 <LI><a href="#[13f]">turn_on_rx_data</a> from ice_strans.o(.text.turn_on_rx_data) referenced 2 times from ice_strans.o(.text.add_update_turn)
 <LI><a href="#[1b7]">turn_on_rx_data</a> from turn_sock.o(.text.turn_on_rx_data) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[1b4]">turn_on_send_pkt</a> from turn_sock.o(.text.turn_on_send_pkt) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[141]">turn_on_state</a> from ice_strans.o(.text.turn_on_state) referenced 2 times from ice_strans.o(.text.add_update_turn)
 <LI><a href="#[1b8]">turn_on_state</a> from turn_sock.o(.text.turn_on_state) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[1b5]">turn_on_stun_send_pkt</a> from turn_sock.o(.text.turn_on_stun_send_pkt) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[1ac]">turn_sess_on_destroy</a> from turn_session.o(.text.turn_sess_on_destroy) referenced 2 times from turn_session.o(.text.pj_turn_session_create)
 <LI><a href="#[1b2]">turn_sock_on_destroy</a> from turn_sock.o(.text.turn_sock_on_destroy) referenced 2 times from turn_sock.o(.text.pj_turn_sock_create)
 <LI><a href="#[24f]">udp_destroy</a> from sip_transport_udp.o(.text.udp_destroy) referenced 2 times from sip_transport_udp.o(.text.transport_attach)
 <LI><a href="#[234]">udp_on_destroy</a> from sip_transport_udp.o(.text.udp_on_destroy) referenced 2 times from sip_transport_udp.o(.text.register_to_ioqueue)
 <LI><a href="#[232]">udp_on_read_complete</a> from sip_transport_udp.o(.text.udp_on_read_complete) referenced 2 times from sip_transport_udp.o(.text.register_to_ioqueue)
 <LI><a href="#[233]">udp_on_write_complete</a> from sip_transport_udp.o(.text.udp_on_write_complete) referenced 2 times from sip_transport_udp.o(.text.register_to_ioqueue)
 <LI><a href="#[24d]">udp_send_msg</a> from sip_transport_udp.o(.text.udp_send_msg) referenced 2 times from sip_transport_udp.o(.text.transport_attach)
 <LI><a href="#[24e]">udp_shutdown</a> from sip_transport_udp.o(.text.udp_shutdown) referenced 2 times from sip_transport_udp.o(.text.transport_attach)
 <LI><a href="#[8e]">unsolicited_mwi_on_rx_request</a> from pjsua_pres.o(.text.unsolicited_mwi_on_rx_request) referenced 2 times from pjsua_pres.o(.data.pjsua_unsolicited_mwi_mod)
 <LI><a href="#[13e]">userAppEntry</a> from task_main.o(.text.userAppEntry) referenced 2 times from task_main.o(.text.UserApplication_Entry)
 <LI><a href="#[1c5]">worker_proc</a> from endpoint.o(.text.worker_proc) referenced 2 times from endpoint.o(.text.pjmedia_endpt_create2)
 <LI><a href="#[225]">worker_thread</a> from pjsua_core.o(.text.worker_thread) referenced 2 times from pjsua_core.o(.text.pjsua_init)
 <LI><a href="#[27]">xfer_on_evsub_client_refresh</a> from sip_xfer.o(.text.xfer_on_evsub_client_refresh) referenced 2 times from sip_xfer.o(.data..L_MergedGlobals)
 <LI><a href="#[26]">xfer_on_evsub_rx_notify</a> from sip_xfer.o(.text.xfer_on_evsub_rx_notify) referenced 2 times from sip_xfer.o(.data..L_MergedGlobals)
 <LI><a href="#[25]">xfer_on_evsub_rx_refresh</a> from sip_xfer.o(.text.xfer_on_evsub_rx_refresh) referenced 2 times from sip_xfer.o(.data..L_MergedGlobals)
 <LI><a href="#[28]">xfer_on_evsub_server_timeout</a> from sip_xfer.o(.text.xfer_on_evsub_server_timeout) referenced 2 times from sip_xfer.o(.data..L_MergedGlobals)
 <LI><a href="#[23]">xfer_on_evsub_state</a> from sip_xfer.o(.text.xfer_on_evsub_state) referenced 2 times from sip_xfer.o(.data..L_MergedGlobals)
 <LI><a href="#[24]">xfer_on_evsub_tsx_state</a> from sip_xfer.o(.text.xfer_on_evsub_tsx_state) referenced 2 times from sip_xfer.o(.data..L_MergedGlobals)
 <LI><a href="#[173]">xfer_server_on_evsub_state</a> from pjsua_call.o(.text.xfer_server_on_evsub_state) referenced 2 times from pjsua_call.o(.text.on_call_transferred)
 <LI><a href="#[1fa]">xml_clone_data</a> from presence_body.o(.text.xml_clone_data) referenced 2 times from presence_body.o(.text.pjsip_pres_create_pidf)
 <LI><a href="#[1fa]">xml_clone_data</a> from presence_body.o(.text.xml_clone_data) referenced 2 times from presence_body.o(.text.pjsip_pres_create_xpidf)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[134]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[b6b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b6c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b6d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b6e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b6f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b70]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ce]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtp2
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_put_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_get_frame
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_get_frame
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_connect
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_SPF
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTILS_NanosecondsToTimespec
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_time
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_msec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_state
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_destroy
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[56d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isxdigit
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isdigit
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isspace
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isdigit
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str_unescape
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_fmtp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
</UL>

<P><STRONG><a name="[6f4]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
</UL>

<P><STRONG><a name="[2aa]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_tolower
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_nb_cmp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[85d]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
</UL>

<P><STRONG><a name="[886]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_srand
</UL>

<P><STRONG><a name="[2c3]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_peek_n
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioReadData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioWriteData
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_create
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_print
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_print_node
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_addr_response
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_final
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_update
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_update
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_make_query
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_rr
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_print
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_media_desc
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_info_dup
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_dup
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_bye
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_sdes
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_get_frame
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame3
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_put_at
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_rtpmap_to_attr
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_discard
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_save
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_copy
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_set_port0_name
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_set_codec_priority
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_param_clone
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_create2
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_def_cand
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_enum_cands
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_info
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_stat
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_alloc_param_copy
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_attr_clone
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_binary_attr
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_binary_attr_init
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sockaddr_attr_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_binary_attr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_unknown_attr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_errcode_attr
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_msgint_attr
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_msgint_attr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_string_attr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_sockaddr_attr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sockaddr_attr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_binary_attr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_msgint_attr
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_binary_attr
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_copy
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_get_param
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_get_dev_info
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_shallow_clone
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_print
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_shallow_clone
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_print
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_shallow_clone
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_print
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_shallow_clone
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_print
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_print
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_shallow_clone
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_print
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_shallow_clone
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clen_hdr_print
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_print
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_shallow_clone
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_clone
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_int_hdr_print
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_int_hdr_shallow_clone
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_int_hdr_clone
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_print
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_shallow_clone
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_print
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_shallow_clone
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_print
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_shallow_clone
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cred_info_dup
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_resolver_cb
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_uri_print
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_print
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_print
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_print_body
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clone_text_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_print_text_body
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_print
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_usage_init
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_get_status
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_shallow_clone
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_print
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_shallow_clone
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_stun_resolve_cb
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_dup
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_srtp_opt_dup
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_dup
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_config_dup
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_config_dup
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_print
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_shallow_clone
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_print
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_shallow_clone
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_print
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_shallow_clone
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[59d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_private_ip
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
</UL>

<P><STRONG><a name="[6c4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_revert
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
</UL>

<P><STRONG><a name="[441]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memmove
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_discard
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
</UL>

<P><STRONG><a name="[62a]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
</UL>

<P><STRONG><a name="[b71]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memset
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_print_node
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[acd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b72]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInterfaceInit
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_config_default
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_default
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_addr_response
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_buf_init
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_final
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_final
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_default
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_bye
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_sdes
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_get_frame
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_get_frame
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame3
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_reset
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_put_at
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_remove_head
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_default_attr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_reset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_create
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_stat_default
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_save
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_destroy
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_init
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsola_fade_out
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_param_default
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_turn_cfg_default
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stun_cfg_default
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_cfg_default
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_cfg_default
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ca_thread_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_default_param
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_clone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_clone
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_clone
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_clone
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_create
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_to_hdr_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_from_hdr_create
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_cleanup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_clone
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_cfg_default
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_fla2_param_default
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_create
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_create
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_init
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_session
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_deinit
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_dealloc_codec
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create_player
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_info
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_sip_parser
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_init_cb
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInit
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[2a8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[43f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_init_int
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_init
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[56a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_init_int
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[3be]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostname
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_strerror
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_error
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostname
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_sys_info
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_info
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_util_strerror
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_chr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sdp_attr_rtcp_fb
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_strerror
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_respond
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_strerror
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_audiodev_strerror
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_log_error
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_strerror
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockaddr_to_host_port
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_interface
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_node
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsipsimple_strerror
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[568]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[784]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strchr
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_line
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str_unescape
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_chr
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_auth_get_password
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[3e1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_handler
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_init_np
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
</UL>

<P><STRONG><a name="[4ef]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostname
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_log_error
</UL>

<P><STRONG><a name="[86b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_strcmp
</UL>

<P><STRONG><a name="[ac3]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_strerror
</UL>

<P><STRONG><a name="[2a9]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
</UL>

<P><STRONG><a name="[2ab]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stristr
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_SrcLinear
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_SrcLinear
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_GetXOFF
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_SrcLinear
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_GetXOFF
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[aec]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_GetXOFF
</UL>

<P><STRONG><a name="[377]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_SrcLinear
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_GetXOFF
</UL>

<P><STRONG><a name="[2b7]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_SrcLinear
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
</UL>

<P><STRONG><a name="[60f]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[8c1]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
</UL>

<P><STRONG><a name="[b73]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b6a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b74]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b75]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b76]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b77]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2ae]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[2b8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b67]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b78]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b79]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b7a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>HAL_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, systemtime.o(.text.$Sub$$HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; $Super$$HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bc]"></a>AudioInterfaceInit</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, audio.o(.text.AudioInterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AudioInterfaceInit &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
</UL>

<P><STRONG><a name="[2c1]"></a>AudioReadData</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, audio.o(.text.AudioReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AudioReadData &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ca_thread_func
</UL>

<P><STRONG><a name="[2c6]"></a>AudioWriteData</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, audio.o(.text.AudioWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AudioWriteData &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
</UL>

<P><STRONG><a name="[2c7]"></a>Audio_Config_FullDuplex</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, audio.o(.text.Audio_Config_FullDuplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Audio_Config_FullDuplex &rArr; SAIB_Init &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Rec_Start
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_RX_DMA_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIB_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_Init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioIF
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetMicGain
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetOUT2Volume
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetOUT1Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
</UL>

<P><STRONG><a name="[2d3]"></a>Audio_DMA_rx_callback</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, audio.o(.text.Audio_DMA_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Audio_DMA_rx_callback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiRxDMA_M1ConvCplt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiRxDMA_ConvCplt
</UL>

<P><STRONG><a name="[2d8]"></a>Audio_DMA_tx_callback</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, audio.o(.text.Audio_DMA_tx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Audio_DMA_tx_callback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiTxDMA_M1ConvCplt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiTxDMA_ConvCplt
</UL>

<P><STRONG><a name="[2d9]"></a>Audio_StreamStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, audio.o(.text.Audio_StreamStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Audio_StreamStop &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Rec_Stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Stop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_destroy
</UL>

<P><STRONG><a name="[320]"></a>BSP_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>

<P><STRONG><a name="[2dd]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_GetCardInfo &rArr; HAL_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[2df]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[2e1]"></a>BSP_SD_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSDcardInit
</UL>

<P><STRONG><a name="[2e2]"></a>BSP_SD_MspInit</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[2ea]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2ec]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sd_diskio_dma_rtos.o(.text.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[2ed]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm324x9i_eval_sd.o(.text.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[2ef]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sd_diskio_dma_rtos.o(.text.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[e6]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_i2s.o(.text.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_i2s.o(.text.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sai.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sai.o(.text.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>ETH_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_eth_driver.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_IRQHandler &rArr; osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f2]"></a>Error_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systemcommon.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Error_Handler &rArr; puts &rArr; fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCompont_Config
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2d4]"></a>EventRecord2</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
</UL>

<P><STRONG><a name="[2f6]"></a>EventRecordData</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, eventrecorder.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2f7]"></a>EventRecorderInitialize</STRONG> (Thumb, 2728 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EventRecorderInitialize &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLog_Config
</UL>

<P><STRONG><a name="[2fb]"></a>EventRecorderStart</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLog_Config
</UL>

<P><STRONG><a name="[2f4]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[2f9]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[386]"></a>FATFS_LinkDriver</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ff_gen_drv.o(.text.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSDcardInit
</UL>

<P><STRONG><a name="[31a]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[31d]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[2fc]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[31b]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_CRC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCompont_Config
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_crc.o(.text.HAL_CRC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[366]"></a>HAL_DMAEx_MultiBufferStart</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_hal_dma_ex.o(.text.HAL_DMAEx_MultiBufferStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMAEx_MultiBufferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_RX_DMA_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
</UL>

<P><STRONG><a name="[32d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_RX_DMA_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[36d]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_DMA_Init</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_RX_DMA_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[33c]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[300]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_GPIO_Init</STRONG> (Thumb, 442 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[37b]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[34c]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2bb]"></a>$Super$$HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = $Super$$HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[302]"></a>HAL_InitTick</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, systemtick.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$HAL_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[303]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, systemtick.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$HAL_Init
</UL>

<P><STRONG><a name="[367]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Rec_Stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Stop
</UL>

<P><STRONG><a name="[368]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Rec_Stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Stop
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Rec_Start
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Start
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Rec_Start
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Start
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>

<P><STRONG><a name="[301]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$HAL_Init
</UL>

<P><STRONG><a name="[308]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[309]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 584 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[30a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[304]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[305]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[30b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[30c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 888 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[30d]"></a>HAL_RNG_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(.text.HAL_RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>

<P><STRONG><a name="[30f]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_rng.o(.text.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[310]"></a>HAL_RNG_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(.text.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCompont_Config
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>

<P><STRONG><a name="[30e]"></a>HAL_RNG_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text.HAL_RNG_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>

<P><STRONG><a name="[311]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(.text.HAL_RNG_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[312]"></a>HAL_SAI_DeInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f4xx_hal_sai.o(.text.HAL_SAI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIB_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_Init
</UL>

<P><STRONG><a name="[314]"></a>HAL_SAI_Init</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, stm32f4xx_hal_sai.o(.text.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetInputClock
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_BlockSynchroConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIB_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_Init
</UL>

<P><STRONG><a name="[313]"></a>HAL_SAI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(.text.HAL_SAI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>

<P><STRONG><a name="[315]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bsp_sai.o(.text.HAL_SAI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[318]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[319]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, sdram.o(.text.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[31c]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[31e]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[31f]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.HAL_SD_AbortCallback))
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[32c]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[337]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2de]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[328]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 672 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_SD_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[331]"></a>HAL_SD_InitCard</STRONG> (Thumb, 552 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SD_InitCard &rArr; SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[330]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[32e]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[32f]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[348]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[345]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[306]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[342]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[307]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[346]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[344]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[34a]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[347]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, systemtick.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[349]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[34d]"></a>IIC_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bsp_myiic.o(.text.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
</UL>

<P><STRONG><a name="[34e]"></a>IIC_Read_Byte</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, bsp_myiic.o(.text.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Read_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
</UL>

<P><STRONG><a name="[350]"></a>IIC_Send_Byte</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, bsp_myiic.o(.text.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[351]"></a>IIC_Start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_myiic.o(.text.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[352]"></a>IIC_Stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_myiic.o(.text.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[353]"></a>IIC_Wait_Ack</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bsp_myiic.o(.text.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Wait_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>

<P><STRONG><a name="[11b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, task_usb.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OTG_FS_IRQHandler &rArr; dcd_int_handler &rArr; tu_fifo_write_n_const_addr_full_words &rArr; _tu_fifo_write_n &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[355]"></a>PCF8574_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, pcf8574.o(.text.PCF8574_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PCF8574_Init &rArr; IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[356]"></a>PCF8574_WriteBit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pcf8574.o(.text.PCF8574_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PCF8574_WriteBit &rArr; IIC_Read_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[35d]"></a>PJ_FD_CLR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sock_select.o(.text.PJ_FD_CLR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PJ_FD_CLR &rArr; PJ_FD_ISSET &rArr; socketFdIsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketFdClr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ISSET
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
</UL>

<P><STRONG><a name="[82b]"></a>PJ_FD_COUNT</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sock_select.o(.text.PJ_FD_COUNT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PJ_FD_COUNT
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[35e]"></a>PJ_FD_ISSET</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sock_select.o(.text.PJ_FD_ISSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PJ_FD_ISSET &rArr; socketFdIsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketFdIsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_SET
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_CLR
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[361]"></a>PJ_FD_SET</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sock_select.o(.text.PJ_FD_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PJ_FD_SET &rArr; PJ_FD_ISSET &rArr; socketFdIsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketFdSet
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ISSET
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[363]"></a>PJ_FD_ZERO</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sock_select.o(.text.PJ_FD_ZERO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PJ_FD_ZERO &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketFdZero
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[d6]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2cd]"></a>SAIA_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bsp_sai.o(.text.SAIA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SAIA_Init &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2d0]"></a>SAIA_RX_DMA_Init</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, bsp_sai.o(.text.SAIA_RX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SAIA_RX_DMA_Init &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2cf]"></a>SAIA_TX_DMA_Init</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, bsp_sai.o(.text.SAIA_TX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SAIA_TX_DMA_Init &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2ce]"></a>SAIB_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bsp_sai.o(.text.SAIB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SAIB_Init &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[316]"></a>SAI_BlockSynchroConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_sai_ex.o(.text.SAI_BlockSynchroConfig))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[317]"></a>SAI_GetInputClock</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, stm32f4xx_hal_sai_ex.o(.text.SAI_GetInputClock))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[2d2]"></a>SAI_Play_Start</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bsp_sai.o(.text.SAI_Play_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_Play_Start &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2da]"></a>SAI_Play_Stop</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bsp_sai.o(.text.SAI_Play_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_Play_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_StreamStop
</UL>

<P><STRONG><a name="[2d1]"></a>SAI_Rec_Start</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bsp_sai.o(.text.SAI_Rec_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_Rec_Start &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2db]"></a>SAI_Rec_Stop</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, bsp_sai.o(.text.SAI_Rec_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_Rec_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_StreamStop
</UL>

<P><STRONG><a name="[33d]"></a>SDIO_ConfigData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[336]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[322]"></a>SDIO_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[109]"></a>SDIO_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm324x9i_eval_sd.o(.text.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SDIO_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[326]"></a>SDIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[332]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_PowerState_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[329]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[32a]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[324]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[335]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdAppOperCommand))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[321]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[325]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[333]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdGoIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[334]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdOperCond))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[33e]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[33f]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[33b]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[338]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendCID))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[33a]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendCSD))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[36a]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendSCR))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[327]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[339]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSetRelAdd))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[32b]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdStopTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[340]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[341]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[36b]"></a>SDRAM_Init</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, sdram.o(.text.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[36c]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, sdram.o(.text.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[26e]"></a>SD_initialize</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sd_diskio_dma_rtos.o(.text.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_initialize &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[272]"></a>SD_ioctl</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sd_diskio_dma_rtos.o(.text.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo &rArr; HAL_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[270]"></a>SD_read</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, sd_diskio_dma_rtos.o(.text.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_read &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[26f]"></a>SD_status</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sd_diskio_dma_rtos.o(.text.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_status &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[271]"></a>SD_write</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, sd_diskio_dma_rtos.o(.text.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_write &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio_dma_rtos.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[37e]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, segger_rtt.o(.text.SEGGER_RTT_ConfigDownBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SEGGER_RTT_ConfigDownBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLog_Config
</UL>

<P><STRONG><a name="[37f]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, segger_rtt.o(.text.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLog_Config
</UL>

<P><STRONG><a name="[371]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>

<P><STRONG><a name="[372]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[373]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLog_Config
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_write
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
</UL>

<P><STRONG><a name="[374]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 1558 bytes, Stack size 144 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[d4]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systemisr.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37a]"></a>SystemClock_Config</STRONG> (Thumb, 240 bytes, Stack size 136 bytes, systemclock.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SystemClock_Config &rArr; Error_Handler &rArr; puts &rArr; fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37c]"></a>SystemCompont_Config</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, systemcompont.o(.text.SystemCompont_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SystemCompont_Config &rArr; Error_Handler &rArr; puts &rArr; fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemInit &rArr; SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[37d]"></a>SystemLog_Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, systemlog.o(.text.SystemLog_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SystemLog_Config &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systemtick.o(.text.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[343]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[adb]"></a>UTILS_AbsoluteTimespecToDeltaTicks</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, freertos_posix_utils.o(.text.UTILS_AbsoluteTimespecToDeltaTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTILS_AbsoluteTimespecToDeltaTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
</UL>

<P><STRONG><a name="[380]"></a>UTILS_NanosecondsToTimespec</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, freertos_posix_utils.o(.text.UTILS_NanosecondsToTimespec))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UTILS_NanosecondsToTimespec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_gettime
</UL>

<P><STRONG><a name="[381]"></a>UserApplication_Entry</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, task_main.o(.text.UserApplication_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UserApplication_Entry &rArr; cm_backtrace_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[385]"></a>UserSDcardInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, user_sd_init.o(.text.UserSDcardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UserSDcardInit &rArr; BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_null_mutex
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_dec_ref
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_unset_owner_thread
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_set_owner_thread
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mutex_lock
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_enum_by_af
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recv
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recvfrom
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_accept
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_tryacquire
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_sendto
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_send
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockopt
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_lock
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_closing_keys
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_close
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_free
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_name
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostbyname
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_connect
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_accept
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom2
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_concurrency
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul2
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul3
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stristr
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok2
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strrtrim
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strltrim
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_qos_get_params
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse2
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_init
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_aton
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_on_buf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_alloc
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_block
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_destroy
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_write
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_read
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_write
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_read
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_create
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_set
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_get_prio_max
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_get_name
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_put_frame
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_get_frame
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_get_audio_format_detail
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_param
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_create
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_default_param
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_get_info
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_dev
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_addr_response
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_cancel_query
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_util_init
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_make_query
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quotes
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_create
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_attr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_add_attr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_to_rtpmap
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_fmtp
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_clone
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_update2
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_info_dup
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_dup
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_build_nack
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_bye
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_sdes
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_parse_pli
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_parse_nack
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_put_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_get_frame
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_null_port_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_get_frame
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_destroy
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_start
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_state
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame3
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame3
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_set_adaptive
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_set_ptime
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_set_discard
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_put_at
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_remove_head
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jbuf_discard_progressive
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_generate
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_save
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_create
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_create
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_recover
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_decode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_parse
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_dealloc_codec
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_rtpmap_to_attr
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_ioqueue
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_stop_threads
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_create
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_get_stat
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_discard
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shrink_buffer
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_port_info
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sinks
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sources
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_connect_port
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_add_port
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_set_port0_name
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_master_port
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_connect
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_snd_stream
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_dealloc_codec
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_alloc_codec
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_set_codec_priority
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_find_codecs_by_id
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_codec_info
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_info_to_id
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_destroy
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_init
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_param_clone
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_destroy
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_start
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_update
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_init
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_type_name
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_simulate_lost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_disable_rx
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_create2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_simulate_lost
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_set_options
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_options
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_change_role
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_valid_pair
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_role
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_def_cand
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_enum_cands
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_cands_count
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_get_cand_type_name
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_ufrag_pwd
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_user_data
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_grp_lock
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_simulate_lost
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_event_callback
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_info
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_CCNT
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_SPF
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_channel
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_disconnect
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_ec_stat
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_apply
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_callback
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_stat
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_bye
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_sdes
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_start
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_fmt_match
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_has_local_answer
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_offer
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_answer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_send_local_offer
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_local
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_remote
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_was_answer_remote
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_remote
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_credential
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_send_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_get_data
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_create
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_log
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_set_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auth
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_attr_clone
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_binary_attr
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_binary_attr_init
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_errcode_attr_create
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_msgint_attr
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_attr
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sockaddr_attr_init
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_string_attr
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_nat_name
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_user_data
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_user_data
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_user_data
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_info
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_sendto
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_sendto
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_bind_channel
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_state_name
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_cancel_req
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint64_attr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_empty_attr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_check
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_send_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_retransmit_req
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_prefs
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_change_role
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_options
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_use_fingerprint
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_checklist
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_init
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_register_audio_codecs
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_destroy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ca_thread_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_get_cap
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_get_param
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_set_cap
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_default_param
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_get_dev_info
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_print
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_resolver
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolver_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_has_capability
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_get_endpt
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_uri
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_init_parser
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_print
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_clone
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_print
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_clone
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_clone
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_compare
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_print
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_get_uri
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_get_scheme
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_init_module
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_async_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_msg
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_set_state_cb
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_unregister_tpfactory
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_destroy
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_free_cloned
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_from_flag
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_idle_callback
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_raw_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_callback
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_request_dest
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_resched_retransmission
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_trying
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_terminated
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_confirmed
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uac
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_find_part
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_add_part
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_print_body
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cmp
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_print_on
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_copy
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_clone
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_set
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_route_set
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_prefs
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_credentials
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_dec_ref
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_ref
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_sdp_answer
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_req
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_create_sdp_body
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_uac_restart
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_state_name
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_usage_init
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_end_session
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_add_ref
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_body
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_send_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_is_reliable
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_unpublish
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_via_sent_by
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_route_set
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_credentials
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_status
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_set_status
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_get_status
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_init_module
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_server_timeout
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_client_refresh
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_refresh
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_tsx_state
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_state
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_status
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_id
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_init_module
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_server_timeout
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_client_refresh
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_notify
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_refresh
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_tsx_state
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_state
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_add_header
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_terminate
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_allow_events_hdr
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_instance
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_assign_status
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_set_current
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_from_msg
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_non_av_fmt
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secure_level
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_enum_calls
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_is_active
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_initial_aud_param
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_SRATE
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_init_module
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_server_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_client_refresh
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_notify
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_refresh
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_tsx_state
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_state
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_session
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_module
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_clone
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_clone
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_headers
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_init_module
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_delay_before_refresh
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_via_sent_by
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_reg_tsx_cb
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_update_contact
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_headers
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_release_transport
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_transport
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_buddy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media2
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>

<P><STRONG><a name="[3a5]"></a>accept</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, bsd_socket.o(.text.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = accept &rArr; socketAccept &rArr; tcpAccept &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_accept
</UL>

<P><STRONG><a name="[3aa]"></a>acquire_call</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, pjsua_call.o(.text.acquire_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = acquire_call &rArr; pjsip_dlg_try_inc_lock &rArr; pj_grp_lock_tryacquire &rArr; grp_lock_tryacquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hangup_timer_cb
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_failed_nego_cb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_init_complete_cb
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[b60]"></a>aesEncryptBlock</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, aes.o(.text.aesEncryptBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
</UL>

<P><STRONG><a name="[b5f]"></a>aesInit</STRONG> (Thumb, 1050 bytes, Stack size 44 bytes, aes.o(.text.aesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = aesInit
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
</UL>

<P><STRONG><a name="[3d6]"></a>arpCreateEntry</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, arp.o(.text.arpCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = arpCreateEntry &rArr; netBufferFree &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[3d9]"></a>arpEnqueuePacket</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, arp.o(.text.arpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[3e6]"></a>arpFindEntry</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, arp.o(.text.arpFindEntry), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[3dd]"></a>arpFlushCache</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, arp.o(.text.arpFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = arpFlushCache &rArr; netBufferFree &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[3de]"></a>arpInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arp.o(.text.arpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[3df]"></a>arpProcessPacket</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, arp.o(.text.arpProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[3e3]"></a>arpProcessReply</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, arp.o(.text.arpProcessReply), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3e2]"></a>arpProcessRequest</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, arp.o(.text.arpProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[3e9]"></a>arpResolve</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, arp.o(.text.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[3eb]"></a>arpSendProbe</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, arp.o(.text.arpSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = arpSendProbe &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[3e7]"></a>arpSendQueuedPackets</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, arp.o(.text.arpSendQueuedPackets), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[3e8]"></a>arpSendReply</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, arp.o(.text.arpSendReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[3ea]"></a>arpSendRequest</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, arp.o(.text.arpSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
</UL>

<P><STRONG><a name="[3f1]"></a>arpTick</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, arp.o(.text.arpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[3f6]"></a>bind</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bsd_socket.o(.text.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bind
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
</UL>

<P><STRONG><a name="[143]"></a>call_med_event_cb</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pjsua_media.o(.text.call_med_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = call_med_event_cb &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_media.o(.text.call_media_on_event)
</UL>
<P><STRONG><a name="[212]"></a>call_media_on_event</STRONG> (Thumb, 464 bytes, Stack size 216 bytes, pjsua_media.o(.text.call_media_on_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 9056<LI>Call Chain = call_media_on_event &rArr; pjsua_call_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_msec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_init
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pjsua_aud.o(.text.pjsua_aud_stop_stream)
<LI> pjsua_aud.o(.text.pjsua_aud_channel_update)
</UL>
<P><STRONG><a name="[410]"></a>call_update_contact</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, pjsua_call.o(.text.call_update_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 6816<LI>Call Chain = call_update_contact &rArr; pjsua_acc_create_uac_contact &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
</UL>

<P><STRONG><a name="[429]"></a>clock_gettime</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, freertos_posix_clock.o(.text.clock_gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clock_gettime &rArr; UTILS_NanosecondsToTimespec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTILS_NanosecondsToTimespec
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
</UL>

<P><STRONG><a name="[438]"></a>closesocket</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsd_socket.o(.text.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = closesocket &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
</UL>

<P><STRONG><a name="[439]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 512 bytes, Stack size 40 bytes, cm_backtrace.o(.text.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cm_backtrace_call_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackSize
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[2a1]"></a>cm_backtrace_fault</STRONG> (Thumb, 1740 bytes, Stack size 56 bytes, cm_backtrace.o(.text.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskName
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackSize
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackAddr
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[382]"></a>cm_backtrace_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cm_backtrace.o(.text.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cm_backtrace_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserApplication_Entry
</UL>

<P><STRONG><a name="[443]"></a>connect</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bsd_socket.o(.text.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = connect &rArr; socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_connect
</UL>

<P><STRONG><a name="[445]"></a>convertUnixTimeToDate</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, date_time.o(.text.convertUnixTimeToDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = convertUnixTimeToDate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_decode
</UL>

<P><STRONG><a name="[475]"></a>create_temp_sdp</STRONG> (Thumb, 842 bytes, Stack size 232 bytes, pjsua_call.o(.text.create_temp_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = create_temp_sdp &rArr; pjmedia_endpt_create_audio_sdp &rArr; pjmedia_sdp_rtpmap_to_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
</UL>

<P><STRONG><a name="[47b]"></a>create_uas_dialog</STRONG> (Thumb, 1404 bytes, Stack size 136 bytes, sip_dialog.o(.text.create_uas_dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 5480<LI>Call Chain = create_uas_dialog &rArr; pjsip_dlg_update_remote_cap &rArr; pjsip_dlg_set_remote_cap_hdr &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc_tolower
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_set_route
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_set_to
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_create
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_set_from
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uas_and_inc_lock
</UL>

<P><STRONG><a name="[493]"></a>dcd_event_bus_reset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usbd.o(.text.dcd_event_bus_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dcd_event_bus_reset &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[495]"></a>dcd_event_bus_signal</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd.o(.text.dcd_event_bus_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dcd_event_bus_signal &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[494]"></a>dcd_event_handler</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, usbd.o(.text.dcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_setup_received
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_signal
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_reset
</UL>

<P><STRONG><a name="[496]"></a>dcd_event_setup_received</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usbd.o(.text.dcd_event_setup_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dcd_event_setup_received &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[497]"></a>dcd_event_xfer_complete</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbd.o(.text.dcd_event_xfer_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[354]"></a>dcd_int_handler</STRONG> (Thumb, 2440 bytes, Stack size 72 bytes, dcd_synopsys.o(.text.dcd_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dcd_int_handler &rArr; tu_fifo_write_n_const_addr_full_words &rArr; _tu_fifo_write_n &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n_const_addr_full_words
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_setup_received
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write_n_const_addr_full_words
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_signal
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_reset
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[4a2]"></a>deinit_sip_parser</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sip_parser.o(.text.deinit_sip_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = deinit_sip_parser &rArr; pj_exception_id_free &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_free
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[34f]"></a>delay_us</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, systemtime.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[4b9]"></a>dhcpAddOption</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dhcp_common.o(.text.dhcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
</UL>

<P><STRONG><a name="[4ba]"></a>dhcpClientChangeState</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dhcp_client_misc.o(.text.dhcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcpClientChangeState &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>

<P><STRONG><a name="[4c0]"></a>dhcpClientCheckTimeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp_client_misc.o(.text.dhcpClientCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dhcpClientCheckTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[4c1]"></a>dhcpClientDumpConfig</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dhcp_client_misc.o(.text.dhcpClientDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcpClientDumpConfig &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[4c3]"></a>dhcpClientLinkChangeEvent</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, dhcp_client_misc.o(.text.dhcpClientLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[4d2]"></a>dhcpClientResetConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dhcp_client_misc.o(.text.dhcpClientResetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[4c4]"></a>dhcpClientSendDecline</STRONG> (Thumb, 322 bytes, Stack size 104 bytes, dhcp_client_misc.o(.text.dhcpClientSendDecline))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[4c9]"></a>dhcpClientSendDiscover</STRONG> (Thumb, 342 bytes, Stack size 104 bytes, dhcp_client_misc.o(.text.dhcpClientSendDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[4ca]"></a>dhcpClientSendRequest</STRONG> (Thumb, 458 bytes, Stack size 96 bytes, dhcp_client_misc.o(.text.dhcpClientSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
</UL>

<P><STRONG><a name="[4cc]"></a>dhcpClientStateBound</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dhcp_client_fsm.o(.text.dhcpClientStateBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4cd]"></a>dhcpClientStateInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dhcpClientStateInit &rArr; dhcpClientChangeState &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4cf]"></a>dhcpClientStateInitReboot</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateInitReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dhcpClientStateInitReboot &rArr; dhcpClientChangeState &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d0]"></a>dhcpClientStateProbing</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dhcp_client_fsm.o(.text.dhcpClientStateProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d1]"></a>dhcpClientStateRebinding</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateRebinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d4]"></a>dhcpClientStateRebooting</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateRebooting))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d5]"></a>dhcpClientStateRenewing</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateRenewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d6]"></a>dhcpClientStateRequesting</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateRequesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d7]"></a>dhcpClientStateSelecting</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp_client_fsm.o(.text.dhcpClientStateSelecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[4d8]"></a>dhcpClientTick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dhcp_client_misc.o(.text.dhcpClientTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[4cb]"></a>dhcpGetOption</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp_common.o(.text.dhcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
</UL>

<P><STRONG><a name="[6e6]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[41a]"></a>disk_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[6e5]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[6e9]"></a>disk_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[4e6]"></a>dnsCompareName</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, dns_common.o(.text.dnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dnsCompareName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[4e7]"></a>dnsCreateEntry</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, dns_cache.o(.text.dnsCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dnsCreateEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
</UL>

<P><STRONG><a name="[4e9]"></a>dnsDeleteEntry</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dns_cache.o(.text.dnsDeleteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dnsDeleteEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[4f5]"></a>dnsEncodeName</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, dns_common.o(.text.dnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[4ea]"></a>dnsFindEntry</STRONG> (Thumb, 2036 bytes, Stack size 24 bytes, dns_cache.o(.text.dnsFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dnsFindEntry &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
</UL>

<P><STRONG><a name="[4eb]"></a>dnsFlushCache</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, dns_cache.o(.text.dnsFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dnsFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[4ec]"></a>dnsInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns_cache.o(.text.dnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dnsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[4ed]"></a>dnsParseName</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, dns_common.o(.text.dnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[148]"></a>dnsProcessResponse</STRONG> (Thumb, 840 bytes, Stack size 56 bytes, dns_client.o(.text.dnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dnsProcessResponse &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_client.o(.text.dnsResolve)
</UL>
<P><STRONG><a name="[4ee]"></a>dnsResolve</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, dns_client.o(.text.dnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[4f2]"></a>dnsSendQuery</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, dns_client.o(.text.dnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[4f6]"></a>dnsTick</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, dns_cache.o(.text.dnsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = dnsTick &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[39]"></a>echo_supp_cancel_echo</STRONG> (Thumb, 3796 bytes, Stack size 144 bytes, echo_suppress.o(.text.echo_supp_cancel_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = echo_supp_cancel_echo &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_calc_avg_signal
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> echo_common.o(.data.echo_supp_op)
</UL>
<P><STRONG><a name="[36]"></a>echo_supp_create</STRONG> (Thumb, 540 bytes, Stack size 64 bytes, echo_suppress.o(.text.echo_supp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = echo_supp_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> echo_common.o(.data.echo_supp_op)
</UL>
<P><STRONG><a name="[37]"></a>echo_supp_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, echo_suppress.o(.text.echo_supp_destroy))
<BR>[Address Reference Count : 1]<UL><LI> echo_common.o(.data.echo_supp_op)
</UL>
<P><STRONG><a name="[3a]"></a>echo_supp_get_stat</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, echo_suppress.o(.text.echo_supp_get_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = echo_supp_get_stat &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_stat_default
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> echo_common.o(.data.echo_supp_op)
</UL>
<P><STRONG><a name="[38]"></a>echo_supp_reset</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, echo_suppress.o(.text.echo_supp_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = echo_supp_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> echo_common.o(.data.echo_supp_op)
</UL>
<P><STRONG><a name="[530]"></a>ethAcceptMacAddr</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, ethernet.o(.text.ethAcceptMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[3ec]"></a>ethAllocBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernet.o(.text.ethAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>

<P><STRONG><a name="[53f]"></a>ethCalcCrcEx</STRONG> (Thumb, 384 bytes, Stack size 20 bytes, ethernet_misc.o(.text.ethCalcCrcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[539]"></a>ethCheckCrc</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, ethernet_misc.o(.text.ethCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[532]"></a>ethCheckDestAddr</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, ethernet_misc.o(.text.ethCheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[533]"></a>ethDropMacAddr</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, ethernet.o(.text.ethDropMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[534]"></a>ethInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet.o(.text.ethInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[535]"></a>ethPadFrame</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethernet_misc.o(.text.ethPadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethPadFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[537]"></a>ethProcessFrame</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ethernet.o(.text.ethProcessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateErrorStats
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[3ee]"></a>ethSendFrame</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, ethernet.o(.text.ethSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
</UL>

<P><STRONG><a name="[538]"></a>ethUpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_misc.o(.text.ethUpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[53b]"></a>ethUpdateInStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_misc.o(.text.ethUpdateInStats))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[53d]"></a>ethUpdateOutStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_misc.o(.text.ethUpdateOutStats))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[52c]"></a>exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text.exit))
<BR><BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
</UL>

<P><STRONG><a name="[54b]"></a>f_mount</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_mount &rArr; mount_volume &rArr; ff_req_grant &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInit
</UL>

<P><STRONG><a name="[54d]"></a>ff_cre_syncobj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[54c]"></a>ff_del_syncobj</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ff_del_syncobj &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[54f]"></a>ff_rel_grant</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[551]"></a>ff_req_grant</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ff_req_grant &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[4bc]"></a>formatSystemTime</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, date_time.o(.text.formatSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = formatSystemTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[269]"></a>fputc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[55e]"></a>fsInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fs_port_fatfs.o(.text.fsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fsInit &rArr; f_mount &rArr; mount_volume &rArr; ff_req_grant &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteMutex
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[566]"></a>getHostByName</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, socket.o(.text.getHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[598]"></a>gethostbyname</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsd_socket.o(.text.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostbyname
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
</UL>

<P><STRONG><a name="[599]"></a>gethostname</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsd_socket.o(.text.gethostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gethostname
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostname
</UL>

<P><STRONG><a name="[7e9]"></a>getpid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core_unix.o(.text.getpid))
<BR><BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getpid
</UL>

<P><STRONG><a name="[59a]"></a>getsockname</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bsd_socket.o(.text.getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getsockname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
</UL>

<P><STRONG><a name="[59b]"></a>getsockopt</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, bsd_socket.o(.text.getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getsockopt &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockopt
</UL>

<P><STRONG><a name="[5c3]"></a>icmpProcessEchoRequest</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, icmp.o(.text.icmpProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[5c8]"></a>icmpProcessMessage</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, icmp.o(.text.icmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[5c9]"></a>icmpSendErrorMessage</STRONG> (Thumb, 310 bytes, Stack size 88 bytes, icmp.o(.text.icmpSendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[5cd]"></a>igmpHostInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, igmp_host.o(.text.igmpHostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmpHostInit &rArr; netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[5cf]"></a>igmpHostJoinGroup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, igmp_host.o(.text.igmpHostJoinGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[5d1]"></a>igmpHostLinkChangeEvent</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, igmp_host.o(.text.igmpHostLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
</UL>

<P><STRONG><a name="[5d2]"></a>igmpHostProcessMembershipQuery</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, igmp_host_misc.o(.text.igmpHostProcessMembershipQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = igmpHostProcessMembershipQuery &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[5d3]"></a>igmpHostProcessMessage</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, igmp_host_misc.o(.text.igmpHostProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[5d0]"></a>igmpHostSendMembershipReport</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, igmp_host_misc.o(.text.igmpHostSendMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>

<P><STRONG><a name="[5d6]"></a>igmpHostTick</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, igmp_host.o(.text.igmpHostTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
</UL>

<P><STRONG><a name="[5d8]"></a>igmpInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, igmp_common.o(.text.igmpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = igmpInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[5da]"></a>igmpLinkChangeEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, igmp_common.o(.text.igmpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[5db]"></a>igmpProcessMessage</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, igmp_common.o(.text.igmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = igmpProcessMessage &rArr; igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[5d5]"></a>igmpSendMessage</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, igmp_common.o(.text.igmpSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[5dc]"></a>igmpTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, igmp_common.o(.text.igmpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = igmpTick &rArr; igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[5e2]"></a>inet_aton</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsd_socket.o(.text.inet_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_aton &rArr; ipv4StringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_aton
</UL>

<P><STRONG><a name="[5e4]"></a>inet_ntop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsd_socket.o(.text.inet_ntop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_ntop &rArr; ipv4AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
</UL>

<P><STRONG><a name="[5e5]"></a>inet_pton</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsd_socket.o(.text.inet_pton))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_pton &rArr; ipv4StringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
</UL>

<P><STRONG><a name="[5fa]"></a>init_sip_parser</STRONG> (Thumb, 3752 bytes, Stack size 96 bytes, sip_parser.o(.text.init_sip_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = init_sip_parser &rArr; pj_exception_id_alloc &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_alloc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_invert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_del_str
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_num
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_alpha
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_dup
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_str
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_buf_init
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_init_parser
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[668]"></a>ioctlsocket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bsd_socket.o(.text.ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ioctlsocket &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
</UL>

<P><STRONG><a name="[66b]"></a>ioqueue_dispatch_exception_event</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, ioqueue_select.o(.text.ioqueue_dispatch_exception_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = ioqueue_dispatch_exception_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockopt
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_trylock_key
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[670]"></a>ioqueue_dispatch_read_event</STRONG> (Thumb, 564 bytes, Stack size 56 bytes, ioqueue_select.o(.text.ioqueue_dispatch_read_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = ioqueue_dispatch_read_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recv
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recvfrom
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_accept
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_trylock_key
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_read
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[676]"></a>ioqueue_dispatch_write_event</STRONG> (Thumb, 716 bytes, Stack size 80 bytes, ioqueue_select.o(.text.ioqueue_dispatch_write_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_sendto
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_send
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockopt
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_trylock_key
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_write
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[4f4]"></a>ipAddrToString</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ip.o(.text.ipAddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipAddrToString &rArr; ipv4AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[5c4]"></a>ipAllocBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip.o(.text.ipAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[5d4]"></a>ipCalcChecksum</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, ip.o(.text.ipCalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[5c6]"></a>ipCalcChecksumEx</STRONG> (Thumb, 408 bytes, Stack size 44 bytes, ip.o(.text.ipCalcChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
</UL>

<P><STRONG><a name="[683]"></a>ipCalcUpperLayerChecksumEx</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ip.o(.text.ipCalcUpperLayerChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[b46]"></a>ipIsMulticastAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ip.o(.text.ipIsMulticastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
</UL>

<P><STRONG><a name="[b27]"></a>ipIsUnspecifiedAddr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip.o(.text.ipIsUnspecifiedAddr))
<BR><BR>[Called By]<UL><LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[684]"></a>ipSelectSourceAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ip.o(.text.ipSelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipSelectSourceAddr &rArr; ipv4SelectSourceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[685]"></a>ipSendDatagram</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ip.o(.text.ipSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[569]"></a>ipStringToAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip.o(.text.ipStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipStringToAddr &rArr; ipv4StringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[686]"></a>ipv4AddRouterAlertOption</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ipv4_misc.o(.text.ipv4AddRouterAlertOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipv4AddRouterAlertOption &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[4c2]"></a>ipv4AddrToString</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv4.o(.text.ipv4AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntop
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[694]"></a>ipv4CheckDestAddr</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4CheckDestAddr))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[693]"></a>ipv4CheckSourceAddr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4CheckSourceAddr))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[689]"></a>ipv4DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4.o(.text.ipv4DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[687]"></a>ipv4FlushFragQueue</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ipv4_frag.o(.text.ipv4FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[688]"></a>ipv4FragTick</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, ipv4_frag.o(.text.ipv4FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[68a]"></a>ipv4FragmentDatagram</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, ipv4_frag.o(.text.ipv4FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[6fb]"></a>ipv4GetBroadcastAddr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4GetBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[68c]"></a>ipv4Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv4.o(.text.ipv4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[3e4]"></a>ipv4IsBroadcastAddr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4IsBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[699]"></a>ipv4IsLocalHostAddr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4IsLocalHostAddr))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[69a]"></a>ipv4IsOnLink</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4IsOnLink))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[3e5]"></a>ipv4IsTentativeAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4IsTentativeAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[5d9]"></a>ipv4JoinMulticastGroup</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ipv4.o(.text.ipv4JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[68e]"></a>ipv4LinkChangeEvent</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ipv4.o(.text.ipv4LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[68d]"></a>ipv4MapMulticastAddrToMac</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4MapMulticastAddrToMac))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[68f]"></a>ipv4ProcessDatagram</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, ipv4.o(.text.ipv4ProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[53c]"></a>ipv4ProcessPacket</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ipv4.o(.text.ipv4ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[696]"></a>ipv4ReassembleDatagram</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, ipv4_frag.o(.text.ipv4ReassembleDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[697]"></a>ipv4SearchFragQueue</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, ipv4_frag.o(.text.ipv4SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[69b]"></a>ipv4SelectDefaultGateway</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4SelectDefaultGateway))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[3f0]"></a>ipv4SelectSourceAddr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ipv4_misc.o(.text.ipv4SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
</UL>

<P><STRONG><a name="[5c7]"></a>ipv4SendDatagram</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ipv4.o(.text.ipv4SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[68b]"></a>ipv4SendPacket</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, ipv4.o(.text.ipv4SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectDefaultGateway
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsLocalHostAddr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[69c]"></a>ipv4SetDefaultGateway</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv4.o(.text.ipv4SetDefaultGateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipv4SetDefaultGateway &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[69d]"></a>ipv4SetDnsServer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipv4.o(.text.ipv4SetDnsServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ipv4SetDnsServer &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[69e]"></a>ipv4SetHostAddr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipv4.o(.text.ipv4SetHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ipv4SetHostAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[69f]"></a>ipv4SetSubnetMask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv4.o(.text.ipv4SetSubnetMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipv4SetSubnetMask &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[5e3]"></a>ipv4StringToAddr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ipv4.o(.text.ipv4StringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv4StringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_pton
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[692]"></a>ipv4UpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4UpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[695]"></a>ipv4UpdateInStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4UpdateInStats))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[3ef]"></a>ipv4UpdateOutStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_misc.o(.text.ipv4UpdateOutStats))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
</UL>

<P><STRONG><a name="[282]"></a>lan8720DisableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720_driver.o(.text.lan8720DisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.rodata.lan8720PhyDriver)
</UL>
<P><STRONG><a name="[281]"></a>lan8720EnableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720_driver.o(.text.lan8720EnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.rodata.lan8720PhyDriver)
</UL>
<P><STRONG><a name="[283]"></a>lan8720EventHandler</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, lan8720_driver.o(.text.lan8720EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lan8720EventHandler &rArr; nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.rodata.lan8720PhyDriver)
</UL>
<P><STRONG><a name="[27f]"></a>lan8720Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lan8720_driver.o(.text.lan8720Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lan8720Init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.rodata.lan8720PhyDriver)
</UL>
<P><STRONG><a name="[280]"></a>lan8720Tick</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lan8720_driver.o(.text.lan8720Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lan8720Tick &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.rodata.lan8720PhyDriver)
</UL>
<P><STRONG><a name="[6b4]"></a>listen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsd_socket.o(.text.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = listen &rArr; socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_listen
</UL>

<P><STRONG><a name="[167]"></a>llmnrProcessQuery</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, llmnr_responder.o(.text.llmnrProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = llmnrProcessQuery &rArr; llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llmnr_responder.o(.text.llmnrResponderInit)
</UL>
<P><STRONG><a name="[6b7]"></a>llmnrResponderInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llmnr_responder.o(.text.llmnrResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[6b6]"></a>llmnrSendResponse</STRONG> (Thumb, 290 bytes, Stack size 88 bytes, llmnr_responder.o(.text.llmnrSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[70f]"></a>macAddrToEui64</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethernet.o(.text.macAddrToEui64))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[132]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, systemmain.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; UserApplication_Entry &rArr; cm_backtrace_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCompont_Config
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLog_Config
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserApplication_Entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6c5]"></a>memPoolAlloc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, net_mem.o(.text.memPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = memPoolAlloc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[6c7]"></a>memPoolFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(.text.memPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[703]"></a>memPoolInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(.text.memPoolInit))
<BR><BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[6f3]"></a>nbnsCompareName</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, nbns_common.o(.text.nbnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[6f5]"></a>nbnsEncodeName</STRONG> (Thumb, 1202 bytes, Stack size 56 bytes, nbns_common.o(.text.nbnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nbnsEncodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[6f6]"></a>nbnsInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nbns_common.o(.text.nbnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[6f9]"></a>nbnsParseName</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, nbns_common.o(.text.nbnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[171]"></a>nbnsProcessMessage</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, nbns_common.o(.text.nbnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(.text.nbnsInit)
</UL>
<P><STRONG><a name="[6f7]"></a>nbnsProcessQuery</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nbns_responder.o(.text.nbnsProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[6f8]"></a>nbnsProcessResponse</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, nbns_client.o(.text.nbnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[56b]"></a>nbnsResolve</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, nbns_client.o(.text.nbnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = nbnsResolve &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[4f7]"></a>nbnsSendQuery</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, nbns_client.o(.text.nbnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[6fa]"></a>nbnsSendResponse</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, nbns_responder.o(.text.nbnsSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[3db]"></a>netBufferAlloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_mem.o(.text.netBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>

<P><STRONG><a name="[536]"></a>netBufferAppend</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_mem.o(.text.netBufferAppend))
<BR><BR>[Called By]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[3ed]"></a>netBufferAt</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, net_mem.o(.text.netBufferAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>

<P><STRONG><a name="[5c5]"></a>netBufferConcat</STRONG> (Thumb, 254 bytes, Stack size 36 bytes, net_mem.o(.text.netBufferConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[3dc]"></a>netBufferCopy</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, net_mem.o(.text.netBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netBufferCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[3d8]"></a>netBufferFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_mem.o(.text.netBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[3da]"></a>netBufferGetLength</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_mem.o(.text.netBufferGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[6fc]"></a>netBufferRead</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, net_mem.o(.text.netBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
</UL>

<P><STRONG><a name="[4c7]"></a>netBufferSetLength</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, net_mem.o(.text.netBufferSetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>

<P><STRONG><a name="[698]"></a>netBufferWrite</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, net_mem.o(.text.netBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferWrite &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>

<P><STRONG><a name="[6fd]"></a>netConfigInterface</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, net.o(.text.netConfigInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[567]"></a>netGetDefaultInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(.text.netGetDefaultInterface))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostname
</UL>

<P><STRONG><a name="[4d3]"></a>netGetRand</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, net_misc.o(.text.netGetRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>

<P><STRONG><a name="[701]"></a>netGetRandBit</STRONG> (Thumb, 304 bytes, Stack size 52 bytes, net_misc.o(.text.netGetRandBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
</UL>

<P><STRONG><a name="[4ce]"></a>netGetRandRange</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_misc.o(.text.netGetRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = netGetRandRange &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>

<P><STRONG><a name="[702]"></a>netInit</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, net.o(.text.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netInit &rArr; socketInit &rArr; osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[6ff]"></a>netInitRand</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, net_misc.o(.text.netInitRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = netInitRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[708]"></a>netProcessLinkChange</STRONG> (Thumb, 1284 bytes, Stack size 16 bytes, net_misc.o(.text.netProcessLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[70b]"></a>netSetDriver</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net.o(.text.netSetDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netSetDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[70c]"></a>netSetHostname</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net.o(.text.netSetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netSetHostname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[70d]"></a>netSetInterfaceName</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net.o(.text.netSetInterfaceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netSetInterfaceName &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[70e]"></a>netSetMacAddr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net.o(.text.netSetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netSetMacAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[710]"></a>netSetPhyDriver</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net.o(.text.netSetPhyDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netSetPhyDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[5ce]"></a>netStartTimer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_misc.o(.text.netStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
</UL>

<P><STRONG><a name="[b22]"></a>netStopTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_misc.o(.text.netStopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[172]"></a>netTask</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, net.o(.text.netTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = netTask &rArr; netTick &rArr; dhcpClientTick &rArr; dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(.text.netInit)
</UL>
<P><STRONG><a name="[712]"></a>netTick</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, net_misc.o(.text.netTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = netTick &rArr; dhcpClientTick &rArr; dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[5d7]"></a>netTimerExpired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_misc.o(.text.netTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netTimerExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>

<P><STRONG><a name="[b39]"></a>netTimerRunning</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_misc.o(.text.netTimerRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[715]"></a>network_Init</STRONG> (Thumb, 744 bytes, Stack size 104 bytes, task_network.o(.text.network_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = network_Init &rArr; netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInit
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
</UL>

<P><STRONG><a name="[3e0]"></a>nicGetLogicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(.text.nicGetLogicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
</UL>

<P><STRONG><a name="[53a]"></a>nicGetPhysicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(.text.nicGetPhysicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[6aa]"></a>nicNotifyLinkChange</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nic.o(.text.nicNotifyLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
</UL>

<P><STRONG><a name="[71b]"></a>nicProcessPacket</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nic.o(.text.nicProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthEventHandler
</UL>

<P><STRONG><a name="[53e]"></a>nicSendPacket</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nic.o(.text.nicSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[713]"></a>nicTick</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nic.o(.text.nicTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[531]"></a>nicUpdateMacAddrFilter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nic.o(.text.nicUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateMacAddrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
</UL>

<P><STRONG><a name="[71c]"></a>normalize_route_uri</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, pjsua_core.o(.text.normalize_route_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = normalize_route_uri &rArr; pjsip_parse_uri &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
</UL>

<P><STRONG><a name="[224]"></a>on_dlg_forked</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pjsua_call.o(.text.on_dlg_forked))
<BR><BR>[Stack]<UL><LI>Max Depth = 8816<LI>Call Chain = on_dlg_forked &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_bye_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.pjsua_init)
</UL>
<P><STRONG><a name="[144]"></a>on_media_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pjsua_media.o(.text.on_media_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = on_media_event &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pjsua_aud.o(.text.close_snd_dev)
<LI> pjsua_aud.o(.text.open_snd_dev)
</UL>
<P><STRONG><a name="[4bf]"></a>osAcquireMutex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osAcquireMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osAcquireMutex &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlsocket
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[6c6]"></a>osAllocMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osAllocMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>

<P><STRONG><a name="[6fe]"></a>osCreateEvent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_port_freertos.o(.text.osCreateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osCreateEvent &rArr; xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[55f]"></a>osCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_port_freertos.o(.text.osCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osCreateMutex &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInit
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
</UL>

<P><STRONG><a name="[707]"></a>osCreateTask</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_port_freertos.o(.text.osCreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osCreateTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[4f3]"></a>osDelayTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osDelayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
</UL>

<P><STRONG><a name="[700]"></a>osDeleteEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osDeleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[560]"></a>osDeleteMutex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osDeleteMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osDeleteMutex &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInit
</UL>

<P><STRONG><a name="[6c8]"></a>osFreeMem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osFreeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>

<P><STRONG><a name="[3d7]"></a>osGetSystemTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osGetSystemTime))
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>

<P><STRONG><a name="[4be]"></a>osReleaseMutex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osReleaseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlsocket
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[77e]"></a>osResetEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osResetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osResetEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[4bd]"></a>osResumeAllTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(.text.osResumeAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[6ab]"></a>osSetEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Tick
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[2f1]"></a>osSetEventFromIsr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_port_freertos.o(.text.osSetEventFromIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[4bb]"></a>osSuspendAllTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(.text.osSuspendAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSuspendAllTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[711]"></a>osWaitForEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_port_freertos.o(.text.osWaitForEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[97e]"></a>pj_GUID_STRING_LENGTH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guid_simple.o(.text.pj_GUID_STRING_LENGTH))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[ac4]"></a>pj_NO_MEMORY_EXCEPTION</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pool.o(.text.pj_NO_MEMORY_EXCEPTION))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_callback
</UL>

<P><STRONG><a name="[7a1]"></a>pj_activesock_cfg_default</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, activesock.o(.text.pj_activesock_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_activesock_cfg_default &rArr; pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[48e]"></a>pj_activesock_close</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, activesock.o(.text.pj_activesock_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_activesock_close &rArr; pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_cleanup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
</UL>

<P><STRONG><a name="[7a4]"></a>pj_activesock_create</STRONG> (Thumb, 826 bytes, Stack size 104 bytes, activesock.o(.text.pj_activesock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pj_activesock_create &rArr; pj_activesock_close &rArr; pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_concurrency
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[48f]"></a>pj_activesock_get_user_data</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, activesock.o(.text.pj_activesock_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pj_activesock_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_sent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete_asock
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent_asock
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[732]"></a>pj_activesock_send</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, activesock.o(.text.pj_activesock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = pj_activesock_send &rArr; send_remaining &rArr; pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[7a9]"></a>pj_activesock_sendto</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, activesock.o(.text.pj_activesock_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pj_activesock_sendto &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_send_msg
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_sendto
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
</UL>

<P><STRONG><a name="[7aa]"></a>pj_activesock_start_accept</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, activesock.o(.text.pj_activesock_start_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = pj_activesock_start_accept &rArr; pj_ioqueue_accept &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
</UL>

<P><STRONG><a name="[6b0]"></a>pj_activesock_start_connect</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, activesock.o(.text.pj_activesock_start_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_activesock_start_connect &rArr; pj_ioqueue_connect &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
</UL>

<P><STRONG><a name="[490]"></a>pj_activesock_start_read</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, activesock.o(.text.pj_activesock_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pj_activesock_start_read &rArr; pj_activesock_start_read2 &rArr; pj_ioqueue_recv &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[7ac]"></a>pj_activesock_start_read2</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, activesock.o(.text.pj_activesock_start_read2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pj_activesock_start_read2 &rArr; pj_ioqueue_recv &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
</UL>

<P><STRONG><a name="[7ad]"></a>pj_activesock_start_recvfrom</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, activesock.o(.text.pj_activesock_start_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = pj_activesock_start_recvfrom &rArr; pj_activesock_start_recvfrom2 &rArr; pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
</UL>

<P><STRONG><a name="[7ae]"></a>pj_activesock_start_recvfrom2</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, activesock.o(.text.pj_activesock_start_recvfrom2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pj_activesock_start_recvfrom2 &rArr; pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom
</UL>

<P><STRONG><a name="[398]"></a>pj_addr_str_print</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, sock_common.o(.text.pj_addr_str_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pj_addr_str_print &rArr; pj_inet_pton &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_tx_msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_rx_msg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
</UL>

<P><STRONG><a name="[3b3]"></a>pj_array_erase</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, array.o(.text.pj_array_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_array_erase &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_attr
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sources
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[7b0]"></a>pj_array_insert</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, array.o(.text.pj_array_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pj_array_insert &rArr; pj_memmove &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[842]"></a>pj_atexit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, os_core_unix.o(.text.pj_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_buf_initialize
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_init
</UL>

<P><STRONG><a name="[7b1]"></a>pj_atomic_create</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, os_core_unix.o(.text.pj_atomic_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pj_atomic_create &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
</UL>

<P><STRONG><a name="[7b3]"></a>pj_atomic_dec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_atomic_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_atomic_dec &rArr; pj_atomic_dec_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[5a6]"></a>pj_atomic_dec_and_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_atomic_dec_and_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_atomic_dec_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_dec_ref
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_raw_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_callback
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_dec_ref
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[5a8]"></a>pj_atomic_destroy</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_atomic_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_destroy
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
</UL>

<P><STRONG><a name="[59e]"></a>pj_atomic_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_atomic_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_atomic_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_idle_callback
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
</UL>

<P><STRONG><a name="[5a4]"></a>pj_atomic_inc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_atomic_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc_and_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_ref
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_ref
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_add_ref
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[7b4]"></a>pj_atomic_inc_and_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_atomic_inc_and_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
</UL>

<P><STRONG><a name="[7b5]"></a>pj_atomic_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_atomic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pj_atomic_set &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>

<P><STRONG><a name="[7be]"></a>pj_caching_pool_destroy</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, pool_caching.o(.text.pj_caching_pool_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_caching_pool_destroy &rArr; pj_pool_destroy_int &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_null_mutex
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_destroy_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[7c0]"></a>pj_caching_pool_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, pool_caching.o(.text.pj_caching_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_caching_pool_init &rArr; pj_lock_create_simple_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_simple_mutex
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_on_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[5f7]"></a>pj_cis_add_alpha</STRONG> (Thumb, 1036 bytes, Stack size 8 bytes, scanner.o(.text.pj_cis_add_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_cis_add_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[a38]"></a>pj_cis_add_cis</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, scanner.o(.text.pj_cis_add_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_cis_add_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
</UL>

<P><STRONG><a name="[5f8]"></a>pj_cis_add_num</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, scanner.o(.text.pj_cis_add_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_cis_add_num
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[5f9]"></a>pj_cis_add_str</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, scanner.o(.text.pj_cis_add_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_cis_add_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[5f5]"></a>pj_cis_buf_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, scanner.o(.text.pj_cis_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_cis_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[5fe]"></a>pj_cis_del_str</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, scanner.o(.text.pj_cis_del_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_cis_del_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[5fd]"></a>pj_cis_dup</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, scanner.o(.text.pj_cis_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_cis_dup
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[5f6]"></a>pj_cis_init</STRONG> (Thumb, 422 bytes, Stack size 0 bytes, scanner.o(.text.pj_cis_init))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_dup
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[5fc]"></a>pj_cis_invert</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, scanner.o(.text.pj_cis_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_cis_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[7c4]"></a>pj_crc32_calc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, crc32.o(.text.pj_crc32_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pj_crc32_calc &rArr; pj_crc32_update
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_update
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_check
</UL>

<P><STRONG><a name="[a5a]"></a>pj_crc32_final</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crc32.o(.text.pj_crc32_final))
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[a59]"></a>pj_crc32_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, crc32.o(.text.pj_crc32_init))
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[7c5]"></a>pj_crc32_update</STRONG> (Thumb, 730 bytes, Stack size 20 bytes, crc32.o(.text.pj_crc32_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_crc32_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_calc
</UL>

<P><STRONG><a name="[517]"></a>pj_create_random_string</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, string.o(.text.pj_create_random_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pj_create_random_string &rArr; pj_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_val_to_hex_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
</UL>

<P><STRONG><a name="[47e]"></a>pj_create_unique_string</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guid.o(.text.pj_create_unique_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pj_create_unique_string &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
</UL>

<P><STRONG><a name="[4fe]"></a>pj_dns_get_type_name</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, dns.o(.text.pj_dns_get_type_name))
<BR><BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
</UL>

<P><STRONG><a name="[7c8]"></a>pj_dns_make_query</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, dns.o(.text.pj_dns_make_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_dns_make_query &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
</UL>

<P><STRONG><a name="[7c9]"></a>pj_dns_packet_dup</STRONG> (Thumb, 700 bytes, Stack size 184 bytes, dns.o(.text.pj_dns_packet_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = pj_dns_packet_dup &rArr; copy_rr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_rr
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
</UL>

<P><STRONG><a name="[4f8]"></a>pj_dns_parse_addr_response</STRONG> (Thumb, 660 bytes, Stack size 56 bytes, resolver.o(.text.pj_dns_parse_addr_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pj_dns_parse_addr_response &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_a_callback
</UL>

<P><STRONG><a name="[74a]"></a>pj_dns_parse_packet</STRONG> (Thumb, 916 bytes, Stack size 80 bytes, dns.o(.text.pj_dns_parse_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_dns_parse_packet &rArr; parse_rr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_len
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
</UL>

<P><STRONG><a name="[4ff]"></a>pj_dns_resolver_cancel_query</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, resolver.o(.text.pj_dns_resolver_cancel_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pj_dns_resolver_cancel_query &rArr; pj_timer_heap_cancel_if_active &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
</UL>
<BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_cancel_query
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
</UL>

<P><STRONG><a name="[7ca]"></a>pj_dns_resolver_create</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, resolver.o(.text.pj_dns_resolver_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = pj_dns_resolver_create &rArr; pj_dns_resolver_destroy &rArr; pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create_w_handler
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_in
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_resolver
</UL>

<P><STRONG><a name="[7cc]"></a>pj_dns_resolver_destroy</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, resolver.o(.text.pj_dns_resolver_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pj_dns_resolver_destroy &rArr; pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_this
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_next
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_first
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolver_destroy
</UL>

<P><STRONG><a name="[7d2]"></a>pj_dns_resolver_set_ns</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, resolver.o(.text.pj_dns_resolver_set_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_dns_resolver_set_ns &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[4fd]"></a>pj_dns_resolver_start_query</STRONG> (Thumb, 716 bytes, Stack size 192 bytes, resolver.o(.text.pj_dns_resolver_start_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_get_type_name
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
</UL>

<P><STRONG><a name="[7d3]"></a>pj_dns_srv_cancel_query</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, srv_resolver.o(.text.pj_dns_srv_cancel_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_dns_srv_cancel_query &rArr; pj_dns_resolver_cancel_query &rArr; pj_timer_heap_cancel_if_active &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_cancel_query
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sock_destructor
</UL>

<P><STRONG><a name="[7d4]"></a>pj_dns_srv_resolve</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, srv_resolver.o(.text.pj_dns_srv_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_get_type_name
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
</UL>

<P><STRONG><a name="[40b]"></a>pj_elapsed_msec</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_timestamp_common.o(.text.pj_elapsed_msec))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pj_elapsed_msec &rArr; elapsed_msec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_msec
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[7d5]"></a>pj_elapsed_time</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, os_timestamp_common.o(.text.pj_elapsed_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pj_elapsed_time &rArr; elapsed_msec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_msec
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
</UL>

<P><STRONG><a name="[4a3]"></a>pj_enter_critical_section</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_core_unix.o(.text.pj_enter_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = pj_enter_critical_section &rArr; pj_mutex_lock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_free
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_alloc
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_sip_parser
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[7d6]"></a>pj_enum_ip_interface</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, ip_helper_generic.o(.text.pj_enum_ip_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = pj_enum_ip_interface &rArr; if_enum_by_af &rArr; pj_getdefaultipinterface &rArr; pj_getipinterface &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_enum_by_af
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface2
</UL>

<P><STRONG><a name="[7d7]"></a>pj_enum_ip_interface2</STRONG> (Thumb, 580 bytes, Stack size 36 bytes, ip_helper_generic.o(.text.pj_enum_ip_interface2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1812<LI>Call Chain = pj_enum_ip_interface2 &rArr; pj_enum_ip_interface &rArr; if_enum_by_af &rArr; pj_getdefaultipinterface &rArr; pj_getipinterface &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ipv6_deprecated
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_option_default
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
</UL>

<P><STRONG><a name="[7da]"></a>pj_errno_clear_handlers</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, errno.o(.text.pj_errno_clear_handlers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_errno_clear_handlers &rArr; pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
</UL>

<P><STRONG><a name="[5fb]"></a>pj_exception_id_alloc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, except.o(.text.pj_exception_id_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_exception_id_alloc &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[4a5]"></a>pj_exception_id_free</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, except.o(.text.pj_exception_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_exception_id_free &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_sip_parser
</UL>

<P><STRONG><a name="[7db]"></a>pj_exception_id_name</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, except.o(.text.pj_exception_id_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_exception_id_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
</UL>

<P><STRONG><a name="[7dc]"></a>pj_file_close</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, file_io_ansi.o(.text.pj_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_file_close &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[7dd]"></a>pj_file_open</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, file_io_ansi.o(.text.pj_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_file_open &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[6bd]"></a>pj_file_write</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, file_io_ansi.o(.text.pj_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pj_file_write &rArr; fwrite &rArr; fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_writer
</UL>

<P><STRONG><a name="[7c7]"></a>pj_generate_unique_string</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, guid_simple.o(.text.pj_generate_unique_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pj_generate_unique_string &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_guid_chars
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[822]"></a>pj_get_netos_error</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, os_error_unix.o(.text.pj_get_netos_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_get_netos_error
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
</UL>

<P><STRONG><a name="[8c0]"></a>pj_get_os_error</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, os_error_unix.o(.text.pj_get_os_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_get_os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
</UL>

<P><STRONG><a name="[7e0]"></a>pj_get_sys_info</STRONG> (Thumb, 330 bytes, Stack size 184 bytes, os_info.o(.text.pj_get_sys_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pj_get_sys_info &rArr; ver_info &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_info
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[40a]"></a>pj_get_timestamp</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, os_timestamp_posix.o(.text.pj_get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pj_get_timestamp &rArr; clock_gettime &rArr; UTILS_NanosecondsToTimespec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtp2
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_start
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_update
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[50d]"></a>pj_get_timestamp_freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, os_timestamp_posix.o(.text.pj_get_timestamp_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_get_timestamp_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_msec
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
</UL>

<P><STRONG><a name="[aac]"></a>pj_get_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text.pj_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[7e3]"></a>pj_getaddrinfo</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, addr_resolv_sock.o(.text.pj_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostbyname
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[5cc]"></a>pj_getdefaultipinterface</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, sock_common.o(.text.pj_getdefaultipinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = pj_getdefaultipinterface &rArr; pj_getipinterface &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_enum_by_af
</UL>

<P><STRONG><a name="[7e4]"></a>pj_gethostbyname</STRONG> (Thumb, 208 bytes, Stack size 160 bytes, addr_resolv_sock.o(.text.pj_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
</UL>

<P><STRONG><a name="[594]"></a>pj_gethostip</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sock_common.o(.text.pj_gethostip))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = pj_gethostip &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostname
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_interface
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[5ee]"></a>pj_gethostname</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sock_bsd.o(.text.pj_gethostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_gethostname &rArr; gethostname
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostname
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
</UL>

<P><STRONG><a name="[592]"></a>pj_getipinterface</STRONG> (Thumb, 404 bytes, Stack size 184 bytes, sock_common.o(.text.pj_getipinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = pj_getipinterface &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_connect
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getdefaultipinterface
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_interface
</UL>

<P><STRONG><a name="[7e8]"></a>pj_getpid</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_core_unix.o(.text.pj_getpid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_getpid
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpid
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_init
</UL>

<P><STRONG><a name="[3fb]"></a>pj_gettickcount</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, os_timestamp_common.o(.text.pj_gettickcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pj_gettickcount &rArr; pj_elapsed_time &rArr; elapsed_msec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_time
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_set_timestamp32
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_closing_keys
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_sleep
</UL>

<P><STRONG><a name="[3ab]"></a>pj_gettimeofday</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_time_unix.o(.text.pj_gettimeofday))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_registration
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[41e]"></a>pj_grp_lock_acquire</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lock.o(.text.pj_grp_lock_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pj_grp_lock_acquire &rArr; grp_lock_acquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_cancel_query
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_credential
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_timer_cb
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_send_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cache_timeout
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_sendto
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pending_send
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_cancel_req
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_respond
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_send_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_retransmit_req
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_of_cand_ind_timer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_send_msg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_has_usage
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
</UL>

<P><STRONG><a name="[45e]"></a>pj_grp_lock_add_handler</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lock.o(.text.pj_grp_lock_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pj_grp_lock_add_handler &rArr; grp_lock_add_handler &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_to_ioqueue
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
</UL>

<P><STRONG><a name="[45d]"></a>pj_grp_lock_add_ref</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lock.o(.text.pj_grp_lock_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4560<LI>Call Chain = pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_rx_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_data
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_to_ioqueue
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
</UL>

<P><STRONG><a name="[45f]"></a>pj_grp_lock_create</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, lock.o(.text.pj_grp_lock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = pj_grp_lock_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_destroy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create_w_handler
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_to_ioqueue
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
</UL>

<P><STRONG><a name="[7cb]"></a>pj_grp_lock_create_w_handler</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lock.o(.text.pj_grp_lock_create_w_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = pj_grp_lock_create_w_handler &rArr; pj_grp_lock_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
</UL>

<P><STRONG><a name="[417]"></a>pj_grp_lock_dec_ref</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lock.o(.text.pj_grp_lock_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_release
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tdata_on_destroy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_rx_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_data
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
</UL>

<P><STRONG><a name="[7ed]"></a>pj_grp_lock_del_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lock.o(.text.pj_grp_lock_del_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pj_grp_lock_del_handler &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_release
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
</UL>

<P><STRONG><a name="[4a7]"></a>pj_grp_lock_get_ref</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lock.o(.text.pj_grp_lock_get_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_grp_lock_get_ref &rArr; pj_atomic_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[41f]"></a>pj_grp_lock_release</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lock.o(.text.pj_grp_lock_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_cancel_query
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_credential
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_timer_cb
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_send_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cache_timeout
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_sendto
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pending_send
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_cancel_req
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_respond
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_send_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_retransmit_req
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_of_cand_ind_timer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_send_msg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
</UL>

<P><STRONG><a name="[7ee]"></a>pj_grp_lock_tryacquire</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lock.o(.text.pj_grp_lock_tryacquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_grp_lock_tryacquire &rArr; grp_lock_tryacquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_trylock_key
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
</UL>

<P><STRONG><a name="[558]"></a>pj_hash_calc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hash.o(.text.pj_hash_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_hash_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_handler
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
</UL>

<P><STRONG><a name="[47f]"></a>pj_hash_calc_tolower</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hash.o(.text.pj_hash_calc_tolower))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pj_hash_calc_tolower &rArr; pj_tolower
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_handler
</UL>

<P><STRONG><a name="[6da]"></a>pj_hash_count</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hash.o(.text.pj_hash_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_hash_count
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
</UL>

<P><STRONG><a name="[6dd]"></a>pj_hash_create</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, hash.o(.text.pj_hash_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pj_hash_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_getobjname
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_load
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
</UL>

<P><STRONG><a name="[6d6]"></a>pj_hash_first</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, hash.o(.text.pj_hash_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pj_hash_first
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
</UL>

<P><STRONG><a name="[4b6]"></a>pj_hash_get</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, hash.o(.text.pj_hash_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_hash_get &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>

<P><STRONG><a name="[55c]"></a>pj_hash_get_lower</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, hash.o(.text.pj_hash_get_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_hash_get_lower &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
</UL>

<P><STRONG><a name="[6d9]"></a>pj_hash_next</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hash.o(.text.pj_hash_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_hash_next
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
</UL>

<P><STRONG><a name="[4b7]"></a>pj_hash_set</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, hash.o(.text.pj_hash_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
</UL>

<P><STRONG><a name="[6d5]"></a>pj_hash_set_lower</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, hash.o(.text.pj_hash_set_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pj_hash_set_lower &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
</UL>

<P><STRONG><a name="[4b8]"></a>pj_hash_set_np</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, hash.o(.text.pj_hash_set_np))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pj_hash_set_np &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
</UL>

<P><STRONG><a name="[7ef]"></a>pj_hash_set_np_lower</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, hash.o(.text.pj_hash_set_np_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pj_hash_set_np_lower &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
</UL>

<P><STRONG><a name="[6d8]"></a>pj_hash_this</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hash.o(.text.pj_hash_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_hash_this
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
</UL>

<P><STRONG><a name="[7f0]"></a>pj_hmac_sha1_final</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hmac_sha1.o(.text.pj_hmac_sha1_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_hmac_sha1_final &rArr; pj_sha1_update &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_final
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_update
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
</UL>

<P><STRONG><a name="[7f4]"></a>pj_hmac_sha1_init</STRONG> (Thumb, 478 bytes, Stack size 144 bytes, hmac_sha1.o(.text.pj_hmac_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pj_hmac_sha1_init &rArr; pj_sha1_update &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_final
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_update
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
</UL>

<P><STRONG><a name="[7f5]"></a>pj_hmac_sha1_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac_sha1.o(.text.pj_hmac_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pj_hmac_sha1_update &rArr; pj_sha1_update &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
</UL>

<P><STRONG><a name="[49c]"></a>pj_htonl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sock_bsd.o(.text.pj_htonl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_in
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_create_bind_req
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_encode_rtp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_xored_sockaddr_attr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_sockaddr_attr
</UL>

<P><STRONG><a name="[461]"></a>pj_htons</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sock_bsd.o(.text.pj_htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_htons
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_port
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_in
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_create_bind_req
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_len
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_encode_rtp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_build_nack
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_bye
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_sdes
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_xored_sockaddr_attr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unknown_attr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_sockaddr_attr
</UL>

<P><STRONG><a name="[75d]"></a>pj_ice_calc_foundation</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, ice_session.o(.text.pj_ice_calc_foundation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pj_ice_calc_foundation &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[73b]"></a>pj_ice_get_cand_type_name</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ice_session.o(.text.pj_ice_get_cand_type_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_get_cand_type_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[75e]"></a>pj_ice_sess_add_cand</STRONG> (Thumb, 684 bytes, Stack size 144 bytes, ice_session.o(.text.pj_ice_sess_add_cand))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = pj_ice_sess_add_cand &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[761]"></a>pj_ice_sess_change_role</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ice_session.o(.text.pj_ice_sess_change_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = pj_ice_sess_change_role &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_change_role
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
</UL>

<P><STRONG><a name="[7f6]"></a>pj_ice_sess_create</STRONG> (Thumb, 712 bytes, Stack size 112 bytes, ice_session.o(.text.pj_ice_sess_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5048<LI>Call Chain = pj_ice_sess_create &rArr; destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
</UL>

<P><STRONG><a name="[7fa]"></a>pj_ice_sess_create_check_list</STRONG> (Thumb, 324 bytes, Stack size 176 bytes, ice_session.o(.text.pj_ice_sess_create_check_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 5368<LI>Call Chain = pj_ice_sess_create_check_list &rArr; add_rcand_and_update_checklist &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
</UL>

<P><STRONG><a name="[4ab]"></a>pj_ice_sess_destroy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ice_session.o(.text.pj_ice_sess_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = pj_ice_sess_destroy &rArr; destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
</UL>

<P><STRONG><a name="[7fb]"></a>pj_ice_sess_detach_grp_lock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ice_session.o(.text.pj_ice_sess_detach_grp_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pj_ice_sess_detach_grp_lock &rArr; pj_grp_lock_del_handler &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_del_handler
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
</UL>

<P><STRONG><a name="[7fc]"></a>pj_ice_sess_on_rx_pkt</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, ice_session.o(.text.pj_ice_sess_on_rx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5288<LI>Call Chain = pj_ice_sess_on_rx_pkt &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_check
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_rx_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_data
</UL>

<P><STRONG><a name="[808]"></a>pj_ice_sess_options_default</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ice_session.o(.text.pj_ice_sess_options_default))
<BR><BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
</UL>

<P><STRONG><a name="[a7e]"></a>pj_ice_sess_role_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ice_session.o(.text.pj_ice_sess_role_name))
<BR><BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[7fd]"></a>pj_ice_sess_send_data</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, ice_session.o(.text.pj_ice_sess_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_ice_sess_send_data &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[7fe]"></a>pj_ice_sess_set_options</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ice_session.o(.text.pj_ice_sess_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = pj_ice_sess_set_options &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_set_options
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
</UL>

<P><STRONG><a name="[7ff]"></a>pj_ice_sess_set_prefs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ice_session.o(.text.pj_ice_sess_set_prefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_ice_sess_set_prefs &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
</UL>

<P><STRONG><a name="[800]"></a>pj_ice_sess_start_check</STRONG> (Thumb, 992 bytes, Stack size 64 bytes, ice_session.o(.text.pj_ice_sess_start_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 5384<LI>Call Chain = pj_ice_sess_start_check &rArr; handle_incoming_check &rArr; perform_check &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
</UL>

<P><STRONG><a name="[801]"></a>pj_ice_sess_update_check_list</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ice_session.o(.text.pj_ice_sess_update_check_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 5224<LI>Call Chain = pj_ice_sess_update_check_list &rArr; add_rcand_and_update_checklist &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
</UL>

<P><STRONG><a name="[802]"></a>pj_ice_strans_cfg_copy</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ice_strans.o(.text.pj_ice_strans_cfg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pj_ice_strans_cfg_copy &rArr; pj_stun_auth_cred_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
</UL>

<P><STRONG><a name="[804]"></a>pj_ice_strans_cfg_default</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ice_strans.o(.text.pj_ice_strans_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pj_ice_strans_cfg_default &rArr; pj_str
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_cfg_default
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_alloc_param_default
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_cfg_default
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_options_default
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[809]"></a>pj_ice_strans_change_role</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_change_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = pj_ice_strans_change_role &rArr; pj_ice_sess_change_role &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_change_role
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
</UL>

<P><STRONG><a name="[80a]"></a>pj_ice_strans_create</STRONG> (Thumb, 2516 bytes, Stack size 552 bytes, ice_strans.o(.text.pj_ice_strans_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 6136<LI>Call Chain = pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_copy
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
</UL>

<P><STRONG><a name="[80f]"></a>pj_ice_strans_destroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ice_strans.o(.text.pj_ice_strans_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5120<LI>Call Chain = pj_ice_strans_destroy &rArr; destroy_ice_st &rArr; pj_turn_sock_destroy &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
</UL>

<P><STRONG><a name="[518]"></a>pj_ice_strans_enum_cands</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ice_strans.o(.text.pj_ice_strans_enum_cands))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_ice_strans_enum_cands &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[810]"></a>pj_ice_strans_get_cands_count</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ice_strans.o(.text.pj_ice_strans_get_cands_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_ice_strans_get_cands_count &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_has_new_cand
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
</UL>

<P><STRONG><a name="[511]"></a>pj_ice_strans_get_def_cand</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, ice_strans.o(.text.pj_ice_strans_get_def_cand))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pj_ice_strans_get_def_cand &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_no_ice_in_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[811]"></a>pj_ice_strans_get_grp_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_grp_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_get_grp_lock &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
</UL>

<P><STRONG><a name="[812]"></a>pj_ice_strans_get_options</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_get_options &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
</UL>

<P><STRONG><a name="[51f]"></a>pj_ice_strans_get_role</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_get_role &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[813]"></a>pj_ice_strans_get_running_comp_cnt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_running_comp_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_get_running_comp_cnt &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_has_new_cand
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[51b]"></a>pj_ice_strans_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[516]"></a>pj_ice_strans_get_ufrag_pwd</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ice_strans.o(.text.pj_ice_strans_get_ufrag_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pj_ice_strans_get_ufrag_pwd &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[5bd]"></a>pj_ice_strans_get_user_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_new_candidate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_ice_complete
</UL>

<P><STRONG><a name="[51c]"></a>pj_ice_strans_get_valid_pair</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_get_valid_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_get_valid_pair &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[515]"></a>pj_ice_strans_has_sess</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_has_sess))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_has_sess &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_has_new_cand
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
</UL>

<P><STRONG><a name="[814]"></a>pj_ice_strans_init_ice</STRONG> (Thumb, 708 bytes, Stack size 120 bytes, ice_strans.o(.text.pj_ice_strans_init_ice))
<BR><BR>[Stack]<UL><LI>Max Depth = 5168<LI>Call Chain = pj_ice_strans_init_ice &rArr; pj_ice_sess_create &rArr; destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_log
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_prefs
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_options
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
</UL>

<P><STRONG><a name="[815]"></a>pj_ice_strans_sendto2</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ice_strans.o(.text.pj_ice_strans_sendto2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = pj_ice_strans_sendto2 &rArr; send_data &rArr; pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtcp2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtcp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
</UL>

<P><STRONG><a name="[51a]"></a>pj_ice_strans_sess_is_complete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_sess_is_complete))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
</UL>

<P><STRONG><a name="[922]"></a>pj_ice_strans_sess_is_running</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_sess_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
</UL>

<P><STRONG><a name="[816]"></a>pj_ice_strans_set_options</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ice_strans.o(.text.pj_ice_strans_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = pj_ice_strans_set_options &rArr; pj_ice_sess_set_options &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_options
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
</UL>

<P><STRONG><a name="[817]"></a>pj_ice_strans_start_ice</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ice_strans.o(.text.pj_ice_strans_start_ice))
<BR><BR>[Stack]<UL><LI>Max Depth = 5488<LI>Call Chain = pj_ice_strans_start_ice &rArr; pj_ice_strans_update_check_list &rArr; setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
</UL>

<P><STRONG><a name="[81a]"></a>pj_ice_strans_state_name</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ice_strans.o(.text.pj_ice_strans_state_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_ice_strans_state_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[81b]"></a>pj_ice_strans_stop_ice</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ice_strans.o(.text.pj_ice_strans_stop_ice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = pj_ice_strans_stop_ice &rArr; pj_ice_sess_destroy &rArr; destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_ice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
</UL>

<P><STRONG><a name="[81c]"></a>pj_ice_strans_stun_cfg_default</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ice_strans.o(.text.pj_ice_strans_stun_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_ice_strans_stun_cfg_default &rArr; pj_stun_sock_cfg_default
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_cfg_default
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[81d]"></a>pj_ice_strans_turn_cfg_default</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ice_strans.o(.text.pj_ice_strans_turn_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_ice_strans_turn_cfg_default &rArr; pj_turn_sock_cfg_default
</UL>
<BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_cfg_default
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_alloc_param_default
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[818]"></a>pj_ice_strans_update_check_list</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, ice_strans.o(.text.pj_ice_strans_update_check_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448<LI>Call Chain = pj_ice_strans_update_check_list &rArr; setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
</UL>

<P><STRONG><a name="[81e]"></a>pj_ice_strans_update_comp_cnt</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ice_strans.o(.text.pj_ice_strans_update_comp_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5112<LI>Call Chain = pj_ice_strans_update_comp_cnt &rArr; pj_turn_sock_destroy &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
</UL>

<P><STRONG><a name="[81f]"></a>pj_inet_addr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sock_common.o(.text.pj_inet_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pj_inet_addr &rArr; pj_inet_aton &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
</UL>

<P><STRONG><a name="[820]"></a>pj_inet_aton</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, sock_bsd.o(.text.pj_inet_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pj_inet_aton &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_addr
</UL>

<P><STRONG><a name="[3c8]"></a>pj_inet_ntop</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_inet_ntop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_inet_ntop &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntop
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_netos_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_string
</UL>

<P><STRONG><a name="[500]"></a>pj_inet_pton</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, sock_bsd.o(.text.pj_inet_pton))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pj_inet_pton &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_pton
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_netos_error
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[823]"></a>pj_init</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, os_core_unix.o(.text.pj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_init &rArr; pj_generate_unique_string &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_alloc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_init
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[67f]"></a>pj_ioqueue_accept</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, ioqueue_select.o(.text.pj_ioqueue_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pj_ioqueue_accept &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_accept
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_accept
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_accept_complete
</UL>

<P><STRONG><a name="[826]"></a>pj_ioqueue_clear_key</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ioqueue_select.o(.text.pj_ioqueue_clear_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pj_ioqueue_clear_key &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
</UL>

<P><STRONG><a name="[7ab]"></a>pj_ioqueue_connect</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, ioqueue_select.o(.text.pj_ioqueue_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pj_ioqueue_connect &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_connect
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_connect
</UL>

<P><STRONG><a name="[7cf]"></a>pj_ioqueue_create</STRONG> (Thumb, 514 bytes, Stack size 56 bytes, ioqueue_select.o(.text.pj_ioqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = pj_ioqueue_create &rArr; pj_lock_create_simple_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_simple_mutex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ZERO
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_lock
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescan_fdset
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[7d1]"></a>pj_ioqueue_destroy</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ioqueue_select.o(.text.pj_ioqueue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pj_ioqueue_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[67e]"></a>pj_ioqueue_get_user_data</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ioqueue_select.o(.text.pj_ioqueue_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pj_ioqueue_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_accept_complete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_connect_complete
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_write_complete
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_read_complete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rtp_data_sent
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_write_complete
</UL>

<P><STRONG><a name="[b3d]"></a>pj_ioqueue_is_pending</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ioqueue_select.o(.text.pj_ioqueue_is_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pj_ioqueue_is_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
</UL>

<P><STRONG><a name="[7a3]"></a>pj_ioqueue_lock_key</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_ioqueue_lock_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pj_ioqueue_lock_key &rArr; pj_grp_lock_acquire &rArr; grp_lock_acquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_connect
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
</UL>

<P><STRONG><a name="[72d]"></a>pj_ioqueue_op_key_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_ioqueue_op_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_ioqueue_op_key_init &rArr; pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[82a]"></a>pj_ioqueue_poll</STRONG> (Thumb, 904 bytes, Stack size 640 bytes, ioqueue_select.o(.text.pj_ioqueue_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 5384<LI>Call Chain = pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ISSET
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_select
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_COUNT
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_netos_error
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_exception_event
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_accept
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_counter
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_connect
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_closing_keys
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_read
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_proc
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
</UL>

<P><STRONG><a name="[680]"></a>pj_ioqueue_recv</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, ioqueue_select.o(.text.pj_ioqueue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_ioqueue_recv &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recv
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_read_complete
</UL>

<P><STRONG><a name="[681]"></a>pj_ioqueue_recvfrom</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, ioqueue_select.o(.text.pj_ioqueue_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recvfrom
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_read_complete
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_async_read
</UL>

<P><STRONG><a name="[82f]"></a>pj_ioqueue_register_sock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ioqueue_select.o(.text.pj_ioqueue_register_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_ioqueue_register_sock &rArr; pj_ioqueue_register_sock2 &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
</UL>

<P><STRONG><a name="[7a7]"></a>pj_ioqueue_register_sock2</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, ioqueue_select.o(.text.pj_ioqueue_register_sock2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pj_ioqueue_register_sock2 &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlsocket
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_netos_error
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_closing_keys
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescan_fdset
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_to_ioqueue
</UL>

<P><STRONG><a name="[7a8]"></a>pj_ioqueue_send</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, ioqueue_select.o(.text.pj_ioqueue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_send
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_remaining
</UL>

<P><STRONG><a name="[75a]"></a>pj_ioqueue_sendto</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, ioqueue_select.o(.text.pj_ioqueue_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_sendto
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_sendto
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtcp2
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtcp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_send_msg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_msg
</UL>

<P><STRONG><a name="[67d]"></a>pj_ioqueue_set_concurrency</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_ioqueue_set_concurrency))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_ioqueue_set_concurrency &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
</UL>

<P><STRONG><a name="[829]"></a>pj_ioqueue_set_lock</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ioqueue_select.o(.text.pj_ioqueue_set_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pj_ioqueue_set_lock &rArr; pj_lock_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
</UL>

<P><STRONG><a name="[66c]"></a>pj_ioqueue_trylock_key</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_ioqueue_trylock_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_ioqueue_trylock_key &rArr; pj_grp_lock_tryacquire &rArr; grp_lock_tryacquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_tryacquire
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_tryacquire
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_exception_event
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
</UL>

<P><STRONG><a name="[66d]"></a>pj_ioqueue_unlock_key</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_ioqueue_unlock_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_exception_event
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_connect
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
</UL>

<P><STRONG><a name="[75b]"></a>pj_ioqueue_unregister</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, ioqueue_select.o(.text.pj_ioqueue_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_CLR
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
</UL>

<P><STRONG><a name="[4a4]"></a>pj_leave_critical_section</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_core_unix.o(.text.pj_leave_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_free
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_alloc
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_sip_parser
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[40e]"></a>pj_list_erase</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, list_1.o(.text.pj_list_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_list_erase &rArr; pj_link_node
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_link_node
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_del_handler
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_closing_keys
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pool
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_unregister_tpfactory
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_pending_call_answer
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[8f7]"></a>pj_list_find_node</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, list_1.o(.text.pj_list_find_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_list_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_unregister_tpfactory
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_set_current
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
</UL>

<P><STRONG><a name="[450]"></a>pj_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, list_1.o(.text.pj_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_block
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[3c2]"></a>pj_list_insert_before</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, list_1.o(.text.pj_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_list_insert_before &rArr; pj_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_attr
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_dealloc_codec
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_uri
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_assign
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_register_tpfactory
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_add_part
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_clone_part
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_clone_data
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_clone
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_route_set
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_unpublish
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_route_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_add_header
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_headers
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_headers
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_med_event_cb
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>

<P><STRONG><a name="[837]"></a>pj_list_insert_nodes_after</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, list_1.o(.text.pj_list_insert_nodes_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_list_insert_nodes_after &rArr; pj_link_node
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_link_node
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_nodes_before
</UL>

<P><STRONG><a name="[617]"></a>pj_list_insert_nodes_before</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, list_1.o(.text.pj_list_insert_nodes_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pj_list_insert_nodes_before &rArr; pj_list_insert_nodes_after &rArr; pj_link_node
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_nodes_after
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[838]"></a>pj_list_merge_last</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, list_1.o(.text.pj_list_merge_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_list_merge_last &rArr; pj_link_node
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_link_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
</UL>

<P><STRONG><a name="[9b4]"></a>pj_list_search</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, list_1.o(.text.pj_list_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_list_search
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
</UL>

<P><STRONG><a name="[985]"></a>pj_list_size</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, list_1.o(.text.pj_list_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pj_list_size
</UL>
<BR>[Called By]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_cmp
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
</UL>

<P><STRONG><a name="[425]"></a>pj_lock_acquire</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lock.o(.text.pj_lock_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_heap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_callback
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_unregister_tpfactory
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_register_tpfactory
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_state_callback
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_idle_callback
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_delay_before_refresh
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_update_contact
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
</UL>

<P><STRONG><a name="[7bf]"></a>pj_lock_create_null_mutex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lock.o(.text.pj_lock_create_null_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_lock_create_null_mutex &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
</UL>

<P><STRONG><a name="[7ec]"></a>pj_lock_create_recursive_mutex</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lock.o(.text.pj_lock_create_recursive_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
</UL>

<P><STRONG><a name="[7c3]"></a>pj_lock_create_simple_mutex</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lock.o(.text.pj_lock_create_simple_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pj_lock_create_simple_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_init
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
</UL>

<P><STRONG><a name="[5a7]"></a>pj_lock_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lock.o(.text.pj_lock_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_lock_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_destroy
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_lock
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_destroy
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_set_lock
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_destroy
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_destroy
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_destroy
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_on_destroy
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
</UL>

<P><STRONG><a name="[428]"></a>pj_lock_release</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lock.o(.text.pj_lock_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_lock_release &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_destroy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_release
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_destroy
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_add_to_set
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_remove_from_set
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_timer_heap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_callback
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_unregister_tpfactory
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_register_tpfactory
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_state_callback
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_idle_callback
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_delay_before_refresh
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_update_contact
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
</UL>

<P><STRONG><a name="[5aa]"></a>pj_lock_tryacquire</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lock.o(.text.pj_lock_tryacquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_lock_tryacquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_trylock_key
</UL>

<P><STRONG><a name="[667]"></a>pj_log</STRONG> (Thumb, 1454 bytes, Stack size 4128 bytes, log.o(.text.pj_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 4424<LI>Call Chain = pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_get_name
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa_pad
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_decode
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_logging
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memset
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_indent
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_logging
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_logging_suspended
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_log
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_log_error
</UL>

<P><STRONG><a name="[3a0]"></a>pj_log_1</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, log.o(.text.pj_log_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoi_validate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_cb
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[6d4]"></a>pj_log_2</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, log.o(.text.pj_log_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = pj_log_2 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[399]"></a>pj_log_3</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, log.o(.text.pj_log_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_state
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_accept_complete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_stop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ca_thread_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_start
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_refresh
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_default_param
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_get_dev_info
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_init
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_update_contact_on_ip_change
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[390]"></a>pj_log_4</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, log.o(.text.pj_log_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_init
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_parse_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame3
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_connect_port
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_ice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_start
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_sock_on_destroy
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_indication
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_sess_on_destroy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_on_rx_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_valid_for_msg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_st_on_destroy
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_change_role
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_options
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_of_cand_ind_timer
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_indication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_destroy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_on_destroy
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_layer_destroy
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_pending_bye
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_tx_msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_rx_msg
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup_all
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_retrans_18x
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_redirected
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_media_event
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_timer_cb
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_rx_notify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_clean_up
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_state
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[409]"></a>pj_log_5</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, log.o(.text.pj_log_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_parse_msg
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nameserver_state
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_destroy
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_reset
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shrink_buffer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_apply
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sock_destructor
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_create
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cache_timeout
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_msg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sess_on_destroy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_on_destroy
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uac
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_destroy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_remote_nat_type
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
</UL>

<P><STRONG><a name="[44b]"></a>pj_log_6</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, log.o(.text.pj_log_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_destroy_int
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_block
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_w_grp_lock_dbg
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_has_usage
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
</UL>

<P><STRONG><a name="[841]"></a>pj_log_add_indent</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, log.o(.text.pj_log_add_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pj_log_add_indent &rArr; log_set_indent &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_set_indent
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_raw_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
</UL>

<P><STRONG><a name="[843]"></a>pj_log_get_decor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(.text.pj_log_get_decor))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_write
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
</UL>

<P><STRONG><a name="[38f]"></a>pj_log_get_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, log.o(.text.pj_log_get_level))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_state
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_accept_complete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_destroy_int
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_block
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_init
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_parse_msg
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nameserver_state
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame3
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_destroy
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_reset
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shrink_buffer
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_connect_port
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_detach
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_stop
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_ice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_apply
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_start
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_sock_on_destroy
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_indication
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_sess_on_destroy
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sock_destructor
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_on_rx_msg
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_create
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cache_timeout
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_msg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sess_on_destroy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_valid_for_msg
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_st_on_destroy
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_change_role
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_options
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_of_cand_ind_timer
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_indication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_destroy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_stop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ca_thread_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_start
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_refresh
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_default_param
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_get_dev_info
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_init
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_w_grp_lock_dbg
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_has_usage
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_on_destroy
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_on_destroy
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_layer_destroy
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uac
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_destroy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoi_validate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_pending_bye
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_tx_msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_rx_msg
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup_all
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_retrans_18x
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_remote_nat_type
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_redirected
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_media_event
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_timer_cb
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_update_contact_on_ip_change
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_rx_notify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_state
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_cb
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_clean_up
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_state
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[824]"></a>pj_log_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, log.o(.text.pj_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_log_init &rArr; pj_thread_local_alloc &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atexit
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_set_decor
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_decor
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
</UL>

<P><STRONG><a name="[437]"></a>pj_log_pop_indent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, log.o(.text.pj_log_pop_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pj_log_pop_indent &rArr; pj_log_add_indent &rArr; log_set_indent &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_add_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_fail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_indication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup_all
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hangup_timer_cb
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_redirected
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtmf_callback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtmf_event_callback
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_rx_notify
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_start
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[42f]"></a>pj_log_push_indent</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, log.o(.text.pj_log_push_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pj_log_push_indent &rArr; pj_log_add_indent &rArr; log_set_indent &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_add_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_fail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_indication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup_all
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hangup_timer_cb
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_redirected
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtmf_callback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtmf_event_callback
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_rx_notify
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_start
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[844]"></a>pj_log_set_decor</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, log.o(.text.pj_log_set_decor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_log_set_decor
</UL>
<BR>[Called By]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[abb]"></a>pj_log_set_level</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, log.o(.text.pj_log_set_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_log_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[aba]"></a>pj_log_set_log_func</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, log.o(.text.pj_log_set_log_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_log_set_log_func
</UL>
<BR>[Called By]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[65]"></a>pj_log_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, log_writer_stdout.o(.text.pj_log_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_log_write &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;term_restore_color
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;term_set_color
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_decor
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_writer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.data.log_writer)
</UL>
<P><STRONG><a name="[847]"></a>pj_md5_final</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, md5_1.o(.text.pj_md5_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pj_md5_final &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
</UL>

<P><STRONG><a name="[8a2]"></a>pj_md5_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, md5_1.o(.text.pj_md5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_md5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
</UL>

<P><STRONG><a name="[849]"></a>pj_md5_update</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, md5_1.o(.text.pj_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = pj_md5_update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
</UL>

<P><STRONG><a name="[464]"></a>pj_mutex_create</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mutex_lock
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
</UL>

<P><STRONG><a name="[6dc]"></a>pj_mutex_create_recursive</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_mutex_create_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pj_mutex_create_recursive &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_init
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_load
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
</UL>

<P><STRONG><a name="[828]"></a>pj_mutex_create_simple</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_mutex_create_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_create
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
</UL>

<P><STRONG><a name="[7a]"></a>pj_mutex_destroy</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_destroy
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_destroy
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_create
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_deinit
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_destroy
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_unload
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_layer_destroy
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_destroy
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.data.mutex_lock_template)
</UL>
<P><STRONG><a name="[77]"></a>pj_mutex_lock</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_mutex_lock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_lock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_counter
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_read
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_read
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc_and_get
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_set
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_deinit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_dealloc_codec
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_mgr_distribute_events
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_worker_thread
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_port_info
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sinks
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sources
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_connect_port
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_add_port
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_alloc_codec
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_set_codec_priority
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_find_codecs_by_id
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_codec_info
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_event_callback
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_callback
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pjsua_on_rx_request
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_enum_calls
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_timer_cb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_med_event_cb
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJSUA_LOCK
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.data.mutex_lock_template)
</UL>
<P><STRONG><a name="[78]"></a>pj_mutex_trylock</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_mutex_trylock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_mutex_trylock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_trylock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.data.mutex_lock_template)
</UL>
<P><STRONG><a name="[79]"></a>pj_mutex_unlock</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_counter
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_read
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_read
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc_and_get
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_deinit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_dealloc_codec
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_mgr_distribute_events
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_worker_thread
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_port_info
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sinks
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sources
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_connect_port
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_add_port
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_alloc_codec
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_set_codec_priority
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_find_codecs_by_id
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_codec_info
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_event_callback
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_callback
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pjsua_on_rx_request
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_enum_calls
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_timer_cb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_med_event_cb
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.data.mutex_lock_template)
</UL>
<P><STRONG><a name="[755]"></a>pj_ntohl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sock_bsd.o(.text.pj_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_update2
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_encode_rtp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
</UL>

<P><STRONG><a name="[49b]"></a>pj_ntohs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sock_bsd.o(.text.pj_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_msg_find_attr
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_parse_msg
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_len
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_update2
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_decode_rtp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_parse_nack
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unknown_attr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
</UL>

<P><STRONG><a name="[5be]"></a>pj_perror</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, errno.o(.text.pj_perror))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_ice_complete
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[655]"></a>pj_perror_1</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, errno.o(.text.pj_perror_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror_1 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_perror
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_pending_bye
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[735]"></a>pj_perror_2</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, errno.o(.text.pj_perror_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror_2 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[3b1]"></a>pj_perror_3</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, errno.o(.text.pj_perror_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror_3 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_callback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_update_contact
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
</UL>

<P><STRONG><a name="[4fa]"></a>pj_perror_4</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, errno.o(.text.pj_perror_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_ice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_fail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_socket
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_a_callback
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srv_resolver_cb
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[593]"></a>pj_perror_5</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, errno.o(.text.pj_perror_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror_5 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_interface
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
</UL>

<P><STRONG><a name="[854]"></a>pj_perror_6</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, errno.o(.text.pj_perror_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_perror_6 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
</UL>

<P><STRONG><a name="[39f]"></a>pj_pool_alloc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pool.o(.text.pj_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4584<LI>Call Chain = pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc_from_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mutex_lock
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_create
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str_unescape
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_rr
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_create
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_conn_clone
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_to_rtpmap
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_ssrc
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_clone
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_rtpmap_to_attr
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_create
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_channel
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_attr_clone
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_binary_attr
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_binary_attr_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_uint64_attr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_empty_attr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_binary_attr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_unknown_attr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_errcode_attr
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_msgint_attr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_string_attr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_uint_attr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_sockaddr_attr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_binary_attr
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_shallow_clone
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_clone
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_shallow_clone
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_clone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_shallow_clone
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_clone
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_shallow_clone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_clone
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_clone
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_shallow_clone
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_clone
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_shallow_clone
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_clone
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clen_hdr_clone
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_shallow_clone
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_clone
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_int_hdr_shallow_clone
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_int_hdr_clone
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_shallow_clone
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_clone
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_max_fwd_hdr_create
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_allow_hdr_create
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_supported_hdr_create
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_create
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cid_hdr_create
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_to_hdr_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_from_hdr_create
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_shallow_clone
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_shallow_clone
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_clone
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cred_info_dup
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_assign
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_clone
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_clone
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockaddr_to_host_port
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_create
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_create
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_clone_data
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clone_text_data
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_create
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_unsupported_hdr_create
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_create
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_require_hdr_create
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_route_hdr_create
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rr_hdr_create
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_min_expires_hdr_create
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_create
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clen_hdr_create
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_create
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_clone
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_create
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_create
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_timestamp
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_contact
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_construct
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_add_tuple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_shallow_clone
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_shallow_clone
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_shallow_clone
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_shallow_clone
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_shallow_clone
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_tsx_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
</UL>

<P><STRONG><a name="[855]"></a>pj_pool_alloc_from_block</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pool.o(.text.pj_pool_alloc_from_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_pool_alloc_from_block
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
</UL>

<P><STRONG><a name="[856]"></a>pj_pool_allocate_find</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, pool.o(.text.pj_pool_allocate_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 4560<LI>Call Chain = pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc_from_block
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_block
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>

<P><STRONG><a name="[3c1]"></a>pj_pool_calloc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pool.o(.text.pj_pool_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_accept
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom2
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_attr_new
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_node_new
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_create_bind_req
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_create
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_wsola_create
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_null_port_create
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_create
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_create
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_param_clone
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_create2
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_no_ice_in_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_channel
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_media_clone_deactivate
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_create
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_binary_attr
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_errcode_attr_create
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_msgint_attr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_uint64_attr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_binary_attr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unknown_attr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_errcode_attr
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_msgint_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_string_attr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_uint_attr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sockaddr_attr
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_empty_attr
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_string_attr
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint64_attr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_empty_attr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_set_prefs
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_esp32_audio_factory
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolver_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_uri
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_proxy_authenticate_hdr_create
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_create
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_clone
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_clone
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_proxy_authorization_hdr_create
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_uri_clone
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_clone
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_other_uri_create
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_clone_part
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create_part
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_clone_data
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_create
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_req
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_create_sdp_body
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_body
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_clone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_clone
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_create
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_create
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_update_contact
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_session
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_clone
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_clone
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_headers
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_clone
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>

<P><STRONG><a name="[3cb]"></a>pj_pool_create</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, pool.o(.text.pj_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_init
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_esp32_audio_factory
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>

<P><STRONG><a name="[448]"></a>pj_pool_create_int</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, pool.o(.text.pj_pool_create_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_pool_create_int &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_init_int
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_on_buf
</UL>

<P><STRONG><a name="[749]"></a>pj_pool_create_on_buf</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, pool_buf.o(.text.pj_pool_create_on_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pj_pool_create_on_buf &rArr; pj_pool_create_int &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_buf_initialize
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
</UL>

<P><STRONG><a name="[44e]"></a>pj_pool_destroy_int</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, pool.o(.text.pj_pool_destroy_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_pool_destroy_int &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
</UL>

<P><STRONG><a name="[44a]"></a>pj_pool_get_capacity</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, pool.o(.text.pj_pool_get_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_pool_get_capacity
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[44d]"></a>pj_pool_get_used_size</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, pool.o(.text.pj_pool_get_used_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pj_pool_get_used_size
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_destroy_int
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_block
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
</UL>

<P><STRONG><a name="[44c]"></a>pj_pool_getobjname</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, pool.o(.text.pj_pool_getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_pool_getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_dump_status
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>

<P><STRONG><a name="[449]"></a>pj_pool_init_int</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pool.o(.text.pj_pool_init_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pj_pool_init_int &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
</UL>

<P><STRONG><a name="[3a1]"></a>pj_pool_release</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pool.o(.text.pj_pool_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_pool_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_destroy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_deinit
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_destroy
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_destroy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_destroy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_destroy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_create_stream
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_free_cloned
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_state
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_state
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[44f]"></a>pj_pool_reset</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, pool.o(.text.pj_pool_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = pj_pool_reset &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_release_pool
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
</UL>

<P><STRONG><a name="[3ca]"></a>pj_pool_safe_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pool.o(.text.pj_pool_safe_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_pool_safe_release &rArr; pj_pool_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_resolver_on_destroy
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_destroy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_ice_on_destroy
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_sock_on_destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_sess_on_destroy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sock_destructor
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tdata_on_destroy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sess_on_destroy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_st_on_destroy
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_destroy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_factory_destroy
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_cleanup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_on_destroy
</UL>

<P><STRONG><a name="[611]"></a>pj_pop_exception_handler_</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, except.o(.text.pj_pop_exception_handler_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pj_pop_exception_handler_ &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[60e]"></a>pj_push_exception_handler_</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, except.o(.text.pj_push_exception_handler_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_push_exception_handler_ &rArr; pj_thread_local_alloc &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atexit
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[85c]"></a>pj_qos_get_params</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sock_qos_common.o(.text.pj_qos_get_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_qos_get_params &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_type
</UL>

<P><STRONG><a name="[480]"></a>pj_rand</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rand.o(.text.pj_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_init
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[85e]"></a>pj_register_strerror</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, errno.o(.text.pj_register_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_register_strerror &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_util_init
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_init
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_init
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
</UL>

<P><STRONG><a name="[85f]"></a>pj_rwmutex_create</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_rwmutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pj_rwmutex_create &rArr; pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[861]"></a>pj_rwmutex_destroy</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_rwmutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_rwmutex_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[528]"></a>pj_rwmutex_lock_read</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_rwmutex_lock_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pj_rwmutex_lock_read &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_tx_msg
</UL>

<P><STRONG><a name="[863]"></a>pj_rwmutex_lock_write</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_rwmutex_lock_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
</UL>

<P><STRONG><a name="[529]"></a>pj_rwmutex_unlock_read</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_rwmutex_unlock_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pj_rwmutex_unlock_read &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_tx_msg
</UL>

<P><STRONG><a name="[865]"></a>pj_rwmutex_unlock_write</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_rwmutex_unlock_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = pj_rwmutex_unlock_write &rArr; pj_sem_post &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
</UL>

<P><STRONG><a name="[866]"></a>pj_scan_advance_n</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, scanner.o(.text.pj_scan_advance_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_scan_advance_n &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
</UL>

<P><STRONG><a name="[8de]"></a>pj_scan_fini</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scanner.o(.text.pj_scan_fini))
<BR><BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_rdata
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[608]"></a>pj_scan_get</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, scanner.o(.text.pj_scan_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_scan_get &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_param
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_param_imp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_other_uri
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_req_line
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_status_line
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_expires
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_max_forwards
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_expires
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_len
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_call_id
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
</UL>

<P><STRONG><a name="[60a]"></a>pj_scan_get_char</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scanner.o(.text.pj_scan_get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_scan_get_char &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_param
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_param_imp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_other_uri
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_expires
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_max_forwards
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_expires
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_len
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_call_id
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
</UL>

<P><STRONG><a name="[79d]"></a>pj_scan_get_n</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scanner.o(.text.pj_scan_get_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_scan_get_n &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
</UL>

<P><STRONG><a name="[612]"></a>pj_scan_get_newline</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, scanner.o(.text.pj_scan_get_newline))
<BR><BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_req_line
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_status_line
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_expires
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_max_forwards
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_expires
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_len
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_call_id
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[607]"></a>pj_scan_get_quote</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scanner.o(.text.pj_scan_get_quote))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_scan_get_quote &rArr; pj_scan_get_quotes &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quotes
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_param
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_param_imp
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
</UL>

<P><STRONG><a name="[867]"></a>pj_scan_get_quotes</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, scanner.o(.text.pj_scan_get_quotes))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_scan_get_quotes &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
</UL>

<P><STRONG><a name="[61c]"></a>pj_scan_get_until_ch</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, scanner.o(.text.pj_scan_get_until_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_scan_get_until_ch &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
</UL>

<P><STRONG><a name="[868]"></a>pj_scan_get_until_chr</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, scanner.o(.text.pj_scan_get_until_chr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pj_scan_get_until_chr &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
</UL>

<P><STRONG><a name="[869]"></a>pj_scan_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scanner.o(.text.pj_scan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_scan_init &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_rdata
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[613]"></a>pj_scan_peek</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, scanner.o(.text.pj_scan_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_scan_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[610]"></a>pj_scan_skip_line</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scanner.o(.text.pj_scan_skip_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_scan_skip_line
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[61e]"></a>pj_scan_skip_whitespace</STRONG> (Thumb, 648 bytes, Stack size 8 bytes, scanner.o(.text.pj_scan_skip_whitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_scan_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_n
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_chr
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quotes
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_advance_n
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[86a]"></a>pj_scan_strcmp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scanner.o(.text.pj_scan_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_scan_strcmp &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
</UL>

<P><STRONG><a name="[860]"></a>pj_sem_create</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, os_core_unix.o(.text.pj_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_sem_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_create
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
</UL>

<P><STRONG><a name="[862]"></a>pj_sem_destroy</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, os_core_unix.o(.text.pj_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = pj_sem_destroy &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destroy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_destroy
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
</UL>

<P><STRONG><a name="[864]"></a>pj_sem_post</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, os_core_unix.o(.text.pj_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = pj_sem_post &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_write
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_read
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
</UL>

<P><STRONG><a name="[541]"></a>pj_sem_wait</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, os_core_unix.o(.text.pj_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_write
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_worker_thread
</UL>

<P><STRONG><a name="[8be]"></a>pj_set_os_error</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_error_unix.o(.text.pj_set_os_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_set_os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
</UL>

<P><STRONG><a name="[7f1]"></a>pj_sha1_final</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, sha1_1.o(.text.pj_sha1_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pj_sha1_final &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Transform
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_final
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
</UL>

<P><STRONG><a name="[7f2]"></a>pj_sha1_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sha1_1.o(.text.pj_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_final
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
</UL>

<P><STRONG><a name="[7f3]"></a>pj_sha1_update</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, sha1_1.o(.text.pj_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pj_sha1_update &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Transform
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_final
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_update
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
</UL>

<P><STRONG><a name="[871]"></a>pj_shutdown</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = pj_shutdown &rArr; pj_exception_id_free &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_free
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_errno_clear_handlers
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[672]"></a>pj_sock_accept</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = pj_sock_accept &rArr; accept &rArr; socketAccept &rArr; tcpAccept &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
</UL>

<P><STRONG><a name="[872]"></a>pj_sock_apply_qos</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, sock_qos_common.o(.text.pj_sock_apply_qos))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pj_sock_apply_qos &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_type
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_params
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
</UL>

<P><STRONG><a name="[6ac]"></a>pj_sock_apply_qos2</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, sock_qos_common.o(.text.pj_sock_apply_qos2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = pj_sock_apply_qos2 &rArr; pj_sock_apply_qos &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[588]"></a>pj_sock_bind</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_sock_bind &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_in
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[7cd]"></a>pj_sock_bind_in</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_bind_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pj_sock_bind_in &rArr; pj_sock_bind &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
</UL>

<P><STRONG><a name="[875]"></a>pj_sock_bind_random</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, sock_common.o(.text.pj_sock_bind_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pj_sock_bind_random &rArr; pj_sock_bind &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[589]"></a>pj_sock_close</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sock_bsd.o(.text.pj_sock_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = pj_sock_close &rArr; closesocket &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_accept
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_accept_complete
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[58a]"></a>pj_sock_connect</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sock_bsd.o(.text.pj_sock_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = pj_sock_connect &rArr; connect &rArr; socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_connect
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
</UL>

<P><STRONG><a name="[58b]"></a>pj_sock_getsockname</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sock_bsd.o(.text.pj_sock_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pj_sock_getsockname &rArr; getsockname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_params
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[66f]"></a>pj_sock_getsockopt</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_sock_getsockopt &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_exception_event
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
</UL>

<P><STRONG><a name="[876]"></a>pj_sock_listen</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sock_bsd.o(.text.pj_sock_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pj_sock_listen &rArr; listen &rArr; socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>
<BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
</UL>

<P><STRONG><a name="[675]"></a>pj_sock_recv</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = pj_sock_recv &rArr; recv &rArr; socketReceive &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
</UL>

<P><STRONG><a name="[674]"></a>pj_sock_recvfrom</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, sock_bsd.o(.text.pj_sock_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = pj_sock_recvfrom &rArr; recvfrom &rArr; socketReceiveFrom &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[82d]"></a>pj_sock_select</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, sock_select.o(.text.pj_sock_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pj_sock_select &rArr; select &rArr; socketRegisterEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[678]"></a>pj_sock_send</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = pj_sock_send &rArr; send &rArr; socketSend &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
</UL>

<P><STRONG><a name="[679]"></a>pj_sock_sendto</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, sock_bsd.o(.text.pj_sock_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = pj_sock_sendto &rArr; sendto &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[874]"></a>pj_sock_set_qos_params</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, sock_qos_bsd.o(.text.pj_sock_set_qos_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_sock_set_qos_params &rArr; pj_sock_setsockopt &rArr; setsockopt &rArr; socketSetRxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_type
</UL>

<P><STRONG><a name="[873]"></a>pj_sock_set_qos_type</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sock_qos_bsd.o(.text.pj_sock_set_qos_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_sock_set_qos_type &rArr; pj_qos_get_params &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_qos_get_params
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_params
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos
</UL>

<P><STRONG><a name="[87c]"></a>pj_sock_setsockopt</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pj_sock_setsockopt &rArr; setsockopt &rArr; socketSetRxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_set_qos_params
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_socket
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
</UL>

<P><STRONG><a name="[6ad]"></a>pj_sock_setsockopt_params</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, sock_bsd.o(.text.pj_sock_setsockopt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = pj_sock_setsockopt_params &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[87e]"></a>pj_sock_setsockopt_sobuf</STRONG> (Thumb, 526 bytes, Stack size 64 bytes, sock_common.o(.text.pj_sock_setsockopt_sobuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pj_sock_setsockopt_sobuf &rArr; pj_sock_getsockopt &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockopt
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[586]"></a>pj_sock_socket</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, sock_bsd.o(.text.pj_sock_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = pj_sock_socket &rArr; socket &rArr; socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[396]"></a>pj_sockaddr_cmp</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, sock_common.o(.text.pj_sockaddr_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pj_sockaddr_cmp &rArr; pj_sockaddr_get_port &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface2
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach2
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[6ae]"></a>pj_sockaddr_copy_addr</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sock_common.o(.text.pj_sockaddr_copy_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pj_sockaddr_copy_addr &rArr; pj_sockaddr_get_addr_len &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[408]"></a>pj_sockaddr_cp</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sock_common.o(.text.pj_sockaddr_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_sockaddr_cp &rArr; pj_sockaddr_get_len &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_send_data
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_init_cb
</UL>

<P><STRONG><a name="[3c7]"></a>pj_sockaddr_get_addr</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, sock_common.o(.text.pj_sockaddr_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_sockaddr_get_addr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sockaddr_attr
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_string
</UL>

<P><STRONG><a name="[7e6]"></a>pj_sockaddr_get_addr_len</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, sock_common.o(.text.pj_sockaddr_get_addr_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_sockaddr_get_addr_len &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sockaddr_attr_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
</UL>

<P><STRONG><a name="[587]"></a>pj_sockaddr_get_len</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, sock_common.o(.text.pj_sockaddr_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_sockaddr_get_len &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtcp2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_rtcp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_indication
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_send_data
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srv_resolver_cb
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[3b2]"></a>pj_sockaddr_get_port</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sock_common.o(.text.pj_sockaddr_get_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_sockaddr_get_port &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nameserver_state
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_check
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockaddr_to_host_port
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[5bf]"></a>pj_sockaddr_has_addr</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, sock_common.o(.text.pj_sockaddr_has_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pj_sockaddr_has_addr &rArr; pj_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[4f9]"></a>pj_sockaddr_in_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sock_common.o(.text.pj_sockaddr_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = pj_sockaddr_in_init &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_port
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_a_callback
</UL>

<P><STRONG><a name="[880]"></a>pj_sockaddr_in_set_port</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sock_common.o(.text.pj_sockaddr_in_set_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_sockaddr_in_set_port &rArr; pj_htons
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_init
</UL>

<P><STRONG><a name="[881]"></a>pj_sockaddr_in_set_str_addr</STRONG> (Thumb, 260 bytes, Stack size 200 bytes, sock_common.o(.text.pj_sockaddr_in_set_str_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_addr
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_init
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
</UL>

<P><STRONG><a name="[476]"></a>pj_sockaddr_init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, sock_common.o(.text.pj_sockaddr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_init
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_get_info
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sockaddr_attr
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_cfg_default
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srv_resolver_cb
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[393]"></a>pj_sockaddr_parse</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, sock_common.o(.text.pj_sockaddr_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = pj_sockaddr_parse &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse2
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[883]"></a>pj_sockaddr_parse2</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, sock_common.o(.text.pj_sockaddr_parse2))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pj_sockaddr_parse2 &rArr; pj_strtoul &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strchr
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
</UL>

<P><STRONG><a name="[3b0]"></a>pj_sockaddr_print</STRONG> (Thumb, 230 bytes, Stack size 144 bytes, sock_common.o(.text.pj_sockaddr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pj_sockaddr_print &rArr; pj_inet_ntop &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nameserver_state
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_msg
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_check
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockaddr_to_host_port
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_interface
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[49a]"></a>pj_sockaddr_set_port</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, sock_common.o(.text.pj_sockaddr_set_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_sockaddr_set_port &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_on_rx_data
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sockaddr_attr
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[882]"></a>pj_sockaddr_set_str_addr</STRONG> (Thumb, 248 bytes, Stack size 192 bytes, sock_common.o(.text.pj_sockaddr_set_str_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[5c1]"></a>pj_sockaddr_synthesize</STRONG> (Thumb, 230 bytes, Stack size 264 bytes, sock_common.o(.text.pj_sockaddr_synthesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = pj_sockaddr_synthesize &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
</UL>
<BR>[Called By]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[885]"></a>pj_srand</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rand.o(.text.pj_srand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_srand
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[397]"></a>pj_str</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, string.o(.text.pj_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_str
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getdefaultipinterface
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_ssrc
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_null_port_create
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_enum_codecs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_media_clone_deactivate
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_errcode_attr_create
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_err_reason
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_uri_parser
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init2
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_bye_response
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_bye
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_tx_msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_rx_msg
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secure_level
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[625]"></a>pj_str_unescape</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, string_1.o(.text.pj_str_unescape))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_param_imp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[98b]"></a>pj_strassign</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, string.o(.text.pj_strassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_strassign
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
</UL>

<P><STRONG><a name="[790]"></a>pj_strcat</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, string.o(.text.pj_strcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_strcat &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
</UL>

<P><STRONG><a name="[78f]"></a>pj_strcat2</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, string.o(.text.pj_strcat2))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_strcat2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
</UL>

<P><STRONG><a name="[38b]"></a>pj_strcmp</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, string.o(.text.pj_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncmp
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_auth_get_password
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_compare
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_compare
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_via_sent_by
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_via_sent_by
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
</UL>

<P><STRONG><a name="[3b4]"></a>pj_strcmp2</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, string.o(.text.pj_strcmp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pj_strcmp2 &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_fmtp
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
</UL>

<P><STRONG><a name="[3f5]"></a>pj_strcpy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, string.o(.text.pj_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_strcpy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
</UL>

<P><STRONG><a name="[525]"></a>pj_strcpy2</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, string.o(.text.pj_strcpy2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pj_strcpy2 &rArr; pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
</UL>

<P><STRONG><a name="[88f]"></a>pj_strcspn</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, string.o(.text.pj_strcspn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok
</UL>

<P><STRONG><a name="[892]"></a>pj_strcspn2</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, string.o(.text.pj_strcspn2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_strcspn2
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok2
</UL>

<P><STRONG><a name="[38c]"></a>pj_strdup</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, string.o(.text.pj_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_attr_new
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_node_new
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_rr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_conn_clone
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_clone
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_info_dup
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_dup
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_param_clone
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_create2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_errcode_attr_create
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_errcode_attr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_errcode_attr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_string_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_string_attr
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_string_attr
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_req_cred_info_dup
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_copy
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_clone
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_clone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_clone
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_clone
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_clone
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_clone
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_clone
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_clone
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_clone
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_clone
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_assign
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_uri_clone
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_clone
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_clone
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_clone_data
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_assign
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_create
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_create
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_copy
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_clone
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_copy
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_via_sent_by
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_get_element
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf2
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_create
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_timestamp
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_contact
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_construct
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_clone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_clone
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_assign_status
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_dup
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_from_media_config
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_srtp_opt_dup
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_dup
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_config_dup
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_clone
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_clone
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_via_sent_by
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[3b5]"></a>pj_strdup2</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, string.o(.text.pj_strdup2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup3
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
</UL>

<P><STRONG><a name="[3a2]"></a>pj_strdup2_with_null</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, string.o(.text.pj_strdup2_with_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_strdup2_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[887]"></a>pj_strdup3</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, string.o(.text.pj_strdup3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_strdup3 &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
</UL>

<P><STRONG><a name="[3f4]"></a>pj_strdup_with_null</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, string.o(.text.pj_strdup_with_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pj_strdup_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_clone
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_pref_dup
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cred_info_dup
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_dup
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[4fb]"></a>pj_strerror</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, errno.o(.text.pj_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pj_strerror &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_strerror
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_error
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_session
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_log_error
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubc_refresh_timer_cb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_cb
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[394]"></a>pj_stricmp</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, string.o(.text.pj_stricmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_next_node
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_addr_response
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_rr
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_cmp
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_fmt_match
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_print
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_has_capability
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_mod_name
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_print
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_uri_cmp
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_compare
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_from_name
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_cmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_find
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_cmp
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cmp
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_names
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_init_np
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_is_reliable
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_status
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_parse
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_parse
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_status_is_basic_open
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_iscomposing_parse
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_non_av_fmt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_from_media_config
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_srtp_opt_dup
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_buddy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_codec_fmtp
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
</UL>

<P><STRONG><a name="[483]"></a>pj_stricmp2</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, string.o(.text.pj_stricmp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_get_type
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_print
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_print
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_clone
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_clone
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secure_level
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_buddy
</UL>

<P><STRONG><a name="[596]"></a>pj_stristr</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, string.o(.text.pj_stristr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_stristr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secure_level
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
</UL>

<P><STRONG><a name="[575]"></a>pj_strltrim</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, string.o(.text.pj_strltrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_strltrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isspace
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul3
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtrim
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[6a3]"></a>pj_strncmp</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, string.o(.text.pj_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pj_strncmp &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_private_ip
</UL>

<P><STRONG><a name="[4fc]"></a>pj_strncpy</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, string.o(.text.pj_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_strncpy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_callback
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_strerror2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[9ca]"></a>pj_strncpy2_escape</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, string_1.o(.text.pj_strncpy2_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_strncpy2_escape
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_print
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_print
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_print
</UL>

<P><STRONG><a name="[a5b]"></a>pj_strncpy_escape</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, string_1.o(.text.pj_strncpy_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pj_strncpy_escape
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[88a]"></a>pj_strncpy_with_null</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, string.o(.text.pj_strncpy_with_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_util_strerror
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_strerror
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_strerror
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_audiodev_strerror
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_strerror
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsipsimple_strerror
</UL>

<P><STRONG><a name="[88b]"></a>pj_strnicmp</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, string.o(.text.pj_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pj_strnicmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
</UL>

<P><STRONG><a name="[55a]"></a>pj_strnicmp2</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, string.o(.text.pj_strnicmp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pj_strnicmp2 &rArr; pj_strnicmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_set_codec_priority
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_find_codecs_by_id
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_node
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_get_element
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
</UL>

<P><STRONG><a name="[88c]"></a>pj_strrtrim</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, string.o(.text.pj_strrtrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_strrtrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isspace
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtrim
</UL>

<P><STRONG><a name="[88e]"></a>pj_strspn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, string.o(.text.pj_strspn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok
</UL>

<P><STRONG><a name="[891]"></a>pj_strspn2</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, string.o(.text.pj_strspn2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_strspn2
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok2
</UL>

<P><STRONG><a name="[88d]"></a>pj_strstr</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, string.o(.text.pj_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_strstr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[783]"></a>pj_strtok</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, string.o(.text.pj_strtok))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_strtok &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcspn
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[890]"></a>pj_strtok2</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, string.o(.text.pj_strtok2))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_strtok2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcspn2
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strspn2
</UL>
<BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
</UL>

<P><STRONG><a name="[893]"></a>pj_strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, string.o(.text.pj_strtol))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_strtol &rArr; pj_strtoul &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
</UL>

<P><STRONG><a name="[628]"></a>pj_strtol2</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, string.o(.text.pj_strtol2))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pj_strtol2 &rArr; pj_strtoul3 &rArr; pj_strltrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul3
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strltrim
</UL>
<BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoi_validate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[56e]"></a>pj_strtoul</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, string.o(.text.pj_strtoul))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_strtoul &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse2
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_fmt_match
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_expires
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_max_forwards
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_expires
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_len
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_iscomposing_parse
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_non_av_fmt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[895]"></a>pj_strtoul2</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, string.o(.text.pj_strtoul2))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hex_digit_to_val
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isxdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
</UL>

<P><STRONG><a name="[894]"></a>pj_strtoul3</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, string.o(.text.pj_strtoul3))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pj_strtoul3 &rArr; pj_strltrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strltrim
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hex_digit_to_val
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isxdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
</UL>

<P><STRONG><a name="[61d]"></a>pj_strtrim</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, string.o(.text.pj_strtrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_strtrim &rArr; pj_strrtrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strrtrim
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strltrim
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
</UL>

<P><STRONG><a name="[897]"></a>pj_stun_attr_clone</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_attr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pj_stun_attr_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
</UL>

<P><STRONG><a name="[803]"></a>pj_stun_auth_cred_dup</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stun_auth.o(.text.pj_stun_auth_cred_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_stun_auth_cred_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_copy
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_from_media_config
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_dup
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[3d3]"></a>pj_stun_auth_valid_for_msg</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stun_auth.o(.text.pj_stun_auth_valid_for_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = pj_stun_auth_valid_for_msg &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[898]"></a>pj_stun_authenticate_request</STRONG> (Thumb, 1152 bytes, Stack size 304 bytes, stun_auth.o(.text.pj_stun_authenticate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_final
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_update
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_string_attr
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[89a]"></a>pj_stun_authenticate_response</STRONG> (Thumb, 276 bytes, Stack size 208 bytes, stun_auth.o(.text.pj_stun_authenticate_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pj_stun_authenticate_response &rArr; pj_hmac_sha1_init &rArr; pj_sha1_update &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_final
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_update
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[89b]"></a>pj_stun_binary_attr_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_binary_attr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pj_stun_binary_attr_init &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
</UL>

<P><STRONG><a name="[89c]"></a>pj_stun_client_tsx_create</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stun_transaction.o(.text.pj_stun_client_tsx_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_stun_client_tsx_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[b15]"></a>pj_stun_client_tsx_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stun_transaction.o(.text.pj_stun_client_tsx_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
</UL>

<P><STRONG><a name="[89d]"></a>pj_stun_client_tsx_get_data</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stun_transaction.o(.text.pj_stun_client_tsx_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_client_tsx_get_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_send_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
</UL>

<P><STRONG><a name="[89e]"></a>pj_stun_client_tsx_on_rx_msg</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stun_transaction.o(.text.pj_stun_client_tsx_on_rx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pj_stun_client_tsx_on_rx_msg &rArr; pj_timer_heap_cancel_if_active &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[89f]"></a>pj_stun_client_tsx_retransmit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stun_transaction.o(.text.pj_stun_client_tsx_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = pj_stun_client_tsx_retransmit &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_retransmit_req
</UL>

<P><STRONG><a name="[4b3]"></a>pj_stun_client_tsx_schedule_destroy</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stun_transaction.o(.text.pj_stun_client_tsx_schedule_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>

<P><STRONG><a name="[8a1]"></a>pj_stun_client_tsx_send_msg</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, stun_transaction.o(.text.pj_stun_client_tsx_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[4b2]"></a>pj_stun_client_tsx_set_data</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stun_transaction.o(.text.pj_stun_client_tsx_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_client_tsx_set_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[4b1]"></a>pj_stun_client_tsx_stop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stun_transaction.o(.text.pj_stun_client_tsx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pj_stun_client_tsx_stop &rArr; pj_timer_heap_cancel_if_active &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
</UL>

<P><STRONG><a name="[57a]"></a>pj_stun_create_key</STRONG> (Thumb, 260 bytes, Stack size 112 bytes, stun_auth.o(.text.pj_stun_create_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pj_stun_create_key &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_final
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_update
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auth
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
</UL>

<P><STRONG><a name="[62c]"></a>pj_stun_detect_nat_type2</STRONG> (Thumb, 708 bytes, Stack size 136 bytes, nat_detect.o(.text.pj_stun_detect_nat_type2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5504<LI>Call Chain = pj_stun_detect_nat_type2 &rArr; on_read_complete &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_interface
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_stun_resolve_cb
</UL>

<P><STRONG><a name="[8a3]"></a>pj_stun_errcode_attr_create</STRONG> (Thumb, 200 bytes, Stack size 120 bytes, stun_msg.o(.text.pj_stun_errcode_attr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
</UL>

<P><STRONG><a name="[8aa]"></a>pj_stun_get_attr_name</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stun_msg.o(.text.pj_stun_get_attr_name))
<BR><BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
</UL>

<P><STRONG><a name="[8a9]"></a>pj_stun_get_class_name</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stun_msg.o(.text.pj_stun_get_class_name))
<BR><BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
</UL>

<P><STRONG><a name="[8a4]"></a>pj_stun_get_err_reason</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_get_err_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pj_stun_get_err_reason &rArr; pj_str
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_strerror2
</UL>

<P><STRONG><a name="[75c]"></a>pj_stun_get_method_name</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stun_msg.o(.text.pj_stun_get_method_name))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_indication
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_indication
</UL>

<P><STRONG><a name="[8a5]"></a>pj_stun_get_nat_name</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nat_detect.o(.text.pj_stun_get_nat_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_get_nat_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_remote_nat_type
</UL>

<P><STRONG><a name="[8a6]"></a>pj_stun_msg_add_attr</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stun_msg.o(.text.pj_stun_msg_add_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_msg_add_attr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
</UL>

<P><STRONG><a name="[76b]"></a>pj_stun_msg_add_binary_attr</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stun_msg.o(.text.pj_stun_msg_add_binary_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pj_stun_msg_add_binary_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
</UL>

<P><STRONG><a name="[79e]"></a>pj_stun_msg_add_empty_attr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_msg_add_empty_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_stun_msg_add_empty_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
</UL>

<P><STRONG><a name="[3d4]"></a>pj_stun_msg_add_msgint_attr</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stun_msg.o(.text.pj_stun_msg_add_msgint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pj_stun_msg_add_msgint_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
</UL>

<P><STRONG><a name="[763]"></a>pj_stun_msg_add_sockaddr_attr</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stun_msg.o(.text.pj_stun_msg_add_sockaddr_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pj_stun_msg_add_sockaddr_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
</UL>

<P><STRONG><a name="[3d2]"></a>pj_stun_msg_add_string_attr</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stun_msg.o(.text.pj_stun_msg_add_string_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pj_stun_msg_add_string_attr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
</UL>

<P><STRONG><a name="[79f]"></a>pj_stun_msg_add_uint64_attr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_msg_add_uint64_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_stun_msg_add_uint64_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
</UL>

<P><STRONG><a name="[3d5]"></a>pj_stun_msg_add_uint_attr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_msg_add_uint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_stun_msg_add_uint_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
</UL>

<P><STRONG><a name="[736]"></a>pj_stun_msg_check</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_msg_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_stun_msg_check &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
</UL>

<P><STRONG><a name="[8a7]"></a>pj_stun_msg_create</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stun_msg.o(.text.pj_stun_msg_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_stun_msg_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getpid
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
</UL>

<P><STRONG><a name="[899]"></a>pj_stun_msg_create_response</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, stun_msg.o(.text.pj_stun_msg_create_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_errcode_attr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[8a8]"></a>pj_stun_msg_decode</STRONG> (Thumb, 1376 bytes, Stack size 240 bytes, stun_msg.o(.text.pj_stun_msg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = pj_stun_msg_decode &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[76a]"></a>pj_stun_msg_destroy_tdata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stun_session.o(.text.pj_stun_msg_destroy_tdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = pj_stun_msg_destroy_tdata &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
</UL>

<P><STRONG><a name="[509]"></a>pj_stun_msg_dump</STRONG> (Thumb, 1552 bytes, Stack size 184 bytes, stun_msg_dump.o(.text.pj_stun_msg_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pj_stun_msg_dump &rArr; pj_sockaddr_print &rArr; pj_inet_ntop &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_attr_name
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_class_name
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_method_name
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_msg
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>

<P><STRONG><a name="[8ab]"></a>pj_stun_msg_encode</STRONG> (Thumb, 920 bytes, Stack size 208 bytes, stun_msg.o(.text.pj_stun_msg_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pj_stun_msg_encode &rArr; pj_hmac_sha1_init &rArr; pj_sha1_update &rArr; SHA1_Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_final
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_update
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hmac_sha1_init
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_calc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[3d1]"></a>pj_stun_msg_find_attr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stun_msg.o(.text.pj_stun_msg_find_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_stun_msg_find_attr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_indication
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_on_rx_msg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_valid_for_msg
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[8ac]"></a>pj_stun_msg_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stun_msg.o(.text.pj_stun_msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_stun_msg_init &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getpid
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
</UL>

<P><STRONG><a name="[8ad]"></a>pj_stun_req_cred_info_dup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stun_auth.o(.text.pj_stun_req_cred_info_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_stun_req_cred_info_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
</UL>

<P><STRONG><a name="[72b]"></a>pj_stun_session_cancel_req</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stun_session.o(.text.pj_stun_session_cancel_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = pj_stun_session_cancel_req &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
</UL>

<P><STRONG><a name="[7f7]"></a>pj_stun_session_create</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, stun_session.o(.text.pj_stun_session_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pj_stun_session_create &rArr; pj_grp_lock_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
</UL>

<P><STRONG><a name="[765]"></a>pj_stun_session_create_ind</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stun_session.o(.text.pj_stun_session_create_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pj_stun_session_create_ind &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
</UL>

<P><STRONG><a name="[58c]"></a>pj_stun_session_create_req</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, stun_session.o(.text.pj_stun_session_create_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = pj_stun_session_create_req &rArr; get_auth &rArr; pj_stun_create_key &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auth
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
</UL>

<P><STRONG><a name="[762]"></a>pj_stun_session_create_res</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, stun_session.o(.text.pj_stun_session_create_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pj_stun_session_create_res &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_req_cred_info_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_respond
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
</UL>

<P><STRONG><a name="[3b8]"></a>pj_stun_session_destroy</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stun_session.o(.text.pj_stun_session_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
</UL>

<P><STRONG><a name="[74d]"></a>pj_stun_session_get_user_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stun_session.o(.text.pj_stun_session_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_session_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_indication
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_send_msg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_send_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_send_msg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_auth_get_password
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_auth_get_cred
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_send_msg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_indication
</UL>

<P><STRONG><a name="[737]"></a>pj_stun_session_on_rx_pkt</STRONG> (Thumb, 1264 bytes, Stack size 144 bytes, stun_session.o(.text.pj_stun_session_on_rx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5224<LI>Call Chain = pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_on_rx_msg
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_msg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_response
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_valid_for_msg
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_create_response
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_authenticate_request
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_recvfrom
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
</UL>

<P><STRONG><a name="[760]"></a>pj_stun_session_respond</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, stun_session.o(.text.pj_stun_session_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pj_stun_session_respond &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
</UL>

<P><STRONG><a name="[5ae]"></a>pj_stun_session_retransmit_req</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stun_session.o(.text.pj_stun_session_retransmit_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = pj_stun_session_retransmit_req &rArr; pj_stun_client_tsx_retransmit &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_retransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
</UL>

<P><STRONG><a name="[58d]"></a>pj_stun_session_send_msg</STRONG> (Thumb, 644 bytes, Stack size 56 bytes, stun_session.o(.text.pj_stun_session_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_create
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_set_data
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_msg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_msg_options
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_respond
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
</UL>

<P><STRONG><a name="[7f9]"></a>pj_stun_session_set_credential</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stun_session.o(.text.pj_stun_session_set_credential))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pj_stun_session_set_credential &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_credential
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
</UL>

<P><STRONG><a name="[8ae]"></a>pj_stun_session_set_log</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stun_session.o(.text.pj_stun_session_set_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_session_set_log &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_log
</UL>

<P><STRONG><a name="[7f8]"></a>pj_stun_session_set_user_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stun_session.o(.text.pj_stun_session_set_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pj_stun_session_set_user_data &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
</UL>

<P><STRONG><a name="[766]"></a>pj_stun_session_use_fingerprint</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stun_session.o(.text.pj_stun_session_use_fingerprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_session_use_fingerprint &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
</UL>

<P><STRONG><a name="[805]"></a>pj_stun_sock_cfg_default</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stun_sock.o(.text.pj_stun_sock_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_stun_sock_cfg_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stun_cfg_default
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
</UL>

<P><STRONG><a name="[80b]"></a>pj_stun_sock_create</STRONG> (Thumb, 1148 bytes, Stack size 208 bytes, stun_sock.o(.text.pj_stun_sock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5136<LI>Call Chain = pj_stun_sock_create &rArr; pj_stun_sock_destroy &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_recvfrom
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
</UL>

<P><STRONG><a name="[4ac]"></a>pj_stun_sock_destroy</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stun_sock.o(.text.pj_stun_sock_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = pj_stun_sock_destroy &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[80d]"></a>pj_stun_sock_get_info</STRONG> (Thumb, 392 bytes, Stack size 72 bytes, stun_sock.o(.text.pj_stun_sock_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = pj_stun_sock_get_info &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface2
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
</UL>

<P><STRONG><a name="[8af]"></a>pj_stun_sock_get_user_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stun_sock.o(.text.pj_stun_sock_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_stun_sock_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_data_sent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
</UL>

<P><STRONG><a name="[5c2]"></a>pj_stun_sock_sendto</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, stun_sock.o(.text.pj_stun_sock_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = pj_stun_sock_sendto &rArr; pj_activesock_sendto &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
</UL>

<P><STRONG><a name="[80c]"></a>pj_stun_sock_start</STRONG> (Thumb, 344 bytes, Stack size 208 bytes, stun_sock.o(.text.pj_stun_sock_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 5552<LI>Call Chain = pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
</UL>

<P><STRONG><a name="[8b0]"></a>pj_stun_sockaddr_attr_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stun_msg.o(.text.pj_stun_sockaddr_attr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_stun_sockaddr_attr_init &rArr; pj_sockaddr_get_addr_len &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
</UL>

<P><STRONG><a name="[52d]"></a>pj_thread_create</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, os_core_unix.o(.text.pj_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = pj_thread_create &rArr; pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_attr_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_attr_setstacksize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_start
</UL>

<P><STRONG><a name="[52f]"></a>pj_thread_destroy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_thread_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_stop_threads
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_destroy
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_stop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_start
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[83d]"></a>pj_thread_get_name</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_thread_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_thread_get_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>

<P><STRONG><a name="[42b]"></a>pj_thread_get_prio_max</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, os_core_unix.o(.text.pj_thread_get_prio_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_thread_get_prio_max &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_getschedparam
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
</UL>

<P><STRONG><a name="[825]"></a>pj_thread_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_core_unix.o(.text.pj_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pj_thread_init &rArr; pj_thread_register &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
</UL>

<P><STRONG><a name="[52e]"></a>pj_thread_join</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, os_core_unix.o(.text.pj_thread_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = pj_thread_join &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_stop_threads
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_destroy
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_stop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_start
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[6de]"></a>pj_thread_local_alloc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, os_core_unix.o(.text.pj_thread_local_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_thread_local_alloc &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_create
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_buf_initialize
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_load
</UL>

<P><STRONG><a name="[54a]"></a>pj_thread_local_free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_thread_local_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pj_thread_local_free &rArr; pthread_key_delete &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_shutdown
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_cleanup
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_buf_cleanup
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_unload
</UL>

<P><STRONG><a name="[6a1]"></a>pj_thread_local_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_thread_local_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pj_thread_local_get &rArr; pthread_getspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_getspecific
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_raw_indent
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_alloc
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_logging_suspended
</UL>

<P><STRONG><a name="[6bc]"></a>pj_thread_local_set</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, os_core_unix.o(.text.pj_thread_local_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setspecific
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_set_indent
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_on_buf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_alloc
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_logging
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_logging
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_load
</UL>

<P><STRONG><a name="[8b5]"></a>pj_thread_register</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, os_core_unix.o(.text.pj_thread_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = pj_thread_register &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_self
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strlen
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_init
</UL>

<P><STRONG><a name="[42c]"></a>pj_thread_set_prio</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, os_core_unix.o(.text.pj_thread_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pj_thread_set_prio &rArr; pthread_setschedparam &rArr; vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setschedparam
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_getschedparam
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
</UL>

<P><STRONG><a name="[3ad]"></a>pj_thread_sleep</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pj_thread_sleep &rArr; usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usleep
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_os_error
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_set_os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_thread
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[35c]"></a>pj_thread_this</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_thread_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_unset_owner_thread
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_set_owner_thread
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_thread
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pjsua_on_rx_request
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_enum_calls
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_timer_cb
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJSUA_LOCK
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[4a1]"></a>pj_throw_exception_</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, except.o(.text.pj_throw_exception_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_name
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_pool_callback
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_syntax_error
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_scanner_error
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_callback
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_other_uri
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoi_validate
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_syntax_error
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[83b]"></a>pj_time_decode</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, os_time_common.o(.text.pj_time_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pj_time_decode &rArr; convertUnixTimeToDate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[8c2]"></a>pj_time_local_to_gmt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_time_common.o(.text.pj_time_local_to_gmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_time_local_to_gmt &rArr; get_tz_offset_secs
</UL>
<BR>[Calls]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tz_offset_secs
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[3ac]"></a>pj_time_val_normalize</STRONG> (Thumb, 212 bytes, Stack size 4 bytes, types.o(.text.pj_time_val_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_time_val_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_sleep
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_thread
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_schedule_reinvite_check
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_retrans_18x
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_handle_events
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[405]"></a>pj_timer_entry_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timer.o(.text.pj_timer_entry_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_timer_entry_init &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_start
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[3ba]"></a>pj_timer_entry_running</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, timer.o(.text.pj_timer_entry_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_timer_entry_running
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
</UL>

<P><STRONG><a name="[523]"></a>pj_timer_heap_cancel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timer.o(.text.pj_timer_heap_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_session
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>

<P><STRONG><a name="[3bc]"></a>pj_timer_heap_cancel_if_active</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, timer.o(.text.pj_timer_heap_cancel_if_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pj_timer_heap_cancel_if_active &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_cancel_query
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_on_rx_msg
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_retransmit
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_registration
</UL>

<P><STRONG><a name="[7ce]"></a>pj_timer_heap_create</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, timer.o(.text.pj_timer_heap_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pj_timer_heap_create &rArr; pj_pool_zalloc &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[7d0]"></a>pj_timer_heap_destroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer.o(.text.pj_timer_heap_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_timer_heap_destroy &rArr; pj_lock_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[8c4]"></a>pj_timer_heap_dump</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, timer.o(.text.pj_timer_heap_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pj_timer_heap_dump &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_timer_heap
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
</UL>

<P><STRONG><a name="[8c5]"></a>pj_timer_heap_poll</STRONG> (Thumb, 568 bytes, Stack size 72 bytes, timer.o(.text.pj_timer_heap_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pj_timer_heap_poll &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_timer_heap
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
</UL>

<P><STRONG><a name="[524]"></a>pj_timer_heap_schedule_dbg</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, timer.o(.text.pj_timer_heap_schedule_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_session
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
</UL>

<P><STRONG><a name="[3bb]"></a>pj_timer_heap_schedule_w_grp_lock_dbg</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, timer.o(.text.pj_timer_heap_schedule_w_grp_lock_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_on_request_complete
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_w_grp_lock_dbg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_resched_retransmission
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_schedule_timer
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
</UL>

<P><STRONG><a name="[8c7]"></a>pj_timer_heap_set_lock</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timer.o(.text.pj_timer_heap_set_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pj_timer_heap_set_lock &rArr; pj_lock_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[9a4]"></a>pj_timer_heap_set_max_timed_out_per_poll</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, timer.o(.text.pj_timer_heap_set_max_timed_out_per_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pj_timer_heap_set_max_timed_out_per_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[8c8]"></a>pj_turn_alloc_param_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, turn_session.o(.text.pj_turn_alloc_param_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_turn_alloc_param_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
</UL>

<P><STRONG><a name="[806]"></a>pj_turn_alloc_param_default</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, turn_session.o(.text.pj_turn_alloc_param_default))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_turn_cfg_default
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
</UL>

<P><STRONG><a name="[503]"></a>pj_turn_session_alloc</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, turn_session.o(.text.pj_turn_session_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = pj_turn_session_alloc &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[769]"></a>pj_turn_session_bind_channel</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, turn_session.o(.text.pj_turn_session_bind_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pj_turn_session_bind_channel &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_bind_channel
</UL>

<P><STRONG><a name="[491]"></a>pj_turn_session_connection_bind</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, turn_session.o(.text.pj_turn_session_connection_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pj_turn_session_connection_bind &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
</UL>

<P><STRONG><a name="[8c9]"></a>pj_turn_session_create</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, turn_session.o(.text.pj_turn_session_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = pj_turn_session_create &rArr; do_destroy &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_user_data
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
</UL>

<P><STRONG><a name="[72e]"></a>pj_turn_session_destroy</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, turn_session.o(.text.pj_turn_session_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pj_turn_session_destroy &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[8ca]"></a>pj_turn_session_get_info</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, turn_session.o(.text.pj_turn_session_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pj_turn_session_get_info &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_info
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[af7]"></a>pj_turn_session_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, turn_session.o(.text.pj_turn_session_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_rx_data
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_bind_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[734]"></a>pj_turn_session_on_rx_pkt</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, turn_session.o(.text.pj_turn_session_on_rx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = pj_turn_session_on_rx_pkt &rArr; pj_turn_session_on_rx_pkt2 &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read_asock
</UL>

<P><STRONG><a name="[492]"></a>pj_turn_session_on_rx_pkt2</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, turn_session.o(.text.pj_turn_session_on_rx_pkt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = pj_turn_session_on_rx_pkt2 &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_data_read
</UL>

<P><STRONG><a name="[8cb]"></a>pj_turn_session_sendto</STRONG> (Thumb, 596 bytes, Stack size 192 bytes, turn_session.o(.text.pj_turn_session_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 5216<LI>Call Chain = pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_encode
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_init
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_binary_attr_init
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_attr
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sockaddr_attr_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_sendto
</UL>

<P><STRONG><a name="[8cd]"></a>pj_turn_session_set_credential</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, turn_session.o(.text.pj_turn_session_set_credential))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pj_turn_session_set_credential &rArr; pj_stun_session_set_credential &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_credential
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
</UL>

<P><STRONG><a name="[8ce]"></a>pj_turn_session_set_log</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, turn_session.o(.text.pj_turn_session_set_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_turn_session_set_log &rArr; pj_stun_session_set_log &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_set_log
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_log
</UL>

<P><STRONG><a name="[8cc]"></a>pj_turn_session_set_perm</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, turn_session.o(.text.pj_turn_session_set_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_this
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_next
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_first
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_destroy_tdata
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_perm
</UL>

<P><STRONG><a name="[8cf]"></a>pj_turn_session_set_server</STRONG> (Thumb, 868 bytes, Stack size 104 bytes, turn_session.o(.text.pj_turn_session_set_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448<LI>Call Chain = pj_turn_session_set_server &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
</UL>

<P><STRONG><a name="[b45]"></a>pj_turn_session_set_user_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, turn_session.o(.text.pj_turn_session_set_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[4a8]"></a>pj_turn_session_shutdown</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, turn_session.o(.text.pj_turn_session_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[3c5]"></a>pj_turn_sock_alloc</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, turn_sock.o(.text.pj_turn_sock_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5480<LI>Call Chain = pj_turn_sock_alloc &rArr; pj_turn_session_set_server &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_credential
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_server
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_alloc_param_copy
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_alloc_param_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
</UL>

<P><STRONG><a name="[739]"></a>pj_turn_sock_bind_channel</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, turn_sock.o(.text.pj_turn_sock_bind_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pj_turn_sock_bind_channel &rArr; pj_turn_session_bind_channel &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
</UL>

<P><STRONG><a name="[807]"></a>pj_turn_sock_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, turn_sock.o(.text.pj_turn_sock_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_turn_sock_cfg_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_turn_cfg_default
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
</UL>

<P><STRONG><a name="[3c4]"></a>pj_turn_sock_create</STRONG> (Thumb, 524 bytes, Stack size 440 bytes, turn_sock.o(.text.pj_turn_sock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512<LI>Call Chain = pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
</UL>

<P><STRONG><a name="[4ad]"></a>pj_turn_sock_destroy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, turn_sock.o(.text.pj_turn_sock_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pj_turn_sock_destroy &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_ice_st
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[8d0]"></a>pj_turn_sock_get_info</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, turn_sock.o(.text.pj_turn_sock_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pj_turn_sock_get_info &rArr; pj_turn_session_get_info &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
</UL>

<P><STRONG><a name="[8d1]"></a>pj_turn_sock_get_user_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, turn_sock.o(.text.pj_turn_sock_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_turn_sock_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_data_sent
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_rx_data
</UL>

<P><STRONG><a name="[5c0]"></a>pj_turn_sock_sendto</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, turn_sock.o(.text.pj_turn_sock_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 5224<LI>Call Chain = pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
</UL>

<P><STRONG><a name="[73a]"></a>pj_turn_sock_set_log</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, turn_sock.o(.text.pj_turn_sock_set_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_turn_sock_set_log &rArr; pj_turn_session_set_log &rArr; pj_stun_session_set_log &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_log
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_valid_pair
</UL>

<P><STRONG><a name="[8d2]"></a>pj_turn_sock_set_perm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, turn_sock.o(.text.pj_turn_sock_set_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_turn_perm
</UL>

<P><STRONG><a name="[8d3]"></a>pj_turn_sock_set_user_data</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, turn_sock.o(.text.pj_turn_sock_set_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pj_turn_sock_set_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[b44]"></a>pj_turn_state_name</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, turn_session.o(.text.pj_turn_state_name))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[6ca]"></a>pj_utoa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, string.o(.text.pj_utoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_print
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_media_desc
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_print
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_print
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clen_hdr_print
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_int_hdr_print
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_print_body
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_print
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_print
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_print
</UL>

<P><STRONG><a name="[83c]"></a>pj_utoa_pad</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, string.o(.text.pj_utoa_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_utoa_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
</UL>

<P><STRONG><a name="[8d4]"></a>pj_xml_add_attr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xml.o(.text.pj_xml_add_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_xml_add_attr &rArr; pj_list_insert_before &rArr; pj_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_create
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_construct
</UL>

<P><STRONG><a name="[8d5]"></a>pj_xml_add_node</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xml.o(.text.pj_xml_add_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_xml_add_node &rArr; pj_list_insert_before &rArr; pj_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_timestamp
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_contact
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_construct
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_add_tuple
</UL>

<P><STRONG><a name="[8d6]"></a>pj_xml_attr_new</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, xml.o(.text.pj_xml_attr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pj_xml_attr_new &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
</UL>

<P><STRONG><a name="[8d7]"></a>pj_xml_clone</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, xml.o(.text.pj_xml_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656 + In Cycle
<LI>Call Chain = pj_xml_clone &rArr;  pj_xml_clone (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_clone_data
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[8d8]"></a>pj_xml_find_attr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, xml.o(.text.pj_xml_find_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pj_xml_find_attr &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_status
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_uri
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_parse
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_get_element
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_set_status
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_id
</UL>

<P><STRONG><a name="[8d9]"></a>pj_xml_find_next_node</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, xml.o(.text.pj_xml_find_next_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_xml_find_next_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_get_next_tuple
</UL>

<P><STRONG><a name="[8da]"></a>pj_xml_find_node</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, xml.o(.text.pj_xml_find_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pj_xml_find_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_status
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_uri
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_parse
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_set_status
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_status_set_basic_open
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_status_is_basic_open
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_timestamp
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_contact
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_contact
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_status
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_get_first_tuple
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_iscomposing_parse
</UL>

<P><STRONG><a name="[8db]"></a>pj_xml_node_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, xml.o(.text.pj_xml_node_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pj_xml_node_new &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
</UL>

<P><STRONG><a name="[8dc]"></a>pj_xml_parse</STRONG> (Thumb, 120 bytes, Stack size 224 bytes, xml.o(.text.pj_xml_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
</UL>
<BR>[Called By]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_parse
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_parse
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_iscomposing_parse
</UL>

<P><STRONG><a name="[8df]"></a>pj_xml_print</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, xml.o(.text.pj_xml_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pj_xml_print &rArr; xml_print_node &rArr;  xml_print_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_print_node
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_print_body
</UL>

<P><STRONG><a name="[8e1]"></a>pjlib_util_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, errno_1.o(.text.pjlib_util_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjlib_util_init &rArr; pj_register_strerror &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[1bd]"></a>pjlib_util_strerror</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, errno_1.o(.text.pjlib_util_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjlib_util_strerror &rArr; pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> errno_1.o(.text.pjlib_util_init)
</UL>
<P><STRONG><a name="[452]"></a>pjmedia_aud_dev_default_param</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, audiodev.o(.text.pjmedia_aud_dev_default_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjmedia_aud_dev_default_param &rArr; lookup_dev &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create_player
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_aud_param
</UL>

<P><STRONG><a name="[432]"></a>pjmedia_aud_dev_get_info</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, audiodev.o(.text.pjmedia_aud_dev_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pjmedia_aud_dev_get_info &rArr; lookup_dev &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[8e2]"></a>pjmedia_aud_driver_deinit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, audiodev.o(.text.pjmedia_aud_driver_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjmedia_aud_driver_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_shutdown
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_init
</UL>

<P><STRONG><a name="[8e3]"></a>pjmedia_aud_driver_init</STRONG> (Thumb, 638 bytes, Stack size 432 bytes, audiodev.o(.text.pjmedia_aud_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = pjmedia_aud_driver_init &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_init
</UL>

<P><STRONG><a name="[8e4]"></a>pjmedia_aud_stream_create</STRONG> (Thumb, 312 bytes, Stack size 160 bytes, audiodev.o(.text.pjmedia_aud_stream_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pjmedia_aud_stream_create &rArr; lookup_dev &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_dev
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[957]"></a>pjmedia_aud_stream_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, audiodev.o(.text.pjmedia_aud_stream_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[95b]"></a>pjmedia_aud_stream_get_cap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, audiodev.o(.text.pjmedia_aud_stream_get_cap))
<BR><BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
</UL>

<P><STRONG><a name="[431]"></a>pjmedia_aud_stream_get_param</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, audiodev.o(.text.pjmedia_aud_stream_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjmedia_aud_stream_get_param &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_initial_aud_param
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[95c]"></a>pjmedia_aud_stream_set_cap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, audiodev.o(.text.pjmedia_aud_stream_set_cap))
<BR><BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
</UL>

<P><STRONG><a name="[959]"></a>pjmedia_aud_stream_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, audiodev.o(.text.pjmedia_aud_stream_start))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[956]"></a>pjmedia_aud_stream_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, audiodev.o(.text.pjmedia_aud_stream_stop))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[8e5]"></a>pjmedia_aud_subsys_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, audiodev_1.o(.text.pjmedia_aud_subsys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjmedia_aud_subsys_init &rArr; pjmedia_aud_driver_init &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_deinit
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_init
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_get_aud_subsys
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[8e7]"></a>pjmedia_aud_subsys_shutdown</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, audiodev_1.o(.text.pjmedia_aud_subsys_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pjmedia_aud_subsys_shutdown &rArr; pjmedia_aud_driver_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_driver_deinit
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_get_aud_subsys
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[a77]"></a>pjmedia_audio_codec_config_default</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, audio_codecs.o(.text.pjmedia_audio_codec_config_default))
<BR><BR>[Called By]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
</UL>

<P><STRONG><a name="[1be]"></a>pjmedia_audiodev_strerror</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, errno_3.o(.text.pjmedia_audiodev_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjmedia_audiodev_strerror &rArr; pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audiodev_1.o(.text.pjmedia_aud_subsys_init)
</UL>
<P><STRONG><a name="[50a]"></a>pjmedia_calc_avg_signal</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, silencedet.o(.text.pjmedia_calc_avg_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pjmedia_calc_avg_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_cancel_echo
</UL>

<P><STRONG><a name="[8e8]"></a>pjmedia_clock_create</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, clock_thread.o(.text.pjmedia_clock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjmedia_clock_create &rArr; pjmedia_clock_create2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create2
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
</UL>

<P><STRONG><a name="[8e9]"></a>pjmedia_clock_create2</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, clock_thread.o(.text.pjmedia_clock_create2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjmedia_clock_create2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_null_mutex
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp_freq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create
</UL>

<P><STRONG><a name="[8ea]"></a>pjmedia_clock_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, clock_thread.o(.text.pjmedia_clock_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_destroy
</UL>

<P><STRONG><a name="[8eb]"></a>pjmedia_clock_src_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, clock_thread.o(.text.pjmedia_clock_src_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjmedia_clock_src_init &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[8ec]"></a>pjmedia_clock_src_update</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, clock_thread.o(.text.pjmedia_clock_src_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjmedia_clock_src_update &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_cb
</UL>

<P><STRONG><a name="[8ed]"></a>pjmedia_clock_start</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, clock_thread.o(.text.pjmedia_clock_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_clock_start &rArr; pj_thread_create &rArr; pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_start
</UL>

<P><STRONG><a name="[53]"></a>pjmedia_codec_g711_deinit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, g711.o(.text.pjmedia_codec_g711_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjmedia_codec_g711_deinit &rArr; pjmedia_codec_mgr_unregister_factory &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_codec_mgr
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_unregister_factory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_factory_op)
</UL>
<P><STRONG><a name="[8ef]"></a>pjmedia_codec_g711_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, g711.o(.text.pjmedia_codec_g711_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 5408<LI>Call Chain = pjmedia_codec_g711_init &rArr; pjmedia_codec_mgr_register_factory &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_codec_mgr
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_register_audio_codecs
</UL>

<P><STRONG><a name="[576]"></a>pjmedia_codec_info_to_id</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, codec.o(.text.pjmedia_codec_info_to_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjmedia_codec_info_to_id &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[8f2]"></a>pjmedia_codec_mgr_alloc_codec</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, codec.o(.text.pjmedia_codec_mgr_alloc_codec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pjmedia_codec_mgr_alloc_codec &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[8f3]"></a>pjmedia_codec_mgr_dealloc_codec</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, codec.o(.text.pjmedia_codec_mgr_dealloc_codec))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_codec_mgr_dealloc_codec &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
</UL>

<P><STRONG><a name="[8f4]"></a>pjmedia_codec_mgr_destroy</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, codec.o(.text.pjmedia_codec_mgr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pjmedia_codec_mgr_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
</UL>

<P><STRONG><a name="[577]"></a>pjmedia_codec_mgr_find_codecs_by_id</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, codec.o(.text.pjmedia_codec_mgr_find_codecs_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjmedia_codec_mgr_find_codecs_by_id &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[572]"></a>pjmedia_codec_mgr_get_codec_info</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, codec.o(.text.pjmedia_codec_mgr_get_codec_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pjmedia_codec_mgr_get_codec_info &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[573]"></a>pjmedia_codec_mgr_get_default_param</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, codec.o(.text.pjmedia_codec_mgr_get_default_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 4576<LI>Call Chain = pjmedia_codec_mgr_get_default_param &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[8f5]"></a>pjmedia_codec_mgr_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, codec.o(.text.pjmedia_codec_mgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjmedia_codec_mgr_init &rArr; pj_mutex_create_recursive &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
</UL>

<P><STRONG><a name="[8f1]"></a>pjmedia_codec_mgr_register_factory</STRONG> (Thumb, 712 bytes, Stack size 888 bytes, codec.o(.text.pjmedia_codec_mgr_register_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 5384<LI>Call Chain = pjmedia_codec_mgr_register_factory &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
</UL>

<P><STRONG><a name="[8f6]"></a>pjmedia_codec_mgr_set_codec_priority</STRONG> (Thumb, 720 bytes, Stack size 104 bytes, codec.o(.text.pjmedia_codec_mgr_set_codec_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjmedia_codec_mgr_set_codec_priority &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
</UL>

<P><STRONG><a name="[8ee]"></a>pjmedia_codec_mgr_unregister_factory</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, codec.o(.text.pjmedia_codec_mgr_unregister_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pjmedia_codec_mgr_unregister_factory &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_deinit
</UL>

<P><STRONG><a name="[8f8]"></a>pjmedia_codec_param_clone</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, codec.o(.text.pjmedia_codec_param_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjmedia_codec_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[8f9]"></a>pjmedia_codec_register_audio_codecs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, audio_codecs.o(.text.pjmedia_codec_register_audio_codecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 5408<LI>Call Chain = pjmedia_codec_register_audio_codecs &rArr; pjmedia_codec_g711_init &rArr; pjmedia_codec_mgr_register_factory &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
</UL>

<P><STRONG><a name="[8fa]"></a>pjmedia_conf_add_port</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, conference.o(.text.pjmedia_conf_add_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_conf_add_port &rArr; create_conf_port &rArr; pjmedia_resample_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[8fb]"></a>pjmedia_conf_connect_port</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, conference.o(.text.pjmedia_conf_connect_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = pjmedia_conf_connect_port &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
</UL>

<P><STRONG><a name="[8fc]"></a>pjmedia_conf_create</STRONG> (Thumb, 616 bytes, Stack size 552 bytes, conference.o(.text.pjmedia_conf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 6184<LI>Call Chain = pjmedia_conf_create &rArr; pjmedia_snd_port_create_player &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_param
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_get_info
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_connect
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_snd_stream
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create_player
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
</UL>
<BR>[Called By]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
</UL>

<P><STRONG><a name="[4ae]"></a>pjmedia_conf_destroy</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, conference.o(.text.pjmedia_conf_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pjmedia_conf_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_destroy
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_port
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
</UL>

<P><STRONG><a name="[903]"></a>pjmedia_conf_disconnect_port_from_sinks</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, conference.o(.text.pjmedia_conf_disconnect_port_from_sinks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pjmedia_conf_disconnect_port_from_sinks &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
</UL>

<P><STRONG><a name="[904]"></a>pjmedia_conf_disconnect_port_from_sources</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, conference.o(.text.pjmedia_conf_disconnect_port_from_sources))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjmedia_conf_disconnect_port_from_sources &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
</UL>

<P><STRONG><a name="[a99]"></a>pjmedia_conf_get_connect_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, conference.o(.text.pjmedia_conf_get_connect_count))
<BR><BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>

<P><STRONG><a name="[771]"></a>pjmedia_conf_get_master_port</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, conference.o(.text.pjmedia_conf_get_master_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_conf_get_master_port &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[905]"></a>pjmedia_conf_get_port_info</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, conference.o(.text.pjmedia_conf_get_port_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pjmedia_conf_get_port_info &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
</UL>

<P><STRONG><a name="[907]"></a>pjmedia_conf_remove_port</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, conference.o(.text.pjmedia_conf_remove_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4560<LI>Call Chain = pjmedia_conf_remove_port &rArr; pjmedia_conf_disconnect_port_from_sources &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sinks
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_disconnect_port_from_sources
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
</UL>

<P><STRONG><a name="[774]"></a>pjmedia_conf_set_port0_name</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, conference.o(.text.pjmedia_conf_set_port0_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjmedia_conf_set_port0_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[8fe]"></a>pjmedia_delay_buf_create</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, delaybuf.o(.text.pjmedia_delay_buf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
</UL>

<P><STRONG><a name="[902]"></a>pjmedia_delay_buf_destroy</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, delaybuf.o(.text.pjmedia_delay_buf_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjmedia_delay_buf_destroy &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
</UL>

<P><STRONG><a name="[57f]"></a>pjmedia_delay_buf_get</STRONG> (Thumb, 656 bytes, Stack size 32 bytes, delaybuf.o(.text.pjmedia_delay_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pjmedia_delay_buf_get &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
</UL>

<P><STRONG><a name="[90c]"></a>pjmedia_delay_buf_put</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, delaybuf.o(.text.pjmedia_delay_buf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pjmedia_delay_buf_put &rArr; update &rArr; shrink_buffer &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_save
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shrink_buffer
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
</UL>

<P><STRONG><a name="[910]"></a>pjmedia_echo_capture</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, echo_common.o(.text.pjmedia_echo_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = pjmedia_echo_capture &rArr; pjmedia_delay_buf_get &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_cb
</UL>

<P><STRONG><a name="[911]"></a>pjmedia_echo_create2</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, echo_common.o(.text.pjmedia_echo_create2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
</UL>

<P><STRONG><a name="[912]"></a>pjmedia_echo_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, echo_common.o(.text.pjmedia_echo_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pjmedia_echo_destroy &rArr; pjmedia_delay_buf_destroy &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[913]"></a>pjmedia_echo_get_stat</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, echo_common.o(.text.pjmedia_echo_get_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_echo_get_stat &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_ec_stat
</UL>

<P><STRONG><a name="[914]"></a>pjmedia_echo_playback</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, echo_common.o(.text.pjmedia_echo_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pjmedia_echo_playback &rArr; pjmedia_delay_buf_get &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
</UL>

<P><STRONG><a name="[50b]"></a>pjmedia_echo_stat_default</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, echo_common.o(.text.pjmedia_echo_stat_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjmedia_echo_stat_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_get_stat
</UL>

<P><STRONG><a name="[915]"></a>pjmedia_endpt_create2</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, endpoint.o(.text.pjmedia_endpt_create2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pjmedia_endpt_create2 &rArr; pj_ioqueue_create &rArr; pj_lock_create_simple_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_destroy
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[479]"></a>pjmedia_endpt_create_audio_sdp</STRONG> (Thumb, 2096 bytes, Stack size 1024 bytes, endpoint.o(.text.pjmedia_endpt_create_audio_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5792<LI>Call Chain = pjmedia_endpt_create_audio_sdp &rArr; pjmedia_sdp_rtpmap_to_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup3
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_rtpmap_to_attr
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>

<P><STRONG><a name="[477]"></a>pjmedia_endpt_create_base_sdp</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, endpoint.o(.text.pjmedia_endpt_create_base_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pjmedia_endpt_create_base_sdp &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
</UL>

<P><STRONG><a name="[8f0]"></a>pjmedia_endpt_create_pool</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, endpoint.o(.text.pjmedia_endpt_create_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjmedia_endpt_create_pool &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_create2
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[aae]"></a>pjmedia_endpt_create_sdp_param_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endpoint.o(.text.pjmedia_endpt_create_sdp_param_default))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>

<P><STRONG><a name="[917]"></a>pjmedia_endpt_destroy2</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, endpoint.o(.text.pjmedia_endpt_destroy2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pjmedia_endpt_destroy2 &rArr; pj_ioqueue_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
</UL>

<P><STRONG><a name="[57d]"></a>pjmedia_endpt_get_codec_mgr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, endpoint.o(.text.pjmedia_endpt_get_codec_mgr))
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_deinit
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_g711_init
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
</UL>

<P><STRONG><a name="[918]"></a>pjmedia_endpt_get_ioqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, endpoint.o(.text.pjmedia_endpt_get_ioqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_endpt_get_ioqueue &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
</UL>

<P><STRONG><a name="[919]"></a>pjmedia_endpt_stop_threads</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, endpoint.o(.text.pjmedia_endpt_stop_threads))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjmedia_endpt_stop_threads &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
</UL>

<P><STRONG><a name="[1bf]"></a>pjmedia_esp32_audio_factory</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm_dev.o(.text.pjmedia_esp32_audio_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjmedia_esp32_audio_factory &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audiodev_1.o(.text.pjmedia_aud_subsys_init)
</UL>
<P><STRONG><a name="[752]"></a>pjmedia_event_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, event.o(.text.pjmedia_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pjmedia_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[91a]"></a>pjmedia_event_mgr_create</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, event.o(.text.pjmedia_event_mgr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = pjmedia_event_mgr_create &rArr; pj_thread_create &rArr; pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[91b]"></a>pjmedia_event_mgr_destroy</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, event.o(.text.pjmedia_event_mgr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = pjmedia_event_mgr_destroy &rArr; pj_thread_join &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
</UL>

<P><STRONG><a name="[ab2]"></a>pjmedia_event_mgr_instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event.o(.text.pjmedia_event_mgr_instance))
<BR><BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[753]"></a>pjmedia_event_publish</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, event.o(.text.pjmedia_event_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pjmedia_event_publish &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_event_cb
</UL>

<P><STRONG><a name="[776]"></a>pjmedia_event_subscribe</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, event.o(.text.pjmedia_event_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjmedia_event_subscribe &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[433]"></a>pjmedia_event_unsubscribe</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, event.o(.text.pjmedia_event_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pjmedia_event_unsubscribe &rArr; pj_mutex_trylock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[906]"></a>pjmedia_format_copy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, format.o(.text.pjmedia_format_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pjmedia_format_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_port_info
</UL>

<P><STRONG><a name="[456]"></a>pjmedia_format_get_audio_format_detail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, format.o(.text.pjmedia_format_get_audio_format_detail))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_format_get_audio_format_detail &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_connect
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[8e6]"></a>pjmedia_get_aud_subsys</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audiodev.o(.text.pjmedia_get_aud_subsys))
<BR><BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_shutdown
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_init
</UL>

<P><STRONG><a name="[57c]"></a>pjmedia_get_type</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, types_1.o(.text.pjmedia_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjmedia_get_type &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
</UL>

<P><STRONG><a name="[91c]"></a>pjmedia_ice_create3</STRONG> (Thumb, 400 bytes, Stack size 2152 bytes, transport_ice.o(.text.pjmedia_ice_create3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8288<LI>Call Chain = pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_grp_lock
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[91d]"></a>pjmedia_ice_sdp_has_trickle</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, transport_ice.o(.text.pjmedia_ice_sdp_has_trickle))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjmedia_ice_sdp_has_trickle &rArr; pjmedia_sdp_attr_find &rArr; pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
</UL>
<BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[91e]"></a>pjmedia_ice_trickle_decode_sdp</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, transport_ice.o(.text.pjmedia_ice_trickle_decode_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pjmedia_ice_trickle_decode_sdp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
</UL>

<P><STRONG><a name="[521]"></a>pjmedia_ice_trickle_encode_sdp</STRONG> (Thumb, 640 bytes, Stack size 208 bytes, transport_ice.o(.text.pjmedia_ice_trickle_encode_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = pjmedia_ice_trickle_encode_sdp &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
</UL>

<P><STRONG><a name="[91f]"></a>pjmedia_ice_trickle_has_new_cand</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, transport_ice.o(.text.pjmedia_ice_trickle_has_new_cand))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjmedia_ice_trickle_has_new_cand &rArr; pj_ice_strans_get_cands_count &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_cands_count
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
</UL>

<P><STRONG><a name="[920]"></a>pjmedia_ice_trickle_send_local_cand</STRONG> (Thumb, 264 bytes, Stack size 1880 bytes, transport_ice.o(.text.pjmedia_ice_trickle_send_local_cand))
<BR><BR>[Stack]<UL><LI>Max Depth = 6720<LI>Call Chain = pjmedia_ice_trickle_send_local_cand &rArr; pjmedia_ice_trickle_encode_sdp &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_enum_cands
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_ufrag_pwd
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
</UL>

<P><STRONG><a name="[921]"></a>pjmedia_ice_trickle_update</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, transport_ice.o(.text.pjmedia_ice_trickle_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 5520<LI>Call Chain = pjmedia_ice_trickle_update &rArr; pj_ice_strans_start_ice &rArr; pj_ice_strans_update_check_list &rArr; setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_ufrag_pwd
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sess_is_running
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
</UL>
<BR>[Called By]<UL><LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
</UL>

<P><STRONG><a name="[923]"></a>pjmedia_jbuf_create</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, jbuf.o(.text.pjmedia_jbuf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjmedia_jbuf_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[924]"></a>pjmedia_jbuf_destroy</STRONG> (Thumb, 450 bytes, Stack size 112 bytes, jbuf.o(.text.pjmedia_jbuf_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4568<LI>Call Chain = pjmedia_jbuf_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
</UL>

<P><STRONG><a name="[582]"></a>pjmedia_jbuf_get_frame2</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, jbuf.o(.text.pjmedia_jbuf_get_frame2))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pjmedia_jbuf_get_frame2 &rArr; pjmedia_jbuf_get_frame3 &rArr; jb_framelist_remove_head &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame3
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
</UL>

<P><STRONG><a name="[925]"></a>pjmedia_jbuf_get_frame3</STRONG> (Thumb, 916 bytes, Stack size 40 bytes, jbuf.o(.text.pjmedia_jbuf_get_frame3))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjmedia_jbuf_get_frame3 &rArr; jb_framelist_remove_head &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_remove_head
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame2
</UL>

<P><STRONG><a name="[583]"></a>pjmedia_jbuf_get_state</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, jbuf.o(.text.pjmedia_jbuf_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjmedia_jbuf_get_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_ext
</UL>

<P><STRONG><a name="[759]"></a>pjmedia_jbuf_put_frame2</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, jbuf.o(.text.pjmedia_jbuf_put_frame2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjmedia_jbuf_put_frame2 &rArr; pjmedia_jbuf_put_frame3 &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame3
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[926]"></a>pjmedia_jbuf_put_frame3</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, jbuf.o(.text.pjmedia_jbuf_put_frame3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pjmedia_jbuf_put_frame3 &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_put_at
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_remove_head
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame2
</UL>

<P><STRONG><a name="[581]"></a>pjmedia_jbuf_reset</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, jbuf.o(.text.pjmedia_jbuf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = pjmedia_jbuf_reset &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
</UL>

<P><STRONG><a name="[927]"></a>pjmedia_jbuf_set_adaptive</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, jbuf.o(.text.pjmedia_jbuf_set_adaptive))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_jbuf_set_adaptive &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[928]"></a>pjmedia_jbuf_set_discard</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, jbuf.o(.text.pjmedia_jbuf_set_discard))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_jbuf_set_discard &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[758]"></a>pjmedia_jbuf_set_ptime</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, jbuf.o(.text.pjmedia_jbuf_set_ptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_jbuf_set_ptime &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[a84]"></a>pjmedia_loop_tp_setting_default</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, transport_loop.o(.text.pjmedia_loop_tp_setting_default))
<BR><BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[929]"></a>pjmedia_master_port_create</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, master_port.o(.text.pjmedia_master_port_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_master_port_create &rArr; pj_lock_create_simple_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_simple_mutex
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_get_audio_format_detail
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
</UL>

<P><STRONG><a name="[436]"></a>pjmedia_master_port_destroy</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, master_port.o(.text.pjmedia_master_port_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pjmedia_master_port_destroy &rArr; pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[92a]"></a>pjmedia_master_port_start</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, master_port.o(.text.pjmedia_master_port_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_master_port_start &rArr; pjmedia_clock_start &rArr; pj_thread_create &rArr; pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_start
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
</UL>

<P><STRONG><a name="[92b]"></a>pjmedia_null_port_create</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, null_port.o(.text.pjmedia_null_port_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_null_port_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
</UL>

<P><STRONG><a name="[561]"></a>pjmedia_plc_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, plc_common.o(.text.pjmedia_plc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjmedia_plc_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
</UL>

<P><STRONG><a name="[565]"></a>pjmedia_plc_generate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, plc_common.o(.text.pjmedia_plc_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjmedia_plc_generate &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_recover
</UL>

<P><STRONG><a name="[563]"></a>pjmedia_plc_save</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, plc_common.o(.text.pjmedia_plc_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjmedia_plc_save &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_decode
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_dealloc_codec
</UL>

<P><STRONG><a name="[908]"></a>pjmedia_port_destroy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port_1.o(.text.pjmedia_port_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_port_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_destroy
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
</UL>

<P><STRONG><a name="[426]"></a>pjmedia_port_get_frame</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port_1.o(.text.pjmedia_port_get_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_port_get_frame &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_get_frame
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_callback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb_ext
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_cb
</UL>

<P><STRONG><a name="[8fd]"></a>pjmedia_port_info_init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, port_1.o(.text.pjmedia_port_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjmedia_port_info_init &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_null_port_create
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[427]"></a>pjmedia_port_put_frame</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port_1.o(.text.pjmedia_port_put_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_port_put_frame &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_put_frame
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_callback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_cb_ext
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_cb
</UL>

<P><STRONG><a name="[457]"></a>pjmedia_resample_create</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, resample_resample.o(.text.pjmedia_resample_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_resample_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_GetXOFF
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conf_port
</UL>

<P><STRONG><a name="[901]"></a>pjmedia_resample_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, resample_resample.o(.text.pjmedia_resample_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
</UL>

<P><STRONG><a name="[772]"></a>pjmedia_resample_port_create</STRONG> (Thumb, 656 bytes, Stack size 72 bytes, resample_port.o(.text.pjmedia_resample_port_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pjmedia_resample_port_create &rArr; pjmedia_resample_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_get_audio_format_detail
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[580]"></a>pjmedia_resample_run</STRONG> (Thumb, 632 bytes, Stack size 88 bytes, resample_resample.o(.text.pjmedia_resample_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pjmedia_resample_run &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_SrcLinear
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_put_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resample_get_frame
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame
</UL>

<P><STRONG><a name="[92f]"></a>pjmedia_rtcp_build_rtcp</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, rtcp.o(.text.pjmedia_rtcp_build_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pjmedia_rtcp_build_rtcp &rArr; pj_get_timestamp &rArr; clock_gettime &rArr; UTILS_NanosecondsToTimespec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>

<P><STRONG><a name="[930]"></a>pjmedia_rtcp_build_rtcp_bye</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, rtcp.o(.text.pjmedia_rtcp_build_rtcp_bye))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjmedia_rtcp_build_rtcp_bye &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>

<P><STRONG><a name="[931]"></a>pjmedia_rtcp_build_rtcp_sdes</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, rtcp.o(.text.pjmedia_rtcp_build_rtcp_sdes))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjmedia_rtcp_build_rtcp_sdes &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>

<P><STRONG><a name="[932]"></a>pjmedia_rtcp_fb_build_nack</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_build_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjmedia_rtcp_fb_build_nack &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>

<P><STRONG><a name="[933]"></a>pjmedia_rtcp_fb_decode_sdp2</STRONG> (Thumb, 752 bytes, Stack size 1232 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_decode_sdp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 6080<LI>Call Chain = pjmedia_rtcp_fb_decode_sdp2 &rArr; get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul2
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok2
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
</UL>

<P><STRONG><a name="[934]"></a>pjmedia_rtcp_fb_encode_sdp</STRONG> (Thumb, 476 bytes, Stack size 1216 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_encode_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 6064<LI>Call Chain = pjmedia_rtcp_fb_encode_sdp &rArr; get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_6
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sdp_attr_rtcp_fb
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[936]"></a>pjmedia_rtcp_fb_info_dup</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_info_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_rtcp_fb_info_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[937]"></a>pjmedia_rtcp_fb_parse_nack</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_parse_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjmedia_rtcp_fb_parse_nack &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
</UL>

<P><STRONG><a name="[938]"></a>pjmedia_rtcp_fb_parse_pli</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_parse_pli))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_rtcp_fb_parse_pli &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
</UL>

<P><STRONG><a name="[939]"></a>pjmedia_rtcp_fb_setting_default</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_setting_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjmedia_rtcp_fb_setting_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>

<P><STRONG><a name="[93a]"></a>pjmedia_rtcp_fb_setting_dup</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, rtcp_fb.o(.text.pjmedia_rtcp_fb_setting_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_rtcp_fb_setting_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[93b]"></a>pjmedia_rtcp_init2</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rtcp.o(.text.pjmedia_rtcp_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pjmedia_rtcp_init2 &rArr; pj_get_timestamp &rArr; clock_gettime &rArr; UTILS_NanosecondsToTimespec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp_freq
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[751]"></a>pjmedia_rtcp_rx_rtcp</STRONG> (Thumb, 1432 bytes, Stack size 168 bytes, rtcp.o(.text.pjmedia_rtcp_rx_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pjmedia_rtcp_rx_rtcp &rArr; pjmedia_event_publish &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_parse_pli
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_parse_nack
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
</UL>

<P><STRONG><a name="[756]"></a>pjmedia_rtcp_rx_rtp2</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, rtcp.o(.text.pjmedia_rtcp_rx_rtp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pjmedia_rtcp_rx_rtp2 &rArr; pj_get_timestamp &rArr; clock_gettime &rArr; UTILS_NanosecondsToTimespec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_seq_update
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_seq_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[95e]"></a>pjmedia_rtcp_session_setting_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtcp.o(.text.pjmedia_rtcp_session_setting_default))
<BR><BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[ae3]"></a>pjmedia_rtcp_tx_rtp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtcp.o(.text.pjmedia_rtcp_tx_rtp))
<BR><BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
</UL>

<P><STRONG><a name="[754]"></a>pjmedia_rtp_decode_rtp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rtp.o(.text.pjmedia_rtp_decode_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pjmedia_rtp_decode_rtp &rArr; pj_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[93e]"></a>pjmedia_rtp_encode_rtp</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, rtp.o(.text.pjmedia_rtp_encode_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pjmedia_rtp_encode_rtp &rArr; pj_htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
</UL>

<P><STRONG><a name="[93c]"></a>pjmedia_rtp_seq_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtp.o(.text.pjmedia_rtp_seq_init))
<BR><BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtp2
</UL>

<P><STRONG><a name="[93d]"></a>pjmedia_rtp_seq_update</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rtp.o(.text.pjmedia_rtp_seq_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pjmedia_rtp_seq_update
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtp2
</UL>

<P><STRONG><a name="[93f]"></a>pjmedia_rtp_session_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtp.o(.text.pjmedia_rtp_session_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = pjmedia_rtp_session_init &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
</UL>

<P><STRONG><a name="[454]"></a>pjmedia_rtp_session_init2</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtp.o(.text.pjmedia_rtp_session_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = pjmedia_rtp_session_init2 &rArr; pjmedia_rtp_session_init &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_channel
</UL>

<P><STRONG><a name="[757]"></a>pjmedia_rtp_session_update2</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, rtp.o(.text.pjmedia_rtp_session_update2))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjmedia_rtp_session_update2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[513]"></a>pjmedia_sdp_attr_add</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sdp.o(.text.pjmedia_sdp_attr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_attr_add &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_no_ice_in_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[940]"></a>pjmedia_sdp_attr_clone</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdp.o(.text.pjmedia_sdp_attr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjmedia_sdp_attr_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[3bf]"></a>pjmedia_sdp_attr_create</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sdp.o(.text.pjmedia_sdp_attr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sdp_attr_rtcp_fb
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_media_direction
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[512]"></a>pjmedia_sdp_attr_create_rtcp</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, sdp.o(.text.pjmedia_sdp_attr_create_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjmedia_sdp_attr_create_rtcp &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_no_ice_in_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
</UL>

<P><STRONG><a name="[941]"></a>pjmedia_sdp_attr_create_ssrc</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sdp.o(.text.pjmedia_sdp_attr_create_ssrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjmedia_sdp_attr_create_ssrc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>

<P><STRONG><a name="[51d]"></a>pjmedia_sdp_attr_find</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sdp.o(.text.pjmedia_sdp_attr_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjmedia_sdp_attr_find &rArr; pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul2
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ice_attr
</UL>

<P><STRONG><a name="[520]"></a>pjmedia_sdp_attr_find2</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sdp.o(.text.pjmedia_sdp_attr_find2))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pjmedia_sdp_attr_find2 &rArr; pjmedia_sdp_attr_find &rArr; pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_non_av_fmt
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_remote_nat_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[942]"></a>pjmedia_sdp_attr_get_fmtp</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, sdp.o(.text.pjmedia_sdp_attr_get_fmtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pjmedia_sdp_attr_get_fmtp &rArr; pj_strcmp2 &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
</UL>

<P><STRONG><a name="[943]"></a>pjmedia_sdp_attr_get_rtcp</STRONG> (Thumb, 260 bytes, Stack size 232 bytes, sdp.o(.text.pjmedia_sdp_attr_get_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = pjmedia_sdp_attr_get_rtcp &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_chr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
</UL>

<P><STRONG><a name="[570]"></a>pjmedia_sdp_attr_get_rtpmap</STRONG> (Thumb, 324 bytes, Stack size 240 bytes, sdp.o(.text.pjmedia_sdp_attr_get_rtpmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_to_rtpmap
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_fmt_match
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_non_av_fmt
</UL>

<P><STRONG><a name="[944]"></a>pjmedia_sdp_attr_get_ssrc</STRONG> (Thumb, 264 bytes, Stack size 240 bytes, sdp.o(.text.pjmedia_sdp_attr_get_ssrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_sdp_attr_get_ssrc &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
</UL>

<P><STRONG><a name="[51e]"></a>pjmedia_sdp_attr_remove</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sdp.o(.text.pjmedia_sdp_attr_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjmedia_sdp_attr_remove &rArr; pj_array_erase &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
</UL>

<P><STRONG><a name="[510]"></a>pjmedia_sdp_attr_remove_all</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sdp.o(.text.pjmedia_sdp_attr_remove_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjmedia_sdp_attr_remove_all &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_all_attr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_no_ice_in_sdp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[571]"></a>pjmedia_sdp_attr_to_rtpmap</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdp.o(.text.pjmedia_sdp_attr_to_rtpmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = pjmedia_sdp_attr_to_rtpmap &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[945]"></a>pjmedia_sdp_conn_clone</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdp.o(.text.pjmedia_sdp_conn_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjmedia_sdp_conn_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_media_clone_deactivate
</UL>

<P><STRONG><a name="[6e4]"></a>pjmedia_sdp_media_add_attr</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sdp.o(.text.pjmedia_sdp_media_add_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_media_add_attr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_media_direction
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[946]"></a>pjmedia_sdp_media_clone</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, sdp.o(.text.pjmedia_sdp_media_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>

<P><STRONG><a name="[478]"></a>pjmedia_sdp_media_clone_deactivate</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, sdp.o(.text.pjmedia_sdp_media_clone_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_sdp_media_clone_deactivate &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_media_clone_deactivate
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>

<P><STRONG><a name="[47a]"></a>pjmedia_sdp_media_deactivate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdp.o(.text.pjmedia_sdp_media_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_media_deactivate &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[56f]"></a>pjmedia_sdp_media_find_attr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sdp.o(.text.pjmedia_sdp_media_find_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjmedia_sdp_media_find_attr &rArr; pjmedia_sdp_attr_find &rArr; pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
</UL>

<P><STRONG><a name="[57e]"></a>pjmedia_sdp_media_find_attr2</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sdp.o(.text.pjmedia_sdp_media_find_attr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pjmedia_sdp_media_find_attr2 &rArr; pjmedia_sdp_attr_find &rArr; pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_fmt_match
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_media_direction
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
</UL>

<P><STRONG><a name="[6e3]"></a>pjmedia_sdp_media_remove_all_attr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdp.o(.text.pjmedia_sdp_media_remove_all_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjmedia_sdp_media_remove_all_attr &rArr; pjmedia_sdp_attr_remove_all &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
</UL>
<BR>[Called By]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_media_direction
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[947]"></a>pjmedia_sdp_media_remove_attr</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sdp.o(.text.pjmedia_sdp_media_remove_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjmedia_sdp_media_remove_attr &rArr; pj_array_erase &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
</UL>

<P><STRONG><a name="[645]"></a>pjmedia_sdp_neg_cancel_offer</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_cancel_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_cancel_offer &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_uac_restart
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
</UL>

<P><STRONG><a name="[948]"></a>pjmedia_sdp_neg_create_w_local_offer</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_create_w_local_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = pjmedia_sdp_neg_create_w_local_offer &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
</UL>

<P><STRONG><a name="[634]"></a>pjmedia_sdp_neg_create_w_remote_offer</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_create_w_remote_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pjmedia_sdp_neg_create_w_remote_offer &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[578]"></a>pjmedia_sdp_neg_fmt_match</STRONG> (Thumb, 384 bytes, Stack size 104 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_fmt_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = pjmedia_sdp_neg_fmt_match &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[641]"></a>pjmedia_sdp_neg_get_active_local</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_get_active_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_get_active_local &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[94b]"></a>pjmedia_sdp_neg_get_active_remote</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_get_active_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_get_active_remote &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
</UL>

<P><STRONG><a name="[652]"></a>pjmedia_sdp_neg_get_neg_local</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_get_neg_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_get_neg_local &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[94c]"></a>pjmedia_sdp_neg_get_neg_remote</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_get_neg_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_get_neg_remote &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
</UL>

<P><STRONG><a name="[62f]"></a>pjmedia_sdp_neg_get_state</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_get_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_uac_restart
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[640]"></a>pjmedia_sdp_neg_has_local_answer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_has_local_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_has_local_answer &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
</UL>

<P><STRONG><a name="[631]"></a>pjmedia_sdp_neg_modify_local_offer2</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_modify_local_offer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjmedia_sdp_neg_modify_local_offer2 &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_insert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_media_clone_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[646]"></a>pjmedia_sdp_neg_negotiate</STRONG> (Thumb, 4364 bytes, Stack size 1264 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_negotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_cmp
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_attr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_add_attr
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_media_direction
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_media_clone_deactivate
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[653]"></a>pjmedia_sdp_neg_send_local_offer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_send_local_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pjmedia_sdp_neg_send_local_offer &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[950]"></a>pjmedia_sdp_neg_set_local_answer</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_set_local_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = pjmedia_sdp_neg_set_local_answer &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_sdp_answer
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[633]"></a>pjmedia_sdp_neg_set_remote_answer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_set_remote_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pjmedia_sdp_neg_set_remote_answer &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[632]"></a>pjmedia_sdp_neg_set_remote_offer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_set_remote_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pjmedia_sdp_neg_set_remote_offer &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[635]"></a>pjmedia_sdp_neg_state_str</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[951]"></a>pjmedia_sdp_neg_was_answer_remote</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdp_neg.o(.text.pjmedia_sdp_neg_was_answer_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_sdp_neg_was_answer_remote &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[952]"></a>pjmedia_sdp_parse</STRONG> (Thumb, 2180 bytes, Stack size 336 bytes, sdp.o(.text.pjmedia_sdp_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_line
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_chr
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_advance_n
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdp_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
</UL>

<P><STRONG><a name="[953]"></a>pjmedia_sdp_print</STRONG> (Thumb, 602 bytes, Stack size 64 bytes, sdp.o(.text.pjmedia_sdp_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pjmedia_sdp_print &rArr; print_media_desc &rArr; pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_media_desc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
</UL>

<P><STRONG><a name="[916]"></a>pjmedia_sdp_rtpmap_to_attr</STRONG> (Thumb, 244 bytes, Stack size 184 bytes, sdp.o(.text.pjmedia_sdp_rtpmap_to_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pjmedia_sdp_rtpmap_to_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
</UL>

<P><STRONG><a name="[42d]"></a>pjmedia_sdp_session_clone</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, sdp.o(.text.pjmedia_sdp_session_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_offer
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_answer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_send_local_offer
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_body
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_sdp
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[94e]"></a>pjmedia_sdp_transport_cmp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdp.o(.text.pjmedia_sdp_transport_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pjmedia_sdp_transport_cmp &rArr; pjmedia_sdp_transport_get_proto &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
</UL>

<P><STRONG><a name="[935]"></a>pjmedia_sdp_transport_get_proto</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, sdp.o(.text.pjmedia_sdp_transport_get_proto))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pjmedia_sdp_transport_get_proto &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok2
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_cmp
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
</UL>

<P><STRONG><a name="[949]"></a>pjmedia_sdp_validate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdp.o(.text.pjmedia_sdp_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pjmedia_sdp_validate &rArr; pjmedia_sdp_validate2 &rArr; pj_strtoul3 &rArr; pj_strltrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
</UL>

<P><STRONG><a name="[94a]"></a>pjmedia_sdp_validate2</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, sdp.o(.text.pjmedia_sdp_validate2))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pjmedia_sdp_validate2 &rArr; pj_strtoul3 &rArr; pj_strltrim &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul3
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
</UL>

<P><STRONG><a name="[955]"></a>pjmedia_silence_det_apply</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, silencedet.o(.text.pjmedia_silence_det_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = pjmedia_silence_det_apply &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_detect
</UL>

<P><STRONG><a name="[562]"></a>pjmedia_silence_det_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, silencedet.o(.text.pjmedia_silence_det_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjmedia_silence_det_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_alloc_codec
</UL>

<P><STRONG><a name="[564]"></a>pjmedia_silence_det_detect</STRONG> (Thumb, 196 bytes, Stack size 28 bytes, silencedet.o(.text.pjmedia_silence_det_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4500<LI>Call Chain = pjmedia_silence_det_detect &rArr; pjmedia_silence_det_apply &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g711_encode
</UL>

<P><STRONG><a name="[773]"></a>pjmedia_snd_port_connect</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sound_port.o(.text.pjmedia_snd_port_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjmedia_snd_port_connect &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_get_audio_format_detail
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[8ff]"></a>pjmedia_snd_port_create</STRONG> (Thumb, 102 bytes, Stack size 152 bytes, sound_port.o(.text.pjmedia_snd_port_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5632<LI>Call Chain = pjmedia_snd_port_create &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_default_param
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
</UL>

<P><STRONG><a name="[76f]"></a>pjmedia_snd_port_create2</STRONG> (Thumb, 592 bytes, Stack size 520 bytes, sound_port.o(.text.pjmedia_snd_port_create2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5480<LI>Call Chain = pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_destroy
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_stop
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_start
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_create
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_get_info
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_destroy
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_init
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_set_ec
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create_player
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[900]"></a>pjmedia_snd_port_create_player</STRONG> (Thumb, 92 bytes, Stack size 152 bytes, sound_port.o(.text.pjmedia_snd_port_create_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 5632<LI>Call Chain = pjmedia_snd_port_create_player &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_default_param
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
</UL>

<P><STRONG><a name="[435]"></a>pjmedia_snd_port_destroy</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sound_port.o(.text.pjmedia_snd_port_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjmedia_snd_port_destroy &rArr; pjmedia_echo_destroy &rArr; pjmedia_delay_buf_destroy &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_destroy
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_stop
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[434]"></a>pjmedia_snd_port_disconnect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sound_port.o(.text.pjmedia_snd_port_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_snd_port_disconnect &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[95a]"></a>pjmedia_snd_port_get_ec_stat</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sound_port.o(.text.pjmedia_snd_port_get_ec_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_snd_port_get_ec_stat &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_get_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_ec_stat
</UL>

<P><STRONG><a name="[430]"></a>pjmedia_snd_port_get_snd_stream</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sound_port.o(.text.pjmedia_snd_port_get_snd_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_snd_port_get_snd_stream &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_initial_aud_param
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>

<P><STRONG><a name="[770]"></a>pjmedia_snd_port_param_default</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sound_port.o(.text.pjmedia_snd_port_param_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjmedia_snd_port_param_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[958]"></a>pjmedia_snd_port_set_ec</STRONG> (Thumb, 392 bytes, Stack size 152 bytes, sound_port.o(.text.pjmedia_snd_port_set_ec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_set_cap
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_cap
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_param
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_destroy
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_create2
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
</UL>

<P><STRONG><a name="[95d]"></a>pjmedia_stream_create</STRONG> (Thumb, 2120 bytes, Stack size 152 bytes, stream.o(.text.pjmedia_stream_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pjmedia_stream_create &rArr; pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_info_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_get_audio_format_detail
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_info_dup
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_init2
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_session_setting_default
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_set_adaptive
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_set_discard
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_create
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_codec_mgr
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_alloc_codec
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_param_clone
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_attach2
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_channel
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_sdes
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[960]"></a>pjmedia_stream_destroy</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, stream.o(.text.pjmedia_stream_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_encode_rtp
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_destroy
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_dealloc_codec
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
</UL>

<P><STRONG><a name="[962]"></a>pjmedia_stream_get_info</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stream.o(.text.pjmedia_stream_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjmedia_stream_get_info &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[a71]"></a>pjmedia_stream_get_port</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stream.o(.text.pjmedia_stream_get_port))
<BR><BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[963]"></a>pjmedia_stream_get_stat</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stream.o(.text.pjmedia_stream_get_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjmedia_stream_get_stat &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[964]"></a>pjmedia_stream_info_from_sdp</STRONG> (Thumb, 1256 bytes, Stack size 136 bytes, stream_info.o(.text.pjmedia_stream_info_from_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 6216<LI>Call Chain = pjmedia_stream_info_from_sdp &rArr; pjmedia_rtcp_fb_decode_sdp2 &rArr; get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_cmp
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_get_type
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_codec_mgr
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[574]"></a>pjmedia_stream_info_parse_fmtp</STRONG> (Thumb, 700 bytes, Stack size 88 bytes, stream_common.o(.text.pjmedia_stream_info_parse_fmtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjmedia_stream_info_parse_fmtp &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_fmtp
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_audio_codec_info_param
</UL>

<P><STRONG><a name="[965]"></a>pjmedia_stream_send_rtcp_bye</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stream.o(.text.pjmedia_stream_send_rtcp_bye))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = pjmedia_stream_send_rtcp_bye &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
</UL>

<P><STRONG><a name="[961]"></a>pjmedia_stream_send_rtcp_sdes</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stream.o(.text.pjmedia_stream_send_rtcp_sdes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = pjmedia_stream_send_rtcp_sdes &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[966]"></a>pjmedia_stream_set_dtmf_callback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stream.o(.text.pjmedia_stream_set_dtmf_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pjmedia_stream_set_dtmf_callback &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[967]"></a>pjmedia_stream_set_dtmf_event_callback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stream.o(.text.pjmedia_stream_set_dtmf_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pjmedia_stream_set_dtmf_event_callback &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[968]"></a>pjmedia_stream_start</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stream.o(.text.pjmedia_stream_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = pjmedia_stream_start &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
</UL>

<P><STRONG><a name="[1c4]"></a>pjmedia_strerror</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, errno_2.o(.text.pjmedia_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjmedia_strerror &rArr; pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> endpoint.o(.text.pjmedia_endpt_create2)
</UL>
<P><STRONG><a name="[969]"></a>pjmedia_transport_loop_create2</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, transport_loop.o(.text.pjmedia_transport_loop_create2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjmedia_transport_loop_create2 &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[96a]"></a>pjmedia_transport_loop_disable_rx</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, transport_loop.o(.text.pjmedia_transport_loop_disable_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjmedia_transport_loop_disable_rx &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[96b]"></a>pjmedia_transport_udp_attach</STRONG> (Thumb, 528 bytes, Stack size 96 bytes, transport_udp.o(.text.pjmedia_transport_udp_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = pjmedia_transport_udp_attach &rArr; pj_ioqueue_register_sock &rArr; pj_ioqueue_register_sock2 &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_concurrency
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_pool
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_ioqueue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_destroy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[96c]"></a>pjmedia_type_name</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, types_1.o(.text.pjmedia_type_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjmedia_type_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[909]"></a>pjmedia_wsola_create</STRONG> (Thumb, 664 bytes, Stack size 48 bytes, wsola.o(.text.pjmedia_wsola_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjmedia_wsola_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_wsola_create
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_create
</UL>

<P><STRONG><a name="[90a]"></a>pjmedia_wsola_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsola.o(.text.pjmedia_wsola_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_destroy
</UL>

<P><STRONG><a name="[96d]"></a>pjmedia_wsola_discard</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, wsola.o(.text.pjmedia_wsola_discard))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjmedia_wsola_discard &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shrink_buffer
</UL>

<P><STRONG><a name="[90b]"></a>pjmedia_wsola_generate</STRONG> (Thumb, 1748 bytes, Stack size 96 bytes, wsola.o(.text.pjmedia_wsola_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pjmedia_wsola_generate &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pitch
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_wsola_generate
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
</UL>

<P><STRONG><a name="[90e]"></a>pjmedia_wsola_save</STRONG> (Thumb, 3180 bytes, Stack size 56 bytes, wsola.o(.text.pjmedia_wsola_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pjmedia_wsola_save &rArr; wsola_fade_out
</UL>
<BR>[Calls]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsola_fade_out
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plc_wsola_save
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
</UL>

<P><STRONG><a name="[96f]"></a>pjnath_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, errno_4.o(.text.pjnath_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjnath_init &rArr; pj_register_strerror &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[7a0]"></a>pjnath_perror</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, errno_4.o(.text.pjnath_perror))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pjnath_perror &rArr; pj_perror_1 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_rx_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_rx_data
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
</UL>

<P><STRONG><a name="[970]"></a>pjpidf_create</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, pidf.o(.text.pjpidf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjpidf_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[971]"></a>pjpidf_parse</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pidf.o(.text.pjpidf_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[972]"></a>pjpidf_pres_add_tuple</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pidf.o(.text.pjpidf_pres_add_tuple))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjpidf_pres_add_tuple &rArr; pjpidf_tuple_construct &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[974]"></a>pjpidf_pres_get_first_tuple</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pidf.o(.text.pjpidf_pres_get_first_tuple))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjpidf_pres_get_first_tuple &rArr; pj_xml_find_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[975]"></a>pjpidf_pres_get_next_tuple</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pidf.o(.text.pjpidf_pres_get_next_tuple))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjpidf_pres_get_next_tuple &rArr; pj_xml_find_next_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_next_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[976]"></a>pjpidf_status_is_basic_open</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pidf.o(.text.pjpidf_status_is_basic_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjpidf_status_is_basic_open &rArr; pj_xml_find_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[977]"></a>pjpidf_status_set_basic_open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pidf.o(.text.pjpidf_status_set_basic_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjpidf_status_set_basic_open &rArr; pj_xml_find_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[973]"></a>pjpidf_tuple_construct</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, pidf.o(.text.pjpidf_tuple_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjpidf_tuple_construct &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_attr
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_add_tuple
</UL>

<P><STRONG><a name="[978]"></a>pjpidf_tuple_get_contact</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pidf.o(.text.pjpidf_tuple_get_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjpidf_tuple_get_contact &rArr; pj_xml_find_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[979]"></a>pjpidf_tuple_get_id</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pidf.o(.text.pjpidf_tuple_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjpidf_tuple_get_id &rArr; pj_xml_find_attr &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[97a]"></a>pjpidf_tuple_get_status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pidf.o(.text.pjpidf_tuple_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjpidf_tuple_get_status &rArr; pj_xml_find_node &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[97b]"></a>pjpidf_tuple_set_contact</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pidf.o(.text.pjpidf_tuple_set_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjpidf_tuple_set_contact &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[97c]"></a>pjpidf_tuple_set_timestamp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pidf.o(.text.pjpidf_tuple_set_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjpidf_tuple_set_timestamp &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[97d]"></a>pjrpid_add_element</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, rpid.o(.text.pjrpid_add_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pjrpid_add_element &rArr; pj_xml_attr_new &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_GUID_STRING_LENGTH
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_attr
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_attr_new
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_node_new
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
</UL>

<P><STRONG><a name="[97f]"></a>pjrpid_get_element</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, rpid.o(.text.pjrpid_get_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjrpid_get_element &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>

<P><STRONG><a name="[980]"></a>pjsip_100rel_attach</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sip_100rel.o(.text.pjsip_100rel_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = pjsip_100rel_attach &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
</UL>

<P><STRONG><a name="[63f]"></a>pjsip_100rel_create_prack</STRONG> (Thumb, 596 bytes, Stack size 144 bytes, sip_100rel.o(.text.pjsip_100rel_create_prack))
<BR><BR>[Stack]<UL><LI>Max Depth = 5624<LI>Call Chain = pjsip_100rel_create_prack &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
</UL>

<P><STRONG><a name="[981]"></a>pjsip_100rel_end_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sip_100rel.o(.text.pjsip_100rel_end_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_100rel_end_session &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
</UL>

<P><STRONG><a name="[982]"></a>pjsip_100rel_init_module</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sip_100rel.o(.text.pjsip_100rel_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjsip_100rel_init_module &rArr; pjsip_endpt_register_module &rArr; pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[637]"></a>pjsip_100rel_is_reliable</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sip_100rel.o(.text.pjsip_100rel_is_reliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjsip_100rel_is_reliable &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[64c]"></a>pjsip_100rel_on_rx_prack</STRONG> (Thumb, 640 bytes, Stack size 48 bytes, sip_100rel.o(.text.pjsip_100rel_on_rx_prack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8984<LI>Call Chain = pjsip_100rel_on_rx_prack &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
</UL>

<P><STRONG><a name="[642]"></a>pjsip_100rel_send_prack</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sip_100rel.o(.text.pjsip_100rel_send_prack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8792<LI>Call Chain = pjsip_100rel_send_prack &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
</UL>

<P><STRONG><a name="[660]"></a>pjsip_100rel_tx_response</STRONG> (Thumb, 1064 bytes, Stack size 88 bytes, sip_100rel.o(.text.pjsip_100rel_tx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 9024<LI>Call Chain = pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_size
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_require_hdr_create
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
</UL>

<P><STRONG><a name="[786]"></a>pjsip_accept_hdr_create</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_accept_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_accept_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_accept
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[986]"></a>pjsip_allow_events_hdr_create</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, evsub_msg.o(.text.pjsip_allow_events_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_allow_events_hdr_create &rArr; pjsip_generic_array_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
</UL>

<P><STRONG><a name="[787]"></a>pjsip_allow_hdr_create</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_allow_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_allow_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_allow
</UL>

<P><STRONG><a name="[988]"></a>pjsip_auth_clt_clone</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sip_auth_client.o(.text.pjsip_auth_clt_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_auth_clt_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
</UL>

<P><STRONG><a name="[48b]"></a>pjsip_auth_clt_deinit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sip_auth_client.o(.text.pjsip_auth_clt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = pjsip_auth_clt_deinit &rArr; pjsip_endpt_release_pool &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
</UL>

<P><STRONG><a name="[45b]"></a>pjsip_auth_clt_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sip_auth_client.o(.text.pjsip_auth_clt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_auth_clt_init &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
</UL>

<P><STRONG><a name="[467]"></a>pjsip_auth_clt_init_req</STRONG> (Thumb, 436 bytes, Stack size 80 bytes, sip_auth_client.o(.text.pjsip_auth_clt_init_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pjsip_auth_clt_init_req &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
</UL>

<P><STRONG><a name="[989]"></a>pjsip_auth_clt_pref_dup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sip_auth_client.o(.text.pjsip_auth_clt_pref_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pjsip_auth_clt_pref_dup &rArr; pj_strdup_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[5b5]"></a>pjsip_auth_clt_reinit_req</STRONG> (Thumb, 2452 bytes, Stack size 440 bytes, sip_auth_client.o(.text.pjsip_auth_clt_reinit_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = pjsip_auth_clt_reinit_req &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strassign
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_proxy_authorization_hdr_create
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_create
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_bye_response
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
</UL>

<P><STRONG><a name="[746]"></a>pjsip_auth_clt_set_credentials</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, sip_auth_client.o(.text.pjsip_auth_clt_set_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_auth_clt_set_credentials &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_credentials
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_credentials
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[747]"></a>pjsip_auth_clt_set_prefs</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sip_auth_client.o(.text.pjsip_auth_clt_set_prefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_auth_clt_set_prefs &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_prefs
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[98a]"></a>pjsip_auth_create_digest</STRONG> (Thumb, 452 bytes, Stack size 216 bytes, sip_auth_client.o(.text.pjsip_auth_create_digest))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pjsip_auth_create_digest &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_final
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_update
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_init
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digestNtoStr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
</UL>

<P><STRONG><a name="[600]"></a>pjsip_auth_init_parser</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, sip_auth_parser.o(.text.pjsip_auth_init_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pjsip_auth_init_parser &rArr; pjsip_register_hdr_parser &rArr; int_register_parser &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
</UL>

<P><STRONG><a name="[788]"></a>pjsip_authorization_hdr_create</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sip_auth_msg.o(.text.pjsip_authorization_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_authorization_hdr_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_authorization
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
</UL>

<P><STRONG><a name="[789]"></a>pjsip_cid_hdr_create</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_cid_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_cid_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_call_id
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
</UL>

<P><STRONG><a name="[78a]"></a>pjsip_clen_hdr_create</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_clen_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_clen_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_len
</UL>

<P><STRONG><a name="[164]"></a>pjsip_clone_text_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_clone_text_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_clone_text_data &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 5]<UL><LI> sip_parser.o(.text.int_parse_msg)
<LI> sip_multipart.o(.text.pjsip_multipart_parse)
<LI> mwi.o(.text.pjsip_mwi_current_notify)
<LI> sip_msg.o(.text.pjsip_msg_body_create)
<LI> sip_xfer.o(.text.pjsip_xfer_notify)
</UL>
<P><STRONG><a name="[481]"></a>pjsip_contact_hdr_create</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_contact_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_contact_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
</UL>

<P><STRONG><a name="[98f]"></a>pjsip_create_sdp_body</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sip_inv.o(.text.pjsip_create_sdp_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_create_sdp_body &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[990]"></a>pjsip_cred_info_dup</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, sip_auth_client.o(.text.pjsip_cred_info_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_cred_info_dup &rArr; pj_strdup_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_dup
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[78c]"></a>pjsip_cseq_hdr_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_cseq_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_cseq_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
</UL>

<P><STRONG><a name="[78b]"></a>pjsip_ctype_hdr_create</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_ctype_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_ctype_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
</UL>

<P><STRONG><a name="[547]"></a>pjsip_dlg_add_usage</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_add_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_insert
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
</UL>

<P><STRONG><a name="[5bb]"></a>pjsip_dlg_create_request</STRONG> (Thumb, 512 bytes, Stack size 272 bytes, sip_dialog.o(.text.pjsip_dlg_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5480<LI>Call Chain = pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_set_route
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
</UL>

<P><STRONG><a name="[46e]"></a>pjsip_dlg_create_response</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sip_dialog.o(.text.pjsip_dlg_create_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = pjsip_dlg_create_response &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_bye
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[991]"></a>pjsip_dlg_create_uac</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, sip_dialog.o(.text.pjsip_dlg_create_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsip_dlg_create_uac &rArr; pjsip_dlg_create_uac2 &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[992]"></a>pjsip_dlg_create_uac2</STRONG> (Thumb, 876 bytes, Stack size 56 bytes, sip_dialog.o(.text.pjsip_dlg_create_uac2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = pjsip_dlg_create_uac2 &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc_tolower
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cid_hdr_create
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_to_hdr_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_from_hdr_create
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_uri
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac
</UL>

<P><STRONG><a name="[993]"></a>pjsip_dlg_create_uas_and_inc_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sip_dialog.o(.text.pjsip_dlg_create_uas_and_inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 5496<LI>Call Chain = pjsip_dlg_create_uas_and_inc_lock &rArr; create_uas_dialog &rArr; pjsip_dlg_update_remote_cap &rArr; pjsip_dlg_set_remote_cap_hdr &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[489]"></a>pjsip_dlg_dec_lock</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sip_dialog.o(.text.pjsip_dlg_dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_has_usage
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_sdp_answer
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_terminate
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hangup_timer_cb
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_failed_nego_cb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_init_complete_cb
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[549]"></a>pjsip_dlg_dec_session</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_dec_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_dlg_dec_session &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_on_destroy
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[738]"></a>pjsip_dlg_fork</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, sip_dialog.o(.text.pjsip_dlg_fork))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_dlg_fork &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_set_route
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_register_dlg
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_clone
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
</UL>

<P><STRONG><a name="[a29]"></a>pjsip_dlg_get_inv_session</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sip_inv.o(.text.pjsip_dlg_get_inv_session))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
</UL>

<P><STRONG><a name="[995]"></a>pjsip_dlg_get_remote_cap_hdr</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_get_remote_cap_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
</UL>

<P><STRONG><a name="[546]"></a>pjsip_dlg_has_usage</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, sip_dialog.o(.text.pjsip_dlg_has_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_dlg_has_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
</UL>

<P><STRONG><a name="[543]"></a>pjsip_dlg_inc_lock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sip_dialog.o(.text.pjsip_dlg_inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pjsip_dlg_inc_lock &rArr; pj_grp_lock_acquire &rArr; grp_lock_acquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_sdp_answer
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_terminate
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[664]"></a>pjsip_dlg_inc_session</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_inc_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_dlg_inc_session &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[65f]"></a>pjsip_dlg_modify_response</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_modify_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_dlg_modify_response &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
</UL>

<P><STRONG><a name="[6df]"></a>pjsip_dlg_on_rx_request</STRONG> (Thumb, 712 bytes, Stack size 160 bytes, sip_dialog.o(.text.pjsip_dlg_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 9000<LI>Call Chain = pjsip_dlg_on_rx_request &rArr; pjsip_endpt_respond_stateless &rArr; pjsip_endpt_send_response &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
</UL>

<P><STRONG><a name="[6e1]"></a>pjsip_dlg_on_rx_response</STRONG> (Thumb, 1200 bytes, Stack size 88 bytes, sip_dialog.o(.text.pjsip_dlg_on_rx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8880<LI>Call Chain = pjsip_dlg_on_rx_response &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_dlg
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
</UL>

<P><STRONG><a name="[6e2]"></a>pjsip_dlg_on_tsx_state</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, sip_dialog.o(.text.pjsip_dlg_on_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = pjsip_dlg_on_tsx_state &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_state_str
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_tsx_state
</UL>

<P><STRONG><a name="[997]"></a>pjsip_dlg_remote_has_cap</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_remote_has_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pjsip_dlg_remote_has_cap &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[998]"></a>pjsip_dlg_remove_remote_cap_hdr</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, sip_dialog.o(.text.pjsip_dlg_remove_remote_cap_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = pjsip_dlg_remove_remote_cap_hdr &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
</UL>

<P><STRONG><a name="[725]"></a>pjsip_dlg_respond</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, sip_dialog.o(.text.pjsip_dlg_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pjsip_dlg_respond &rArr; pjsip_dlg_send_response &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[662]"></a>pjsip_dlg_send_request</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, sip_dialog.o(.text.pjsip_dlg_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8792<LI>Call Chain = pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_send_prack
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
</UL>

<P><STRONG><a name="[63c]"></a>pjsip_dlg_send_response</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = pjsip_dlg_send_response &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_bye
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[99d]"></a>pjsip_dlg_set_remote_cap_hdr</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, sip_dialog.o(.text.pjsip_dlg_set_remote_cap_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = pjsip_dlg_set_remote_cap_hdr &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_remote_cap_hdr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
</UL>

<P><STRONG><a name="[745]"></a>pjsip_dlg_set_route_set</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_set_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_dlg_set_route_set &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[412]"></a>pjsip_dlg_set_transport</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sip_dialog.o(.text.pjsip_dlg_set_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_dlg_set_transport &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_add_ref
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_update_contact
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[4e2]"></a>pjsip_dlg_set_via_sent_by</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sip_dialog.o(.text.pjsip_dlg_set_via_sent_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_dlg_set_via_sent_by &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_via
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[3ae]"></a>pjsip_dlg_try_inc_lock</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sip_dialog.o(.text.pjsip_dlg_try_inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_dlg_try_inc_lock &rArr; pj_grp_lock_tryacquire &rArr; grp_lock_tryacquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_tryacquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
</UL>

<P><STRONG><a name="[486]"></a>pjsip_dlg_update_remote_cap</STRONG> (Thumb, 588 bytes, Stack size 320 bytes, sip_dialog.o(.text.pjsip_dlg_update_remote_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = pjsip_dlg_update_remote_cap &rArr; pjsip_dlg_set_remote_cap_hdr &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remove_remote_cap_hdr
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_array_hdr_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
</UL>

<P><STRONG><a name="[9a0]"></a>pjsip_endpt_acquire_transport2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sip_endpoint.o(.text.pjsip_endpt_acquire_transport2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = pjsip_endpt_acquire_transport2 &rArr; pjsip_tpmgr_acquire_transport2 &rArr; pjsip_transport_add_ref &rArr; pj_hash_get &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_resolver_cb
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[6cd]"></a>pjsip_endpt_add_capability</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, sip_endpoint.o(.text.pjsip_endpt_add_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_allow_hdr_create
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_supported_hdr_create
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_load
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_100rel_load
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_init_module
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_module
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_init_module
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_init
</UL>

<P><STRONG><a name="[6db]"></a>pjsip_endpt_atexit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sip_endpoint.o(.text.pjsip_endpt_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_endpt_atexit &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_module
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_init_module
</UL>

<P><STRONG><a name="[4b5]"></a>pjsip_endpt_cancel_timer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sip_endpoint.o(.text.pjsip_endpt_cancel_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_end_session
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_end_session
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_unpublish
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_delay_before_refresh
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[9a2]"></a>pjsip_endpt_create</STRONG> (Thumb, 568 bytes, Stack size 48 bytes, sip_endpoint.o(.text.pjsip_endpt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = pjsip_endpt_create &rArr; pjsip_tpmgr_destroy &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostname
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_destroy
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_create
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_set_max_timed_out_per_poll
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_set_lock
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_destroy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_create
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_max_fwd_hdr_create
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_sip_parser
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolver_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[9a8]"></a>pjsip_endpt_create_ack</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, sip_util.o(.text.pjsip_endpt_create_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = pjsip_endpt_create_ack &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_ack_method
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
</UL>

<P><STRONG><a name="[9aa]"></a>pjsip_endpt_create_cancel</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, sip_util.o(.text.pjsip_endpt_create_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = pjsip_endpt_create_cancel &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_cancel_method
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>

<P><STRONG><a name="[45a]"></a>pjsip_endpt_create_pool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sip_endpoint.o(.text.pjsip_endpt_create_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = pjsip_endpt_create_pool &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_load
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
</UL>

<P><STRONG><a name="[466]"></a>pjsip_endpt_create_request_from_hdr</STRONG> (Thumb, 392 bytes, Stack size 248 bytes, sip_util.o(.text.pjsip_endpt_create_request_from_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 5208<LI>Call Chain = pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_tdata
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_set_to
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_set_from
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cid_hdr_create
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_create
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
</UL>

<P><STRONG><a name="[9ae]"></a>pjsip_endpt_create_resolver</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sip_endpoint.o(.text.pjsip_endpt_create_resolver))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjsip_endpt_create_resolver &rArr; pj_dns_resolver_create &rArr; pj_dns_resolver_destroy &rArr; pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_create
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[778]"></a>pjsip_endpt_create_response</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, sip_util.o(.text.pjsip_endpt_create_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = pjsip_endpt_create_response &rArr; pjsip_tx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_tdata
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
</UL>

<P><STRONG><a name="[9ac]"></a>pjsip_endpt_create_tdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_create_tdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pjsip_endpt_create_tdata &rArr; pjsip_tx_data_create &rArr; pj_atomic_create &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
</UL>

<P><STRONG><a name="[9b0]"></a>pjsip_endpt_destroy</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, sip_endpoint.o(.text.pjsip_endpt_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = pjsip_endpt_destroy &rArr; pjsip_tpmgr_destroy &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_destroy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_destroy
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolver_destroy
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_sip_parser
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[4db]"></a>pjsip_endpt_get_capability</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_get_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_endpt_get_capability &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
</UL>

<P><STRONG><a name="[a33]"></a>pjsip_endpt_get_ioqueue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_get_ioqueue))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_to_ioqueue
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[5f1]"></a>pjsip_endpt_get_request_headers</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_get_request_headers))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
</UL>

<P><STRONG><a name="[a4b]"></a>pjsip_endpt_get_timer_heap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_get_timer_heap))
<BR><BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_resched_retransmission
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_schedule_timer
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_registration
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[6a6]"></a>pjsip_endpt_get_tpmgr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_get_tpmgr))
<BR><BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
</UL>

<P><STRONG><a name="[3fc]"></a>pjsip_endpt_handle_events2</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, sip_endpoint.o(.text.pjsip_endpt_handle_events2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5408<LI>Call Chain = pjsip_endpt_handle_events2 &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_netos_error
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_sleep
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_thread
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_handle_events
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[9b2]"></a>pjsip_endpt_has_capability</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sip_endpoint.o(.text.pjsip_endpt_has_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjsip_endpt_has_capability &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
</UL>

<P><STRONG><a name="[9b3]"></a>pjsip_endpt_log_error</STRONG> (Thumb, 132 bytes, Stack size 296 bytes, sip_endpoint.o(.text.pjsip_endpt_log_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = pjsip_endpt_log_error &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
</UL>

<P><STRONG><a name="[63a]"></a>pjsip_endpt_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_name))
<BR><BR>[Called By]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
</UL>

<P><STRONG><a name="[527]"></a>pjsip_endpt_process_rx_data</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, sip_endpoint.o(.text.pjsip_endpt_process_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = pjsip_endpt_process_rx_data &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_read
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_read
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
</UL>

<P><STRONG><a name="[983]"></a>pjsip_endpt_register_module</STRONG> (Thumb, 660 bytes, Stack size 24 bytes, sip_endpoint.o(.text.pjsip_endpt_register_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjsip_endpt_register_module &rArr; pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_search
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_write
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_write
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_create
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_init_module
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_usage_init
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_init_module
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_init_module
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_init_module
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_init_module
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_start
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_init
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[45c]"></a>pjsip_endpt_release_pool</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sip_endpoint.o(.text.pjsip_endpt_release_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = pjsip_endpt_release_pool &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_getobjname
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_on_destroy
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_unload
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_layer_destroy
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_unload
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_destroy
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_unload
</UL>

<P><STRONG><a name="[9b5]"></a>pjsip_endpt_resolve</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 8704<LI>Call Chain = pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
</UL>

<P><STRONG><a name="[5df]"></a>pjsip_endpt_respond</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, sip_util_statefull.o(.text.pjsip_endpt_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = pjsip_endpt_respond &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
</UL>

<P><STRONG><a name="[6e0]"></a>pjsip_endpt_respond_stateless</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, sip_util.o(.text.pjsip_endpt_respond_stateless))
<BR><BR>[Stack]<UL><LI>Max Depth = 8840<LI>Call Chain = pjsip_endpt_respond_stateless &rArr; pjsip_endpt_send_response &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[6a8]"></a>pjsip_endpt_schedule_timer_dbg</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sip_endpoint.o(.text.pjsip_endpt_schedule_timer_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_registration
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_timer_cb
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_start
</UL>

<P><STRONG><a name="[9b7]"></a>pjsip_endpt_schedule_timer_w_grp_lock_dbg</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sip_endpoint.o(.text.pjsip_endpt_schedule_timer_w_grp_lock_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>

<P><STRONG><a name="[9b8]"></a>pjsip_endpt_send_request</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sip_util_statefull.o(.text.pjsip_endpt_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = pjsip_endpt_send_request &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[99a]"></a>pjsip_endpt_send_request_stateless</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, sip_util.o(.text.pjsip_endpt_send_request_stateless))
<BR><BR>[Stack]<UL><LI>Max Depth = 8760<LI>Call Chain = pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_resolve
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
</UL>

<P><STRONG><a name="[77b]"></a>pjsip_endpt_send_response</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, sip_util.o(.text.pjsip_endpt_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8744<LI>Call Chain = pjsip_endpt_send_response &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_resolve
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[9bb]"></a>pjsip_endpt_set_resolver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pjsip_endpt_set_resolver))
<BR><BR>[Calls]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolver_set_resolver
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[9bd]"></a>pjsip_endpt_unregister_module</STRONG> (Thumb, 284 bytes, Stack size 112 bytes, sip_endpoint.o(.text.pjsip_endpt_unregister_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_endpt_unregister_module &rArr; pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_write
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_init_module
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_init_module
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
</UL>

<P><STRONG><a name="[545]"></a>pjsip_event_hdr_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, evsub_msg.o(.text.pjsip_event_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_event_hdr_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
</UL>

<P><STRONG><a name="[b43]"></a>pjsip_event_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_util.o(.text.pjsip_event_str))
<BR><BR>[Called By]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>

<P><STRONG><a name="[9be]"></a>pjsip_evsub_accept</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, evsub.o(.text.pjsip_evsub_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsip_evsub_accept &rArr; pjsip_dlg_send_response &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_accept
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_accept
</UL>

<P><STRONG><a name="[9bf]"></a>pjsip_evsub_add_header</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, evsub.o(.text.pjsip_evsub_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjsip_evsub_add_header &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[9c0]"></a>pjsip_evsub_create_uac</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, evsub.o(.text.pjsip_evsub_create_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsip_evsub_create_uac &rArr; evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
</UL>

<P><STRONG><a name="[9c1]"></a>pjsip_evsub_create_uas</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, evsub.o(.text.pjsip_evsub_create_uas))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = pjsip_evsub_create_uas &rArr; evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_names
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_copy
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
</UL>

<P><STRONG><a name="[9c2]"></a>pjsip_evsub_current_notify</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, evsub.o(.text.pjsip_evsub_current_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5560<LI>Call Chain = pjsip_evsub_current_notify &rArr; pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
</UL>

<P><STRONG><a name="[779]"></a>pjsip_evsub_get_allow_events_hdr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_get_allow_events_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_evsub_get_allow_events_hdr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
</UL>

<P><STRONG><a name="[6ec]"></a>pjsip_evsub_get_mod_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_get_mod_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_evsub_get_mod_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_get_status
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_server_timeout
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_client_refresh
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_refresh
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_tsx_state
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_state
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_server_timeout
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_client_refresh
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_notify
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_refresh
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_tsx_state
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_server_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_client_refresh
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_notify
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_refresh
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_tsx_state
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_state
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_rx_notify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_state
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_rx_notify
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_tsx_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[6ee]"></a>pjsip_evsub_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_refresh
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_state
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_refresh
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_refresh
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
</UL>

<P><STRONG><a name="[6ed]"></a>pjsip_evsub_get_state_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_get_state_name))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[aa3]"></a>pjsip_evsub_get_termination_reason</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_get_termination_reason))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[9c3]"></a>pjsip_evsub_init_module</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, evsub.o(.text.pjsip_evsub_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_evsub_init_module &rArr; pjsip_allow_events_hdr_create &rArr; pjsip_generic_array_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_register_strerror
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_parser
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_allow_events_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[9c4]"></a>pjsip_evsub_init_parser</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, evsub_msg.o(.text.pjsip_evsub_init_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pjsip_evsub_init_parser &rArr; pjsip_register_hdr_parser &rArr; int_register_parser &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
</UL>

<P><STRONG><a name="[6f0]"></a>pjsip_evsub_initiate</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, evsub.o(.text.pjsip_evsub_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512<LI>Call Chain = pjsip_evsub_initiate &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_initiate
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_client_refresh
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_initiate
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_client_refresh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_client_refresh
</UL>

<P><STRONG><a name="[9c5]"></a>pjsip_evsub_instance</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_evsub_instance &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[767]"></a>pjsip_evsub_notify</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, evsub.o(.text.pjsip_evsub_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5544<LI>Call Chain = pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_current_notify
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>

<P><STRONG><a name="[9c7]"></a>pjsip_evsub_register_pkg</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, evsub.o(.text.pjsip_evsub_register_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pjsip_evsub_register_pkg &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
</UL>
<BR>[Called By]<UL><LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_init_module
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_init_module
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_init_module
</UL>

<P><STRONG><a name="[6f1]"></a>pjsip_evsub_send_request</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, evsub.o(.text.pjsip_evsub_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8816<LI>Call Chain = pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_server_timeout
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_client_refresh
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_refresh
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_send_request
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_client_refresh
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_refresh
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_send_request
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_server_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_client_refresh
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_refresh
</UL>

<P><STRONG><a name="[6ef]"></a>pjsip_evsub_set_mod_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_evsub_set_mod_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_evsub_set_mod_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_server_on_evsub_state
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_evsub_on_srv_state
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_evsub_on_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[9c8]"></a>pjsip_evsub_terminate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, evsub.o(.text.pjsip_evsub_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_evsub_terminate &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
</UL>

<P><STRONG><a name="[544]"></a>pjsip_expires_hdr_create</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_expires_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_expires_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_expires
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_unpublish
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
</UL>

<P><STRONG><a name="[9c9]"></a>pjsip_find_msg</STRONG> (Thumb, 686 bytes, Stack size 296 bytes, sip_parser.o(.text.pjsip_find_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjsip_find_msg &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_advance_n
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
</UL>

<P><STRONG><a name="[78d]"></a>pjsip_from_hdr_create</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_from_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_from_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_from
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
</UL>

<P><STRONG><a name="[47d]"></a>pjsip_fromto_hdr_set_from</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_fromto_hdr_set_from))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
</UL>

<P><STRONG><a name="[482]"></a>pjsip_fromto_hdr_set_to</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_fromto_hdr_set_to))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
</UL>

<P><STRONG><a name="[987]"></a>pjsip_generic_array_hdr_create</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_array_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjsip_generic_array_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_allow_events_hdr_create
</UL>

<P><STRONG><a name="[99f]"></a>pjsip_generic_array_hdr_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_generic_array_hdr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_generic_array_hdr_init &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
</UL>

<P><STRONG><a name="[469]"></a>pjsip_generic_string_hdr_create</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, sip_msg.o(.text.pjsip_generic_string_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[b40]"></a>pjsip_generic_string_hdr_init2</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_generic_string_hdr_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsip_generic_string_hdr_init2
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
</UL>

<P><STRONG><a name="[9a9]"></a>pjsip_get_ack_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_get_ack_method))
<BR><BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
</UL>

<P><STRONG><a name="[5ba]"></a>pjsip_get_bye_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_get_bye_method))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
</UL>

<P><STRONG><a name="[9ab]"></a>pjsip_get_cancel_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_get_cancel_method))
<BR><BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
</UL>

<P><STRONG><a name="[9cb]"></a>pjsip_get_dest_info</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, sip_util.o(.text.pjsip_get_dest_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_get_dest_info &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_from_flag
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_from_name
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_request_dest
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[656]"></a>pjsip_get_invite_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_get_invite_method))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[aa5]"></a>pjsip_get_notify_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_get_notify_method))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[777]"></a>pjsip_get_options_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_get_options_method))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
</UL>

<P><STRONG><a name="[a8f]"></a>pjsip_get_prack_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_100rel.o(.text.pjsip_get_prack_method))
<BR><BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[a8e]"></a>pjsip_get_refer_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_xfer.o(.text.pjsip_get_refer_method))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[46b]"></a>pjsip_get_register_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_get_register_method))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
</UL>

<P><STRONG><a name="[9ce]"></a>pjsip_get_request_dest</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sip_util.o(.text.pjsip_get_request_dest), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
</UL>

<P><STRONG><a name="[77a]"></a>pjsip_get_response_addr</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, sip_util.o(.text.pjsip_get_response_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_get_response_addr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_default_port_for_type
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[62e]"></a>pjsip_get_sdp_info</STRONG> (Thumb, 380 bytes, Stack size 144 bytes, sip_inv.o(.text.pjsip_get_sdp_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 5216<LI>Call Chain = pjsip_get_sdp_info &rArr; pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate2
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_find_part
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cmp
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tdata_get_sdp_info
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_sdp_info
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_sdp_info2
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[658]"></a>pjsip_get_status_text</STRONG> (Thumb, 1480 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_get_status_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsip_get_status_text
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_strerror
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>

<P><STRONG><a name="[aa4]"></a>pjsip_get_subscribe_method</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evsub.o(.text.pjsip_get_subscribe_method))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_tsx_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[46c]"></a>pjsip_hdr_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_hdr_clone))
<BR><BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_remote_cap_hdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_clone_part
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_clone_data
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_route_set
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_route_set
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_add_header
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_headers
</UL>

<P><STRONG><a name="[6eb]"></a>pjsip_hdr_print_on</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_hdr_print_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_hdr_print_on &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_print_body
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[468]"></a>pjsip_hdr_shallow_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_hdr_shallow_clone))
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[9d2]"></a>pjsip_inv_add_ref</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sip_inv.o(.text.pjsip_inv_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjsip_inv_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
</UL>

<P><STRONG><a name="[9d3]"></a>pjsip_inv_answer</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, sip_inv.o(.text.pjsip_inv_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 6120<LI>Call Chain = pjsip_inv_answer &rArr; process_answer &rArr; inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
</UL>

<P><STRONG><a name="[64d]"></a>pjsip_inv_cancel_reinvite</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sip_inv.o(.text.pjsip_inv_cancel_reinvite))
<BR><BR>[Stack]<UL><LI>Max Depth = 5296<LI>Call Chain = pjsip_inv_cancel_reinvite &rArr; pjsip_endpt_create_cancel &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
</UL>

<P><STRONG><a name="[661]"></a>pjsip_inv_create_ack</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, sip_inv.o(.text.pjsip_inv_create_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 6112<LI>Call Chain = pjsip_inv_create_ack &rArr; inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_has_local_answer
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_ack_method
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
</UL>

<P><STRONG><a name="[743]"></a>pjsip_inv_create_uac</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, sip_inv.o(.text.pjsip_inv_create_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = pjsip_inv_create_uac &rArr; pjsip_100rel_attach &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
</UL>

<P><STRONG><a name="[9d4]"></a>pjsip_inv_create_uas</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, sip_inv.o(.text.pjsip_inv_create_uas))
<BR><BR>[Stack]<UL><LI>Max Depth = 5256<LI>Call Chain = pjsip_inv_create_uas &rArr; pjsip_get_sdp_info &rArr; pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_add_ref
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_attach
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[647]"></a>pjsip_inv_dec_ref</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_inv_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = pjsip_inv_dec_ref &rArr; pjsip_dlg_dec_session &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_end_session
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>

<P><STRONG><a name="[3ff]"></a>pjsip_inv_end_session</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, sip_inv.o(.text.pjsip_inv_end_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 6160<LI>Call Chain = pjsip_inv_end_session &rArr; pjsip_inv_answer &rArr; process_answer &rArr; inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_bye_method
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_end_session
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timer_response
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_disconnect
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[9d6]"></a>pjsip_inv_initial_answer</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sip_inv.o(.text.pjsip_inv_initial_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 6128<LI>Call Chain = pjsip_inv_initial_answer &rArr; process_answer &rArr; inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
</UL>

<P><STRONG><a name="[748]"></a>pjsip_inv_invite</STRONG> (Thumb, 644 bytes, Stack size 48 bytes, sip_inv.o(.text.pjsip_inv_invite))
<BR><BR>[Stack]<UL><LI>Max Depth = 5528<LI>Call Chain = pjsip_inv_invite &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_has_local_answer
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_require_hdr_create
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_invite_method
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_req
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[665]"></a>pjsip_inv_process_redirect</STRONG> (Thumb, 656 bytes, Stack size 312 bytes, sip_inv.o(.text.pjsip_inv_process_redirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 9400 + In Cycle
<LI>Call Chain = pjsip_inv_process_redirect &rArr;  inv_uac_recurse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
</UL>

<P><STRONG><a name="[9d8]"></a>pjsip_inv_reinvite</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, sip_inv.o(.text.pjsip_inv_reinvite))
<BR><BR>[Stack]<UL><LI>Max Depth = 5576<LI>Call Chain = pjsip_inv_reinvite &rArr; pjsip_inv_invite &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[400]"></a>pjsip_inv_send_msg</STRONG> (Thumb, 612 bytes, Stack size 64 bytes, sip_inv.o(.text.pjsip_inv_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 9088<LI>Call Chain = pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_find_part
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init2
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_bye_response
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timer_response
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_pending_bye
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_disconnect
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[720]"></a>pjsip_inv_set_local_sdp</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sip_inv.o(.text.pjsip_inv_set_local_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_inv_set_local_sdp &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_remote
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
</UL>

<P><STRONG><a name="[9d9]"></a>pjsip_inv_set_sdp_answer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_inv_set_sdp_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_inv_set_sdp_answer &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
</UL>

<P><STRONG><a name="[9da]"></a>pjsip_inv_state_name</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sip_inv.o(.text.pjsip_inv_state_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_inv_state_name &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[403]"></a>pjsip_inv_terminate</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, sip_inv.o(.text.pjsip_inv_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 6248<LI>Call Chain = pjsip_inv_terminate &rArr; inv_set_state &rArr;  pjsip_inv_send_msg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
</UL>

<P><STRONG><a name="[9db]"></a>pjsip_inv_uac_restart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_inv_uac_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_inv_uac_restart &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
</UL>

<P><STRONG><a name="[9dc]"></a>pjsip_inv_update</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, sip_inv.o(.text.pjsip_inv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 5536<LI>Call Chain = pjsip_inv_update &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_req
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>

<P><STRONG><a name="[9dd]"></a>pjsip_inv_usage_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_inv_usage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = pjsip_inv_usage_init &rArr; pjsip_endpt_register_module &rArr; pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
</UL>

<P><STRONG><a name="[9de]"></a>pjsip_inv_verify_request2</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sip_inv.o(.text.pjsip_inv_verify_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 6440<LI>Call Chain = pjsip_inv_verify_request2 &rArr; pjsip_inv_verify_request3 &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[9df]"></a>pjsip_inv_verify_request3</STRONG> (Thumb, 2612 bytes, Stack size 384 bytes, sip_inv.o(.text.pjsip_inv_verify_request3))
<BR><BR>[Stack]<UL><LI>Max Depth = 6408<LI>Call Chain = pjsip_inv_verify_request3 &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_validate
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_has_capability
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_unsupported_hdr_create
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_require_hdr_create
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request2
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
</UL>

<P><STRONG><a name="[9e0]"></a>pjsip_iscomposing_parse</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, iscomposing.o(.text.pjsip_iscomposing_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = pjsip_iscomposing_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
</UL>

<P><STRONG><a name="[791]"></a>pjsip_max_fwd_hdr_create</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_max_fwd_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_max_fwd_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_max_forwards
</UL>

<P><STRONG><a name="[9d0]"></a>pjsip_media_type_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_media_type_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pjsip_media_type_cmp &rArr; pjsip_param_cmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_find_part
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
</UL>

<P><STRONG><a name="[618]"></a>pjsip_media_type_cp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_media_type_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjsip_media_type_cp &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
</UL>

<P><STRONG><a name="[471]"></a>pjsip_media_type_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_media_type_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pjsip_media_type_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_create_sdp_body
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_body
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_init
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>

<P><STRONG><a name="[9cf]"></a>pjsip_media_type_init2</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sip_msg.o(.text.pjsip_media_type_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pjsip_media_type_init2 &rArr; pj_str
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
</UL>

<P><STRONG><a name="[6ea]"></a>pjsip_media_type_print</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sip_msg.o(.text.pjsip_media_type_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pjsip_media_type_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_print_body
</UL>

<P><STRONG><a name="[47c]"></a>pjsip_method_cmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_method_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pjsip_method_cmp &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_tsx_state
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
</UL>

<P><STRONG><a name="[9ad]"></a>pjsip_method_copy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_method_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_method_copy &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
</UL>

<P><STRONG><a name="[622]"></a>pjsip_method_init_np</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_method_init_np))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjsip_method_init_np &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_req_line
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_cseq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
</UL>

<P><STRONG><a name="[9e2]"></a>pjsip_method_set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_method_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_method_set &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
</UL>

<P><STRONG><a name="[792]"></a>pjsip_min_expires_hdr_create</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_min_expires_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_min_expires_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_expires
</UL>

<P><STRONG><a name="[46f]"></a>pjsip_msg_body_clone</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_msg_body_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjsip_msg_body_clone &rArr; pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_clone_part
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipart_clone_data
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
</UL>

<P><STRONG><a name="[9e3]"></a>pjsip_msg_body_copy</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_msg_body_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_clone
</UL>

<P><STRONG><a name="[9e4]"></a>pjsip_msg_body_create</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_msg_body_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_msg_body_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
</UL>

<P><STRONG><a name="[9e5]"></a>pjsip_msg_clone</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sip_msg.o(.text.pjsip_msg_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_msg_clone &rArr; pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
</UL>

<P><STRONG><a name="[5f0]"></a>pjsip_msg_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_msg_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_msg_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
</UL>

<P><STRONG><a name="[424]"></a>pjsip_msg_find_hdr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_msg_find_hdr))
<BR><BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_update_remote_cap
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_request_dest
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tdata_get_sdp_info
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_allow_sup_hdr
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_is_reliable
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_cancel
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_tsx_state
</UL>

<P><STRONG><a name="[4da]"></a>pjsip_msg_find_hdr_by_name</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_msg_find_hdr_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjsip_msg_find_hdr_by_name &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_beautify_response
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[6ce]"></a>pjsip_msg_find_hdr_by_names</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_msg_find_hdr_by_names))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjsip_msg_find_hdr_by_names &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
</UL>

<P><STRONG><a name="[9e6]"></a>pjsip_msg_print</STRONG> (Thumb, 800 bytes, Stack size 72 bytes, sip_msg.o(.text.pjsip_msg_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pjsip_msg_print &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
</UL>

<P><STRONG><a name="[9e7]"></a>pjsip_multipart_add_part</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sip_multipart.o(.text.pjsip_multipart_add_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjsip_multipart_add_part &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
</UL>

<P><STRONG><a name="[9e8]"></a>pjsip_multipart_clone_part</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, sip_multipart.o(.text.pjsip_multipart_clone_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pjsip_multipart_clone_part &rArr; pjsip_msg_body_clone &rArr; pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
</UL>

<P><STRONG><a name="[9e9]"></a>pjsip_multipart_create</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, sip_multipart.o(.text.pjsip_multipart_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pjsip_multipart_create &rArr; pjsip_media_type_cp &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_find
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
</UL>

<P><STRONG><a name="[9eb]"></a>pjsip_multipart_create_part</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sip_multipart.o(.text.pjsip_multipart_create_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_multipart_create_part &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
</UL>

<P><STRONG><a name="[9d1]"></a>pjsip_multipart_find_part</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sip_multipart.o(.text.pjsip_multipart_find_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pjsip_multipart_find_part &rArr; pjsip_media_type_cmp &rArr; pjsip_param_cmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
</UL>

<P><STRONG><a name="[619]"></a>pjsip_multipart_parse</STRONG> (Thumb, 1512 bytes, Stack size 104 bytes, sip_multipart.o(.text.pjsip_multipart_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pjsip_multipart_parse &rArr; pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_find
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
</UL>

<P><STRONG><a name="[9ed]"></a>pjsip_mwi_create_uac</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, mwi.o(.text.pjsip_mwi_create_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 5104<LI>Call Chain = pjsip_mwi_create_uac &rArr; pjsip_evsub_create_uac &rArr; evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
</UL>

<P><STRONG><a name="[6f2]"></a>pjsip_mwi_current_notify</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, mwi.o(.text.pjsip_mwi_current_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5600<LI>Call Chain = pjsip_mwi_current_notify &rArr; pjsip_evsub_current_notify &rArr; pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_current_notify
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwi_on_evsub_rx_refresh
</UL>

<P><STRONG><a name="[9ee]"></a>pjsip_mwi_init_module</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, mwi.o(.text.pjsip_mwi_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pjsip_mwi_init_module &rArr; pjsip_evsub_register_pkg &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[9ef]"></a>pjsip_mwi_initiate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mwi.o(.text.pjsip_mwi_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512<LI>Call Chain = pjsip_mwi_initiate &rArr; pjsip_evsub_initiate &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
</UL>

<P><STRONG><a name="[9f0]"></a>pjsip_mwi_send_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mwi.o(.text.pjsip_mwi_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8816<LI>Call Chain = pjsip_mwi_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
</UL>

<P><STRONG><a name="[9f1]"></a>pjsip_name_addr_assign</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sip_uri.o(.text.pjsip_name_addr_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjsip_name_addr_assign &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_clone
</UL>

<P><STRONG><a name="[61b]"></a>pjsip_name_addr_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sip_uri.o(.text.pjsip_name_addr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
</UL>

<P><STRONG><a name="[a2b]"></a>pjsip_name_addr_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sip_uri.o(.text.pjsip_name_addr_init))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_clone
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_route_hdr_create
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rr_hdr_create
</UL>

<P><STRONG><a name="[620]"></a>pjsip_other_uri_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sip_uri.o(.text.pjsip_other_uri_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_other_uri_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_other_uri
</UL>

<P><STRONG><a name="[6c9]"></a>pjsip_param_clone</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sip_uri.o(.text.pjsip_param_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_clone
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_clone
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_clone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_clone
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_clone
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_clone
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_clone
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_clone
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_clone
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_copy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_clone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_clone
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_clone
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_clone
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_clone
</UL>

<P><STRONG><a name="[9e1]"></a>pjsip_param_cmp</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, sip_uri.o(.text.pjsip_param_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pjsip_param_cmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_size
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_compare
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cmp
</UL>

<P><STRONG><a name="[9ea]"></a>pjsip_param_find</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sip_uri.o(.text.pjsip_param_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjsip_param_find &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_cmp
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
</UL>

<P><STRONG><a name="[6cb]"></a>pjsip_param_print_on</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, sip_uri.o(.text.pjsip_param_print_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy2_escape
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_print
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_print
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_print
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_print
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_print
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_print
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_print
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_print
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_print
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_print
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_print
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_print
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_print
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_print
</UL>

<P><STRONG><a name="[6cc]"></a>pjsip_param_shallow_clone</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sip_uri.o(.text.pjsip_param_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_shallow_clone
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_shallow_clone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_shallow_clone
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_shallow_clone
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_shallow_clone
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_shallow_clone
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_shallow_clone
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_shallow_clone
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_shallow_clone
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_shallow_clone
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_shallow_clone
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_shallow_clone
</UL>

<P><STRONG><a name="[60b]"></a>pjsip_parse_end_hdr_imp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sip_parser.o(.text.pjsip_parse_end_hdr_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pjsip_parse_end_hdr_imp &rArr; pj_scan_get_char &rArr; pj_scan_skip_whitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
</UL>

<P><STRONG><a name="[392]"></a>pjsip_parse_hdr</STRONG> (Thumb, 170 bytes, Stack size 248 bytes, sip_parser.o(.text.pjsip_parse_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
</UL>

<P><STRONG><a name="[9ec]"></a>pjsip_parse_headers</STRONG> (Thumb, 422 bytes, Stack size 264 bytes, sip_parser.o(.text.pjsip_parse_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_nodes_before
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_line
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
</UL>

<P><STRONG><a name="[609]"></a>pjsip_parse_param_imp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sip_parser.o(.text.pjsip_parse_param_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_param_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_replaces
</UL>

<P><STRONG><a name="[9f2]"></a>pjsip_parse_rdata</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, sip_parser.o(.text.pjsip_parse_rdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 5400<LI>Call Chain = pjsip_parse_rdata &rArr; int_parse_msg &rArr; pjsip_multipart_parse &rArr; pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
</UL>

<P><STRONG><a name="[4dd]"></a>pjsip_parse_uri</STRONG> (Thumb, 100 bytes, Stack size 232 bytes, sip_parser.o(.text.pjsip_parse_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjsip_parse_uri &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_init
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_fini
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
</UL>

<P><STRONG><a name="[606]"></a>pjsip_parser_const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_parser.o(.text.pjsip_parser_const))
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_print
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_print
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_print
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_fromto_hdr_print
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_print
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_print
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_print
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_print
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_print
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_print
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_get_scheme
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_parse
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_print
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sub_state_hdr_print
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_print
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_sub_state
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_event
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_se_hdr_print
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_hdr_print
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_min_se
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_se
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaces_hdr_print
</UL>

<P><STRONG><a name="[9f3]"></a>pjsip_pres_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, presence.o(.text.pjsip_pres_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsip_pres_accept &rArr; pjsip_evsub_accept &rArr; pjsip_dlg_send_response &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[9f4]"></a>pjsip_pres_create_pidf</STRONG> (Thumb, 376 bytes, Stack size 184 bytes, presence_body.o(.text.pjsip_pres_create_pidf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = pjsip_pres_create_pidf &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_GUID_STRING_LENGTH
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_local_to_gmt
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_decode
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_create
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_status_set_basic_open
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_timestamp
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_set_contact
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_status
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_add_tuple
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[9f5]"></a>pjsip_pres_create_uac</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, presence.o(.text.pjsip_pres_create_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 5136<LI>Call Chain = pjsip_pres_create_uac &rArr; pjsip_evsub_create_uac &rArr; evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[9f6]"></a>pjsip_pres_create_uas</STRONG> (Thumb, 524 bytes, Stack size 80 bytes, presence.o(.text.pjsip_pres_create_uas))
<BR><BR>[Stack]<UL><LI>Max Depth = 5152<LI>Call Chain = pjsip_pres_create_uas &rArr; pjsip_evsub_create_uas &rArr; evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[9f7]"></a>pjsip_pres_create_xpidf</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, presence_body.o(.text.pjsip_pres_create_xpidf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pjsip_pres_create_xpidf &rArr; pjxpidf_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_set_status
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
</UL>

<P><STRONG><a name="[9fa]"></a>pjsip_pres_current_notify</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, presence.o(.text.pjsip_pres_current_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5600<LI>Call Chain = pjsip_pres_current_notify &rArr; pjsip_evsub_current_notify &rArr; pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_current_notify
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_refresh
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
</UL>

<P><STRONG><a name="[9fb]"></a>pjsip_pres_get_status</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, presence.o(.text.pjsip_pres_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjsip_pres_get_status &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_rx_notify
</UL>

<P><STRONG><a name="[9fc]"></a>pjsip_pres_init_module</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, presence.o(.text.pjsip_pres_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pjsip_pres_init_module &rArr; pjsip_evsub_register_pkg &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[9fd]"></a>pjsip_pres_initiate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, presence.o(.text.pjsip_pres_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512<LI>Call Chain = pjsip_pres_initiate &rArr; pjsip_evsub_initiate &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
</UL>

<P><STRONG><a name="[9fe]"></a>pjsip_pres_notify</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, presence.o(.text.pjsip_pres_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5592<LI>Call Chain = pjsip_pres_notify &rArr; pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_server_timeout
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_refresh
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
</UL>

<P><STRONG><a name="[9ff]"></a>pjsip_pres_parse_pidf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, presence_body.o(.text.pjsip_pres_parse_pidf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = pjsip_pres_parse_pidf &rArr; pjsip_pres_parse_pidf2 &rArr; pjpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
</UL>

<P><STRONG><a name="[a00]"></a>pjsip_pres_parse_pidf2</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, presence_body.o(.text.pjsip_pres_parse_pidf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = pjsip_pres_parse_pidf2 &rArr; pjpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_get_element
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_parse
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_status_is_basic_open
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_contact
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_status
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_tuple_get_id
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_get_next_tuple
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpidf_pres_get_first_tuple
</UL>
<BR>[Called By]<UL><LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
</UL>

<P><STRONG><a name="[a01]"></a>pjsip_pres_parse_xpidf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, presence_body.o(.text.pjsip_pres_parse_xpidf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = pjsip_pres_parse_xpidf &rArr; pjxpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_status
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_uri
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
</UL>

<P><STRONG><a name="[a05]"></a>pjsip_pres_parse_xpidf2</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, presence_body.o(.text.pjsip_pres_parse_xpidf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = pjsip_pres_parse_xpidf2 &rArr; pjxpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_status
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_get_uri
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjxpidf_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
</UL>

<P><STRONG><a name="[a06]"></a>pjsip_pres_send_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, presence.o(.text.pjsip_pres_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8816<LI>Call Chain = pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
</UL>

<P><STRONG><a name="[a07]"></a>pjsip_pres_set_status</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, presence.o(.text.pjsip_pres_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_pres_set_status &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
</UL>

<P><STRONG><a name="[a08]"></a>pjsip_pres_terminate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, presence.o(.text.pjsip_pres_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_pres_terminate &rArr; pjsip_evsub_terminate &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
</UL>

<P><STRONG><a name="[14f]"></a>pjsip_print_text_body</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_print_text_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pjsip_print_text_body &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 6]<UL><LI> sip_parser.o(.text.int_parse_msg)
<LI> sip_multipart.o(.text.pjsip_multipart_parse)
<LI> sip_util.o(.text.init_request_throw)
<LI> mwi.o(.text.pjsip_mwi_current_notify)
<LI> sip_msg.o(.text.pjsip_msg_body_create)
<LI> sip_xfer.o(.text.pjsip_xfer_notify)
</UL>
<P><STRONG><a name="[9b9]"></a>pjsip_process_route_set</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, sip_util.o(.text.pjsip_process_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjsip_process_route_set &rArr; pjsip_get_dest_info &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_route_hdr_create
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
</UL>

<P><STRONG><a name="[793]"></a>pjsip_proxy_authenticate_hdr_create</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sip_auth_msg.o(.text.pjsip_proxy_authenticate_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_proxy_authenticate_hdr_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_proxy_authenticate
</UL>

<P><STRONG><a name="[794]"></a>pjsip_proxy_authorization_hdr_create</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sip_auth_msg.o(.text.pjsip_proxy_authorization_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_proxy_authorization_hdr_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_proxy_authorization
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
</UL>

<P><STRONG><a name="[a09]"></a>pjsip_publishc_create</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, publishc.o(.text.pjsip_publishc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_publishc_create &rArr; pj_mutex_create_recursive &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
</UL>

<P><STRONG><a name="[a0a]"></a>pjsip_publishc_destroy</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, publishc.o(.text.pjsip_publishc_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pjsip_publishc_destroy &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[a0b]"></a>pjsip_publishc_init</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, publishc.o(.text.pjsip_publishc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = pjsip_publishc_init &rArr; pjsip_parse_uri &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cid_hdr_create
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_to_hdr_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_from_hdr_create
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_create
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
</UL>

<P><STRONG><a name="[aaa]"></a>pjsip_publishc_init_module</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, publishc.o(.text.pjsip_publishc_init_module))
<BR><BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[a62]"></a>pjsip_publishc_opt_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, publishc.o(.text.pjsip_publishc_opt_default))
<BR><BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
</UL>

<P><STRONG><a name="[a0c]"></a>pjsip_publishc_publish</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, publishc.o(.text.pjsip_publishc_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = pjsip_publishc_publish &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubc_refresh_timer_cb
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[a0d]"></a>pjsip_publishc_send</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, publishc.o(.text.pjsip_publishc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = pjsip_publishc_send &rArr; pjsip_endpt_send_request &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubc_refresh_timer_cb
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_callback
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[a0e]"></a>pjsip_publishc_set_credentials</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, publishc.o(.text.pjsip_publishc_set_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_publishc_set_credentials &rArr; pjsip_auth_clt_set_credentials &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
</UL>
<BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
</UL>

<P><STRONG><a name="[a0f]"></a>pjsip_publishc_set_route_set</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, publishc.o(.text.pjsip_publishc_set_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjsip_publishc_set_route_set &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
</UL>

<P><STRONG><a name="[38e]"></a>pjsip_publishc_set_via_sent_by</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, publishc.o(.text.pjsip_publishc_set_via_sent_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_publishc_set_via_sent_by &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[a10]"></a>pjsip_publishc_unpublish</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, publishc.o(.text.pjsip_publishc_unpublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = pjsip_publishc_unpublish &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[5de]"></a>pjsip_rdata_get_dlg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sip_ua_layer.o(.text.pjsip_rdata_get_dlg))
<BR><BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_response
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
</UL>

<P><STRONG><a name="[64f]"></a>pjsip_rdata_get_sdp_info</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_rdata_get_sdp_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232<LI>Call Chain = pjsip_rdata_get_sdp_info &rArr; pjsip_get_sdp_info &rArr; pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
</UL>

<P><STRONG><a name="[a11]"></a>pjsip_rdata_get_sdp_info2</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_rdata_get_sdp_info2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232<LI>Call Chain = pjsip_rdata_get_sdp_info2 &rArr; pjsip_get_sdp_info &rArr; pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
</UL>

<P><STRONG><a name="[5dd]"></a>pjsip_rdata_get_tsx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sip_transaction.o(.text.pjsip_rdata_get_tsx))
<BR><BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dlg_forked
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
</UL>

<P><STRONG><a name="[a12]"></a>pjsip_regc_add_headers</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sip_reg.o(.text.pjsip_regc_add_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjsip_regc_add_headers &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a13]"></a>pjsip_regc_add_ref</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sip_reg.o(.text.pjsip_regc_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pjsip_regc_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a14]"></a>pjsip_regc_create</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, sip_reg.o(.text.pjsip_regc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pjsip_regc_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a15]"></a>pjsip_regc_dec_ref</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sip_reg.o(.text.pjsip_regc_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjsip_regc_dec_ref &rArr; pjsip_regc_destroy2 &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[39b]"></a>pjsip_regc_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_reg.o(.text.pjsip_regc_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = pjsip_regc_destroy &rArr; pjsip_regc_destroy2 &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[a16]"></a>pjsip_regc_destroy2</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, sip_reg.o(.text.pjsip_regc_destroy2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = pjsip_regc_destroy2 &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_dec_ref
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[a17]"></a>pjsip_regc_get_info</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, sip_reg.o(.text.pjsip_regc_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = pjsip_regc_get_info &rArr; pj_atomic_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[a18]"></a>pjsip_regc_init</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, sip_reg.o(.text.pjsip_regc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = pjsip_regc_init &rArr; set_contact &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cid_hdr_create
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_to_hdr_create
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_from_hdr_create
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_create
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_set
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a1a]"></a>pjsip_regc_register</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, sip_reg.o(.text.pjsip_regc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 5296<LI>Call Chain = pjsip_regc_register &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a1b]"></a>pjsip_regc_release_transport</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sip_reg.o(.text.pjsip_regc_release_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = pjsip_regc_release_transport &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
</UL>

<P><STRONG><a name="[a1c]"></a>pjsip_regc_send</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, sip_reg.o(.text.pjsip_regc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = pjsip_regc_send &rArr; pjsip_endpt_send_request &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_refresh_timer_cb
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a1d]"></a>pjsip_regc_set_credentials</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sip_reg.o(.text.pjsip_regc_set_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_regc_set_credentials &rArr; pjsip_auth_clt_set_credentials &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a1e]"></a>pjsip_regc_set_delay_before_refresh</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sip_reg.o(.text.pjsip_regc_set_delay_before_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = pjsip_regc_set_delay_before_refresh &rArr; schedule_registration &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_registration
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a20]"></a>pjsip_regc_set_prefs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sip_reg.o(.text.pjsip_regc_set_prefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_regc_set_prefs &rArr; pjsip_auth_clt_set_prefs &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a21]"></a>pjsip_regc_set_reg_tsx_cb</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sip_reg.o(.text.pjsip_regc_set_reg_tsx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_regc_set_reg_tsx_cb &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a22]"></a>pjsip_regc_set_route_set</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sip_reg.o(.text.pjsip_regc_set_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjsip_regc_set_route_set &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[a23]"></a>pjsip_regc_set_transport</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sip_reg.o(.text.pjsip_regc_set_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = pjsip_regc_set_transport &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_add_ref
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[38d]"></a>pjsip_regc_set_via_sent_by</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sip_reg.o(.text.pjsip_regc_set_via_sent_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_regc_set_via_sent_by &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[a24]"></a>pjsip_regc_unregister</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, sip_reg.o(.text.pjsip_regc_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 5296<LI>Call Chain = pjsip_regc_unregister &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[3a4]"></a>pjsip_regc_update_contact</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sip_reg.o(.text.pjsip_regc_update_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 5048<LI>Call Chain = pjsip_regc_update_contact &rArr; set_contact &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
</UL>

<P><STRONG><a name="[98e]"></a>pjsip_register_hdr_parser</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, sip_parser.o(.text.pjsip_register_hdr_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pjsip_register_hdr_parser &rArr; int_register_parser &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_register_parser
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_init_parser
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_parser
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_module
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_init_module
</UL>

<P><STRONG><a name="[a25]"></a>pjsip_register_uri_parser</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sip_parser.o(.text.pjsip_register_uri_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pjsip_register_uri_parser &rArr; pj_str
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_uri_subsys_init
</UL>

<P><STRONG><a name="[a26]"></a>pjsip_replaces_init_module</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sip_replaces.o(.text.pjsip_replaces_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjsip_replaces_init_module &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[a27]"></a>pjsip_replaces_verify_request</STRONG> (Thumb, 532 bytes, Stack size 104 bytes, sip_replaces.o(.text.pjsip_replaces_verify_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsip_replaces_verify_request &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_find_dialog
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_inv_session
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[795]"></a>pjsip_require_hdr_create</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_require_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_require_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_require
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
</UL>

<P><STRONG><a name="[9b6]"></a>pjsip_resolve</STRONG> (Thumb, 1336 bytes, Stack size 3360 bytes, sip_resolve.o(.text.pjsip_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 8704<LI>Call Chain = pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_resolve
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_get_type_name
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_desc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_default_port_for_type
</UL>
<BR>[Called By]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_resolve
</UL>

<P><STRONG><a name="[9a6]"></a>pjsip_resolver_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sip_resolve.o(.text.pjsip_resolver_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_resolver_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[9b1]"></a>pjsip_resolver_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sip_resolve.o(.text.pjsip_resolver_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = pjsip_resolver_destroy &rArr; pj_dns_resolver_destroy &rArr; pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
</UL>

<P><STRONG><a name="[9bc]"></a>pjsip_resolver_set_resolver</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_resolve.o(.text.pjsip_resolver_set_resolver))
<BR><BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_set_resolver
</UL>

<P><STRONG><a name="[98c]"></a>pjsip_restore_strict_route_set</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sip_util.o(.text.pjsip_restore_strict_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjsip_restore_strict_route_set &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
</UL>

<P><STRONG><a name="[64e]"></a>pjsip_retry_after_hdr_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_retry_after_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_retry_after_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
</UL>

<P><STRONG><a name="[796]"></a>pjsip_route_hdr_create</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_route_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_route_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_process_route_set
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
</UL>

<P><STRONG><a name="[484]"></a>pjsip_routing_hdr_set_route</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sip_msg.o(.text.pjsip_routing_hdr_set_route))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_update_routeset
</UL>

<P><STRONG><a name="[797]"></a>pjsip_rr_hdr_create</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_rr_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_rr_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
</UL>

<P><STRONG><a name="[a2c]"></a>pjsip_rx_data_clone</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, sip_transport.o(.text.pjsip_rx_data_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = pjsip_rx_data_clone &rArr; pjsip_transport_add_ref &rArr; pj_hash_get &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[a2d]"></a>pjsip_rx_data_free_cloned</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_rx_data_free_cloned))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = pjsip_rx_data_free_cloned &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
</UL>

<P><STRONG><a name="[526]"></a>pjsip_rx_data_get_info</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, sip_transport.o(.text.pjsip_rx_data_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endpt_on_rx_msg
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_response
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_rx_msg
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[a2e]"></a>pjsip_sip_uri_assign</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, sip_uri.o(.text.pjsip_sip_uri_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_sip_uri_assign &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_url_clone
</UL>

<P><STRONG><a name="[624]"></a>pjsip_sip_uri_create</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sip_uri.o(.text.pjsip_sip_uri_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_sip_uri_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[1ea]"></a>pjsip_strerror</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, sip_errno.o(.text.pjsip_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjsip_strerror &rArr; pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_endpoint.o(.text.pjsip_endpt_create)
</UL>
<P><STRONG><a name="[9c6]"></a>pjsip_sub_state_hdr_create</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, evsub_msg.o(.text.pjsip_sub_state_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_sub_state_hdr_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
</UL>

<P><STRONG><a name="[798]"></a>pjsip_supported_hdr_create</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_supported_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_supported_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_supported
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[663]"></a>pjsip_target_assign_status</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sip_util.o(.text.pjsip_target_assign_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_target_assign_status &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
</UL>

<P><STRONG><a name="[5b4]"></a>pjsip_target_set_add_from_msg</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sip_util.o(.text.pjsip_target_set_add_from_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_target_set_add_from_msg &rArr; pjsip_target_set_add_uri &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
</UL>

<P><STRONG><a name="[4de]"></a>pjsip_target_set_add_uri</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sip_util.o(.text.pjsip_target_set_add_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_target_set_add_uri &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_from_msg
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
</UL>

<P><STRONG><a name="[4df]"></a>pjsip_target_set_get_next</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sip_util.o(.text.pjsip_target_set_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsip_target_set_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
</UL>

<P><STRONG><a name="[4e0]"></a>pjsip_target_set_set_current</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sip_util.o(.text.pjsip_target_set_set_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjsip_target_set_set_current &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
</UL>

<P><STRONG><a name="[a2f]"></a>pjsip_tcp_transport_cfg_default</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sip_transport_tcp.o(.text.pjsip_tcp_transport_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = pjsip_tcp_transport_cfg_default &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
</UL>

<P><STRONG><a name="[a30]"></a>pjsip_tcp_transport_lis_start</STRONG> (Thumb, 424 bytes, Stack size 96 bytes, sip_transport_tcp.o(.text.pjsip_tcp_transport_lis_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = pjsip_tcp_transport_lis_start &rArr; pj_sock_apply_qos2 &rArr; pj_sock_apply_qos &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_accept
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_listen
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_type_get_af
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
</UL>

<P><STRONG><a name="[a35]"></a>pjsip_tcp_transport_start3</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, sip_transport_tcp.o(.text.pjsip_tcp_transport_start3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjsip_tcp_transport_start3 &rArr; pjsip_tcp_transport_lis_start &rArr; pj_sock_apply_qos2 &rArr; pj_sock_apply_qos &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_tpmgr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_register_tpfactory
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
</UL>

<P><STRONG><a name="[630]"></a>pjsip_tdata_get_sdp_info</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sip_inv.o(.text.pjsip_tdata_get_sdp_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232<LI>Call Chain = pjsip_tdata_get_sdp_info &rArr; pjsip_get_sdp_info &rArr; pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>

<P><STRONG><a name="[a37]"></a>pjsip_tel_nb_cmp</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, sip_tel_uri.o(.text.pjsip_tel_nb_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pjsip_tel_nb_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_uri_cmp
</UL>

<P><STRONG><a name="[9a3]"></a>pjsip_tel_uri_subsys_init</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, sip_tel_uri.o(.text.pjsip_tel_uri_subsys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjsip_tel_uri_subsys_init &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_del_str
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_cis
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_num
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_alpha
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_dup
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_str
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_buf_init
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_uri_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[9d5]"></a>pjsip_timer_end_session</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sip_timer.o(.text.pjsip_timer_end_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pjsip_timer_end_session &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>

<P><STRONG><a name="[644]"></a>pjsip_timer_handle_refresh_error</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, sip_timer.o(.text.pjsip_timer_handle_refresh_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 9128<LI>Call Chain = pjsip_timer_handle_refresh_error &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
</UL>

<P><STRONG><a name="[a39]"></a>pjsip_timer_init_module</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sip_timer.o(.text.pjsip_timer_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_timer_init_module &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[744]"></a>pjsip_timer_init_session</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, sip_timer.o(.text.pjsip_timer_init_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_timer_init_session &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
</UL>

<P><STRONG><a name="[64b]"></a>pjsip_timer_process_req</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, sip_timer.o(.text.pjsip_timer_process_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = pjsip_timer_process_req &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_names
</UL>
<BR>[Called By]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
</UL>

<P><STRONG><a name="[5b2]"></a>pjsip_timer_process_resp</STRONG> (Thumb, 1040 bytes, Stack size 32 bytes, sip_timer.o(.text.pjsip_timer_process_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 9208<LI>Call Chain = pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_restore_strict_route_set
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_names
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_uac_restart
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_end_session
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timer_response
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
</UL>

<P><STRONG><a name="[a9d]"></a>pjsip_timer_setting_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sip_timer.o(.text.pjsip_timer_setting_default))
<BR><BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_default
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[9d7]"></a>pjsip_timer_update_req</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sip_timer.o(.text.pjsip_timer_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_timer_update_req &rArr; add_timer_headers &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
</UL>

<P><STRONG><a name="[650]"></a>pjsip_timer_update_resp</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, sip_timer.o(.text.pjsip_timer_update_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pjsip_timer_update_resp &rArr; start_timer &rArr; pjsip_dlg_remote_has_cap &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_require_hdr_create
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
</UL>

<P><STRONG><a name="[799]"></a>pjsip_to_hdr_create</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_to_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_to_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_to
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
</UL>

<P><STRONG><a name="[9a1]"></a>pjsip_tpmgr_acquire_transport2</STRONG> (Thumb, 1076 bytes, Stack size 104 bytes, sip_transport.o(.text.pjsip_tpmgr_acquire_transport2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = pjsip_tpmgr_acquire_transport2 &rArr; pjsip_transport_add_ref &rArr; pj_hash_get &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_acquire_transport2
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
</UL>

<P><STRONG><a name="[9a5]"></a>pjsip_tpmgr_create</STRONG> (Thumb, 752 bytes, Stack size 32 bytes, sip_transport.o(.text.pjsip_tpmgr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pjsip_tpmgr_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[9a7]"></a>pjsip_tpmgr_destroy</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, sip_transport.o(.text.pjsip_tpmgr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_tpmgr_destroy &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_this
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_first
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
</UL>

<P><STRONG><a name="[a3c]"></a>pjsip_tpmgr_find_local_addr2</STRONG> (Thumb, 596 bytes, Stack size 136 bytes, sip_transport.o(.text.pjsip_tpmgr_find_local_addr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_interface
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[a3d]"></a>pjsip_tpmgr_fla2_param_default</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_tpmgr_fla2_param_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsip_tpmgr_fla2_param_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[71e]"></a>pjsip_tpmgr_get_state_cb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_tpmgr_get_state_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_tpmgr_get_state_cb &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_initial_timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[733]"></a>pjsip_tpmgr_receive_packet</STRONG> (Thumb, 932 bytes, Stack size 376 bytes, sip_transport.o(.text.pjsip_tpmgr_receive_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 5776<LI>Call Chain = pjsip_tpmgr_receive_packet &rArr; pjsip_parse_rdata &rArr; int_parse_msg &rArr; pjsip_multipart_parse &rArr; pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_name
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_find_msg
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_rdata
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_read_complete
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
</UL>

<P><STRONG><a name="[a36]"></a>pjsip_tpmgr_register_tpfactory</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sip_transport.o(.text.pjsip_tpmgr_register_tpfactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjsip_tpmgr_register_tpfactory &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
</UL>

<P><STRONG><a name="[6a7]"></a>pjsip_tpmgr_send_raw</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, sip_transport.o(.text.pjsip_tpmgr_send_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pjsip_tpmgr_send_raw &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_tdata
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
</UL>

<P><STRONG><a name="[a3e]"></a>pjsip_tpmgr_set_state_cb</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_tpmgr_set_state_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_tpmgr_set_state_cb &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
</UL>

<P><STRONG><a name="[6b3]"></a>pjsip_tpmgr_unregister_tpfactory</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sip_transport.o(.text.pjsip_tpmgr_unregister_tpfactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pjsip_tpmgr_unregister_tpfactory &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_destroy
</UL>

<P><STRONG><a name="[99e]"></a>pjsip_tpselector_add_ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_tpselector_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjsip_tpselector_add_ref &rArr; pjsip_transport_add_ref &rArr; pj_hash_get &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_transport
</UL>

<P><STRONG><a name="[48a]"></a>pjsip_tpselector_dec_ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_tpselector_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_transport
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_transport
</UL>

<P><STRONG><a name="[72f]"></a>pjsip_transport_add_ref</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, sip_transport.o(.text.pjsip_transport_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = pjsip_transport_add_ref &rArr; pj_hash_get &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc_and_get
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_add_ref
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_initial_timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[a3f]"></a>pjsip_transport_add_state_listener</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, sip_transport.o(.text.pjsip_transport_add_state_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjsip_transport_add_state_listener &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
</UL>

<P><STRONG><a name="[731]"></a>pjsip_transport_dec_ref</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, sip_transport.o(.text.pjsip_transport_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_w_grp_lock_dbg
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_resolver_cb
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_transport_cb
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_shutdown
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_initial_timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_free_cloned
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_raw_callback
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_release_transport
</UL>

<P><STRONG><a name="[a40]"></a>pjsip_transport_destroy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sip_transport.o(.text.pjsip_transport_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = pjsip_transport_destroy &rArr; destroy_transport &rArr; pj_hash_set_np &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_transport
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_idle_callback
</UL>

<P><STRONG><a name="[38a]"></a>pjsip_transport_get_default_port_for_type</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_transport_get_default_port_for_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjsip_transport_get_default_port_for_type &rArr; get_tpname &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[39c]"></a>pjsip_transport_get_flag_from_type</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_transport_get_flag_from_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjsip_transport_get_flag_from_type &rArr; get_tpname &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[a2a]"></a>pjsip_transport_get_type_desc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_transport_get_type_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjsip_transport_get_type_desc &rArr; get_tpname &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>

<P><STRONG><a name="[9cd]"></a>pjsip_transport_get_type_from_flag</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_transport_get_type_from_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_transport_get_type_from_flag &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
</UL>

<P><STRONG><a name="[9cc]"></a>pjsip_transport_get_type_from_name</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, sip_transport.o(.text.pjsip_transport_get_type_from_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjsip_transport_get_type_from_name &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>

<P><STRONG><a name="[39d]"></a>pjsip_transport_get_type_name</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_transport_get_type_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pjsip_transport_get_type_name &rArr; get_tpname &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tpname
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_resolve
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[a41]"></a>pjsip_transport_register</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, sip_transport.o(.text.pjsip_transport_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = pjsip_transport_register &rArr; pj_hash_set_np &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[a42]"></a>pjsip_transport_remove_state_listener</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sip_transport.o(.text.pjsip_transport_remove_state_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pjsip_transport_remove_state_listener &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
</UL>

<P><STRONG><a name="[9ba]"></a>pjsip_transport_send</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, sip_transport.o(.text.pjsip_transport_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = pjsip_transport_send &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_resolver_cb
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
</UL>

<P><STRONG><a name="[730]"></a>pjsip_transport_shutdown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_transport_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown2
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_initial_timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keep_alive_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
</UL>

<P><STRONG><a name="[a43]"></a>pjsip_transport_shutdown2</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, sip_transport.o(.text.pjsip_transport_shutdown2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
</UL>

<P><STRONG><a name="[a31]"></a>pjsip_transport_type_get_af</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_transport_type_get_af))
<BR><BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
</UL>

<P><STRONG><a name="[65d]"></a>pjsip_tsx_create_key</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, sip_transaction.o(.text.pjsip_tsx_create_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_tsx_create_key &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
</UL>

<P><STRONG><a name="[99b]"></a>pjsip_tsx_create_uac</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_transaction.o(.text.pjsip_tsx_create_uac))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
</UL>

<P><STRONG><a name="[a44]"></a>pjsip_tsx_create_uac2</STRONG> (Thumb, 720 bytes, Stack size 64 bytes, sip_transaction.o(.text.pjsip_tsx_create_uac2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc_tolower
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_GUID_STRING_LENGTH
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_request_dest
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_create
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_copy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[485]"></a>pjsip_tsx_create_uas</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_transaction.o(.text.pjsip_tsx_create_uas))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
</UL>

<P><STRONG><a name="[a46]"></a>pjsip_tsx_create_uas2</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, sip_transaction.o(.text.pjsip_tsx_create_uas2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc_tolower
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_register_tsx
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_copy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[639]"></a>pjsip_tsx_get_dlg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sip_ua_layer.o(.text.pjsip_tsx_get_dlg))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_tsx_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
</UL>

<P><STRONG><a name="[a48]"></a>pjsip_tsx_layer_find_tsx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_transaction.o(.text.pjsip_tsx_layer_find_tsx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pjsip_tsx_layer_find_tsx &rArr; find_tsx &rArr; pj_hash_get_lower &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_timer_cb
</UL>

<P><STRONG><a name="[65e]"></a>pjsip_tsx_layer_find_tsx2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_transaction.o(.text.pjsip_tsx_layer_find_tsx2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pjsip_tsx_layer_find_tsx2 &rArr; find_tsx &rArr; pj_hash_get_lower &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tsx
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_ua_on_rx_request
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
</UL>

<P><STRONG><a name="[a49]"></a>pjsip_tsx_layer_init_module</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sip_transaction.o(.text.pjsip_tsx_layer_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_tsx_layer_init_module &rArr; pj_mutex_create_recursive &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[48c]"></a>pjsip_tsx_recv_msg</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, sip_transaction.o(.text.pjsip_tsx_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = pjsip_tsx_recv_msg &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_response
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_on_rx_request
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
</UL>

<P><STRONG><a name="[750]"></a>pjsip_tsx_retransmit_no_state</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sip_transaction.o(.text.pjsip_tsx_retransmit_no_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8896<LI>Call Chain = pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_retrans_18x
</UL>

<P><STRONG><a name="[74f]"></a>pjsip_tsx_send_msg</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, sip_transaction.o(.text.pjsip_tsx_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_set_transport
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[65b]"></a>pjsip_tsx_set_timeout</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, sip_transaction.o(.text.pjsip_tsx_set_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = pjsip_tsx_set_timeout &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>

<P><STRONG><a name="[99c]"></a>pjsip_tsx_set_transport</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sip_transaction.o(.text.pjsip_tsx_set_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = pjsip_tsx_set_transport &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_add_ref
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
</UL>

<P><STRONG><a name="[996]"></a>pjsip_tsx_state_str</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sip_transaction.o(.text.pjsip_tsx_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
</UL>

<P><STRONG><a name="[488]"></a>pjsip_tsx_terminate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sip_transaction.o(.text.pjsip_tsx_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = pjsip_tsx_terminate &rArr; tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_timer_cb
</UL>

<P><STRONG><a name="[65a]"></a>pjsip_tx_data_add_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_tx_data_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pjsip_tx_data_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_retrans_18x
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[984]"></a>pjsip_tx_data_clone</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, sip_transport.o(.text.pjsip_tx_data_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pjsip_tx_data_clone &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
</UL>

<P><STRONG><a name="[9af]"></a>pjsip_tx_data_create</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sip_transport.o(.text.pjsip_tx_data_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = pjsip_tx_data_create &rArr; pj_atomic_create &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_null_mutex
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_tdata
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
</UL>

<P><STRONG><a name="[5b8]"></a>pjsip_tx_data_dec_ref</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_tx_data_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_resolver_cb
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_response_transport_cb
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_uac_restart
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_tsx_state
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_end_session
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_retransmit
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;options_on_rx_request
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>

<P><STRONG><a name="[6d1]"></a>pjsip_tx_data_encode</STRONG> (Thumb, 168 bytes, Stack size 184 bytes, sip_transport.o(.text.pjsip_tx_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pjsip_tx_data_encode &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_on_tx_msg
</UL>

<P><STRONG><a name="[5f3]"></a>pjsip_tx_data_get_info</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sip_transport.o(.text.pjsip_tx_data_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = pjsip_tx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_callback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uac
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_on_tx_msg
</UL>

<P><STRONG><a name="[659]"></a>pjsip_tx_data_invalidate_msg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sip_transport.o(.text.pjsip_tx_data_invalidate_msg))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[999]"></a>pjsip_tx_data_set_transport</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sip_transport.o(.text.pjsip_tx_data_set_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = pjsip_tx_data_set_transport &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
</UL>

<P><STRONG><a name="[a28]"></a>pjsip_ua_find_dialog</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, sip_ua_layer.o(.text.pjsip_ua_find_dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = pjsip_ua_find_dialog &rArr; pj_hash_get_lower &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
</UL>

<P><STRONG><a name="[459]"></a>pjsip_ua_get_endpt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sip_ua_layer.o(.text.pjsip_ua_get_endpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_ua_get_endpt &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
</UL>

<P><STRONG><a name="[a4d]"></a>pjsip_ua_init_module</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sip_ua_layer.o(.text.pjsip_ua_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjsip_ua_init_module &rArr; pjsip_endpt_register_module &rArr; pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[a82]"></a>pjsip_ua_instance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_ua_layer.o(.text.pjsip_ua_instance))
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[487]"></a>pjsip_ua_register_dlg</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, sip_ua_layer.o(.text.pjsip_ua_register_dlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = pjsip_ua_register_dlg &rArr; pj_hash_set_np_lower &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np_lower
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
</UL>

<P><STRONG><a name="[a4e]"></a>pjsip_ua_unregister_dlg</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, sip_ua_layer.o(.text.pjsip_ua_unregister_dlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = pjsip_ua_unregister_dlg &rArr; pj_hash_set_np_lower &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np_lower
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_lower
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregister_and_destroy_dialog
</UL>

<P><STRONG><a name="[a4f]"></a>pjsip_udp_transport_attach2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sip_transport_udp.o(.text.pjsip_udp_transport_attach2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5520<LI>Call Chain = pjsip_udp_transport_attach2 &rArr; transport_attach &rArr; udp_destroy &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
</UL>

<P><STRONG><a name="[79a]"></a>pjsip_unsupported_hdr_create</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_unsupported_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_unsupported_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_unsupported
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
</UL>

<P><STRONG><a name="[5f2]"></a>pjsip_via_hdr_create</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sip_msg.o(.text.pjsip_via_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsip_via_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_throw
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
</UL>

<P><STRONG><a name="[63b]"></a>pjsip_warning_hdr_create</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, sip_msg.o(.text.pjsip_warning_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsip_warning_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
</UL>

<P><STRONG><a name="[654]"></a>pjsip_warning_hdr_create_from_status</STRONG> (Thumb, 160 bytes, Stack size 152 bytes, sip_msg.o(.text.pjsip_warning_hdr_create_from_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = pjsip_warning_hdr_create_from_status &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_evsub_rx_notify
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[79b]"></a>pjsip_www_authenticate_hdr_create</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = pjsip_www_authenticate_hdr_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_www_authenticate
</UL>

<P><STRONG><a name="[727]"></a>pjsip_xfer_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_xfer.o(.text.pjsip_xfer_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsip_xfer_accept &rArr; pjsip_evsub_accept &rArr; pjsip_dlg_send_response &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
</UL>

<P><STRONG><a name="[726]"></a>pjsip_xfer_create_uas</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, sip_xfer.o(.text.pjsip_xfer_create_uas))
<BR><BR>[Stack]<UL><LI>Max Depth = 5120<LI>Call Chain = pjsip_xfer_create_uas &rArr; pjsip_evsub_create_uas &rArr; evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_create
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
</UL>

<P><STRONG><a name="[a51]"></a>pjsip_xfer_current_notify</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sip_xfer.o(.text.pjsip_xfer_current_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5624<LI>Call Chain = pjsip_xfer_current_notify &rArr; pjsip_xfer_notify &rArr; pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_refresh
</UL>

<P><STRONG><a name="[a52]"></a>pjsip_xfer_init_module</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sip_xfer.o(.text.pjsip_xfer_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = pjsip_xfer_init_module &rArr; pjsip_evsub_register_pkg &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_register_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[728]"></a>pjsip_xfer_notify</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, sip_xfer.o(.text.pjsip_xfer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5600<LI>Call Chain = pjsip_xfer_notify &rArr; pjsip_evsub_notify &rArr; pjsip_dlg_create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_server_timeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_on_evsub_rx_refresh
</UL>

<P><STRONG><a name="[729]"></a>pjsip_xfer_send_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_xfer.o(.text.pjsip_xfer_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8816<LI>Call Chain = pjsip_xfer_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
</UL>

<P><STRONG><a name="[1f3]"></a>pjsipsimple_strerror</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, errno_5.o(.text.pjsipsimple_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjsipsimple_strerror &rArr; pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub.o(.text.pjsip_evsub_init_module)
</UL>
<P><STRONG><a name="[a53]"></a>pjstun_create_bind_req</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stun_simple.o(.text.pjstun_create_bind_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = pjstun_create_bind_req &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[a54]"></a>pjstun_get_mapped_addr2</STRONG> (Thumb, 1640 bytes, Stack size 560 bytes, stun_simple_client.o(.text.pjstun_get_mapped_addr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5296<LI>Call Chain = pjstun_get_mapped_addr2 &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ISSET
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_select
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ZERO
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_SET
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recvfrom
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_sendto
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_capacity
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_msg_find_attr
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_parse_msg
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_create_bind_req
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[a56]"></a>pjstun_msg_find_attr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stun_simple.o(.text.pjstun_msg_find_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pjstun_msg_find_attr &rArr; pj_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[a55]"></a>pjstun_parse_msg</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, stun_simple.o(.text.pjstun_parse_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pjstun_parse_msg &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
</UL>

<P><STRONG><a name="[a57]"></a>pjsua_acc_add</STRONG> (Thumb, 3536 bytes, Stack size 328 bytes, pjsua_acc.o(.text.pjsua_acc_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 9216<LI>Call Chain = pjsua_acc_add &rArr; pjsua_start_mwi &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_insert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_escape
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_final
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_update
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_crc32_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_acc
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_from_media_config
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_config_from_media_config
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a61]"></a>pjsua_acc_config_default</STRONG> (Thumb, 580 bytes, Stack size 536 bytes, pjsua_core.o(.text.pjsua_acc_config_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = pjsua_acc_config_default &rArr; pj_stristr &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stristr
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_sys_info
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_default
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_options_default
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_opt_default
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a58]"></a>pjsua_acc_config_dup</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, pjsua_acc.o(.text.pjsua_acc_config_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = pjsua_acc_config_dup &rArr; pjsua_srtp_opt_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_dup
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_pref_dup
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cred_info_dup
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_srtp_opt_dup
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_turn_config_dup
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_config_dup
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_config_dup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[3f3]"></a>pjsua_acc_create_uac_contact</STRONG> (Thumb, 484 bytes, Stack size 192 bytes, pjsua_acc.o(.text.pjsua_acc_create_uac_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 6776<LI>Call Chain = pjsua_acc_create_uac_contact &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_update_contact
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[a67]"></a>pjsua_acc_create_uas_contact</STRONG> (Thumb, 928 bytes, Stack size 216 bytes, pjsua_acc.o(.text.pjsua_acc_create_uas_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 5288<LI>Call Chain = pjsua_acc_create_uas_contact &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_tpmgr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_fla2_param_default
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_from_name
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[a68]"></a>pjsua_acc_end_ip_change</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, pjsua_acc.o(.text.pjsua_acc_end_ip_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = pjsua_acc_end_ip_change &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_update_contact_on_ip_change
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[a69]"></a>pjsua_acc_find_for_incoming</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, pjsua_acc.o(.text.pjsua_acc_find_for_incoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = pjsua_acc_find_for_incoming &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[a6a]"></a>pjsua_acc_find_for_outgoing</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, pjsua_acc.o(.text.pjsua_acc_find_for_outgoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = pjsua_acc_find_for_outgoing &rArr; pjsip_parse_uri &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[4e4]"></a>pjsua_acc_get_uac_addr</STRONG> (Thumb, 1888 bytes, Stack size 1512 bytes, pjsua_acc.o(.text.pjsua_acc_get_uac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 6584<LI>Call Chain = pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_acquire_transport2
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_tpmgr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_fla2_param_default
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_from_name
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_dest_info
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_via
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[5ab]"></a>pjsua_acc_handle_call_on_ip_change</STRONG> (Thumb, 396 bytes, Stack size 2264 bytes, pjsua_acc.o(.text.pjsua_acc_handle_call_on_ip_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 13336<LI>Call Chain = pjsua_acc_handle_call_on_ip_change &rArr; pjsua_call_reinvite &rArr; pjsua_call_reinvite2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_cleanup_flag
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_call_on_ip_change_cb
</UL>

<P><STRONG><a name="[a94]"></a>pjsua_acc_is_valid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pjsua_acc.o(.text.pjsua_acc_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_timer_cb
</UL>

<P><STRONG><a name="[76c]"></a>pjsua_acc_on_tp_state_changed</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, pjsua_acc.o(.text.pjsua_acc_on_tp_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 13400<LI>Call Chain = pjsua_acc_on_tp_state_changed &rArr; pjsua_acc_handle_call_on_ip_change &rArr; pjsua_call_reinvite &rArr; pjsua_call_reinvite2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_update_contact_on_ip_change
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_via_sent_by
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_release_transport
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_tp_state_callback
</UL>

<P><STRONG><a name="[39a]"></a>pjsua_acc_set_registration</STRONG> (Thumb, 1448 bytes, Stack size 136 bytes, pjsua_acc.o(.text.pjsua_acc_set_registration))
<BR><BR>[Stack]<UL><LI>Max Depth = 7176<LI>Call Chain = pjsua_acc_set_registration &rArr; pjsua_pres_unpublish &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_supported_hdr_create
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_route_set
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_prefs
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_credentials
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_dec_ref
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_ref
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_create
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_unpublish
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_delay_before_refresh
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_via_sent_by
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_reg_tsx_cb
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_add_headers
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_transport
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_update_contact_on_ip_change
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[a6e]"></a>pjsua_acc_update_contact_on_ip_change</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, pjsua_acc.o(.text.pjsua_acc_update_contact_on_ip_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 7208<LI>Call Chain = pjsua_acc_update_contact_on_ip_change &rArr; pjsua_acc_set_registration &rArr; pjsua_pres_unpublish &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
</UL>

<P><STRONG><a name="[a70]"></a>pjsua_aud_channel_update</STRONG> (Thumb, 672 bytes, Stack size 1352 bytes, pjsua_aud.o(.text.pjsua_aud_channel_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 6432<LI>Call Chain = pjsua_aud_channel_update &rArr; pjmedia_stream_create &rArr; pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_add_port
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_event_callback
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_set_dtmf_callback
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_port
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_sdes
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_start
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[a72]"></a>pjsua_aud_stop_stream</STRONG> (Thumb, 180 bytes, Stack size 408 bytes, pjsua_aud.o(.text.pjsua_aud_stop_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 5336<LI>Call Chain = pjsua_aud_stop_stream &rArr; pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_info
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_stat
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_bye
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
</UL>

<P><STRONG><a name="[a73]"></a>pjsua_aud_subsys_destroy</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, pjsua_aud.o(.text.pjsua_aud_subsys_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5440<LI>Call Chain = pjsua_aud_subsys_destroy &rArr; close_snd_dev &rArr; pjmedia_master_port_destroy &rArr; pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
</UL>

<P><STRONG><a name="[a76]"></a>pjsua_aud_subsys_init</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, pjsua_aud.o(.text.pjsua_aud_subsys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 6288<LI>Call Chain = pjsua_aud_subsys_init &rArr; pjmedia_conf_create &rArr; pjmedia_snd_port_create_player &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_null_port_create
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_codec_mgr
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_master_port
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_set_codec_priority
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_register_audio_codecs
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_audio_codec_config_default
</UL>
<BR>[Called By]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[a78]"></a>pjsua_aud_subsys_start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pjsua_aud.o(.text.pjsua_aud_subsys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = pjsua_aud_subsys_start &rArr; pjsua_check_snd_dev_idle &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_start
</UL>

<P><STRONG><a name="[3f9]"></a>pjsua_buddy_update_pres</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, pjsua_pres.o(.text.pjsua_buddy_update_pres))
<BR><BR>[Stack]<UL><LI>Max Depth = 8952<LI>Call Chain = pjsua_buddy_update_pres &rArr; subscribe_buddy_presence &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buddy_timer_cb
</UL>

<P><STRONG><a name="[73d]"></a>pjsua_call_answer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pjsua_call.o(.text.pjsua_call_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 11072<LI>Call Chain = pjsua_call_answer &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call
</UL>

<P><STRONG><a name="[721]"></a>pjsua_call_answer2</STRONG> (Thumb, 892 bytes, Stack size 64 bytes, pjsua_call.o(.text.pjsua_call_answer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 11056<LI>Call Chain = pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_pending_call_answer
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
</UL>

<P><STRONG><a name="[a6c]"></a>pjsua_call_cleanup_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pjsua_call.o(.text.pjsua_call_cleanup_flag))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
</UL>

<P><STRONG><a name="[a7b]"></a>pjsua_call_dump</STRONG> (Thumb, 6384 bytes, Stack size 3544 bytes, pjsua_dump.o(.text.pjsua_call_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 8504<LI>Call Chain = pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_role_name
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_get_cand_type_name
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_info
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_stat
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_state_name
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_print_on
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_state_name
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_snd_is_active
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_ec_stat
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
</UL>

<P><STRONG><a name="[a97]"></a>pjsua_call_get_count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pjsua_call.o(.text.pjsua_call_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>

<P><STRONG><a name="[722]"></a>pjsua_call_get_info</STRONG> (Thumb, 1232 bytes, Stack size 48 bytes, pjsua_call.o(.text.pjsua_call_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pjsua_call_get_info &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_state_name
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_state
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_media_state
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
</UL>

<P><STRONG><a name="[a6b]"></a>pjsua_call_hangup</STRONG> (Thumb, 544 bytes, Stack size 88 bytes, pjsua_call.o(.text.pjsua_call_hangup))
<BR><BR>[Stack]<UL><LI>Max Depth = 9640<LI>Call Chain = pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup_all
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
</UL>

<P><STRONG><a name="[a7f]"></a>pjsua_call_hangup_all</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pjsua_call.o(.text.pjsua_call_hangup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 9664<LI>Call Chain = pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[a80]"></a>pjsua_call_is_active</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, pjsua_call.o(.text.pjsua_call_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsua_call_is_active &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>

<P><STRONG><a name="[72a]"></a>pjsua_call_make_call</STRONG> (Thumb, 1408 bytes, Stack size 80 bytes, pjsua_call.o(.text.pjsua_call_make_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 11072<LI>Call Chain = pjsua_call_make_call &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_instance
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_secure_level
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_via
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
</UL>

<P><STRONG><a name="[a83]"></a>pjsua_call_media_init</STRONG> (Thumb, 4960 bytes, Stack size 2432 bytes, pjsua_media.o(.text.pjsua_call_media_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 10720<LI>Call Chain = pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_insert
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_create2
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_loop_tp_setting_default
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_create3
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_turn_cfg_default
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stun_cfg_default
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_cfg_default
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_acc_is_using_stun
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJSUA_LOCK
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_init_cb
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_handle_events
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
</UL>

<P><STRONG><a name="[a89]"></a>pjsua_call_media_is_changing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pjsua_media.o(.text.pjsua_call_media_is_changing))
<BR><BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
</UL>

<P><STRONG><a name="[6d2]"></a>pjsua_call_on_incoming</STRONG> (Thumb, 3424 bytes, Stack size 376 bytes, pjsua_call.o(.text.pjsua_call_on_incoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 11480<LI>Call Chain = pjsua_call_on_incoming &rArr; on_incoming_call_med_tp_complete2 &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_remote
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_dlg
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uas_and_inc_lock
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_instance
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_free_cloned
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_clone
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request2
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_sdp_info
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_pending_call_answer
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_remote_nat_type
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_sip_acc_is_using_stun
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_session
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_verify_request
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pjsua_on_rx_request
</UL>

<P><STRONG><a name="[a6d]"></a>pjsua_call_reinvite</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pjsua_call.o(.text.pjsua_call_reinvite))
<BR><BR>[Stack]<UL><LI>Max Depth = 11072<LI>Call Chain = pjsua_call_reinvite &rArr; pjsua_call_reinvite2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
</UL>

<P><STRONG><a name="[a93]"></a>pjsua_call_reinvite2</STRONG> (Thumb, 596 bytes, Stack size 48 bytes, pjsua_call.o(.text.pjsua_call_reinvite2))
<BR><BR>[Stack]<UL><LI>Max Depth = 11040<LI>Call Chain = pjsua_call_reinvite2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_update_contact
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_is_changing
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_of_call_hold
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_target
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_via
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite
</UL>

<P><STRONG><a name="[73c]"></a>pjsua_call_schedule_reinvite_check</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pjsua_call.o(.text.pjsua_call_schedule_reinvite_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = pjsua_call_schedule_reinvite_check &rArr; pjsua_schedule_timer_dbg &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
</UL>

<P><STRONG><a name="[40d]"></a>pjsua_call_send_request</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, pjsua_call.o(.text.pjsua_call_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8840<LI>Call Chain = pjsua_call_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_init_np
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
</UL>

<P><STRONG><a name="[a95]"></a>pjsua_call_subsys_init</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, pjsua_call.o(.text.pjsua_call_subsys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = pjsua_call_subsys_init &rArr; reset_call &rArr; pjsip_rx_data_free_cloned &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_usage_init
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_dup
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_route_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[ac0]"></a>pjsua_call_subsys_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pjsua_call.o(.text.pjsua_call_subsys_start))
<BR><BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
</UL>

<P><STRONG><a name="[402]"></a>pjsua_cancel_timer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pjsua_core.o(.text.pjsua_cancel_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = pjsua_cancel_timer &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_schedule_reinvite_check
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
</UL>

<P><STRONG><a name="[742]"></a>pjsua_check_snd_dev_idle</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pjsua_aud.o(.text.pjsua_check_snd_dev_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = pjsua_check_snd_dev_idle &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_connect_count
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_enum_calls
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_count
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_recorder_destroy
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_player_destroy
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_start
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
</UL>

<P><STRONG><a name="[723]"></a>pjsua_conf_connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pjsua_aud.o(.text.pjsua_conf_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 6712<LI>Call Chain = pjsua_conf_connect &rArr; pjsua_conf_connect2 &rArr; pjsua_set_snd_dev2 &rArr; open_snd_dev &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_media_state
</UL>

<P><STRONG><a name="[a9a]"></a>pjsua_conf_connect2</STRONG> (Thumb, 896 bytes, Stack size 352 bytes, pjsua_aud.o(.text.pjsua_conf_connect2))
<BR><BR>[Stack]<UL><LI>Max Depth = 6696<LI>Call Chain = pjsua_conf_connect2 &rArr; pjsua_set_snd_dev2 &rArr; open_snd_dev &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_port_info
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_connect_port
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_param_default
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_aud_param
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect
</UL>

<P><STRONG><a name="[a9c]"></a>pjsua_config_default</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pjsua_core.o(.text.pjsua_config_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsua_config_default
</UL>
<BR>[Calls]<UL><LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_setting_default
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a96]"></a>pjsua_config_dup</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, pjsua_core.o(.text.pjsua_config_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjsua_config_dup &rArr; pjsip_cred_info_dup &rArr; pj_strdup_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cred_info_dup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
</UL>

<P><STRONG><a name="[a9e]"></a>pjsua_create</STRONG> (Thumb, 944 bytes, Stack size 128 bytes, pjsua_core.o(.text.pjsua_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 9832<LI>Call Chain = pjsua_create &rArr; pjsua_destroy2 &rArr; pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostname
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_srand
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_init
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getpid
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_util_init
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_init
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_setting_default
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_state
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[52b]"></a>pjsua_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pjsua_core.o(.text.pjsua_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 9712<LI>Call Chain = pjsua_destroy &rArr; pjsua_destroy2 &rArr; pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
</UL>

<P><STRONG><a name="[a9f]"></a>pjsua_destroy2</STRONG> (Thumb, 1788 bytes, Stack size 40 bytes, pjsua_core.o(.text.pjsua_destroy2))
<BR><BR>[Stack]<UL><LI>Max Depth = 9704<LI>Call Chain = pjsua_destroy2 &rArr; pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_close
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_destroy
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_destroy
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_sleep
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup_all
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_destroy
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[a98]"></a>pjsua_enum_calls</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, pjsua_call.o(.text.pjsua_enum_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = pjsua_enum_calls &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>

<P><STRONG><a name="[a7d]"></a>pjsua_get_ec_stat</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pjsua_aud.o(.text.pjsua_get_ec_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsua_get_ec_stat &rArr; pjmedia_snd_port_get_ec_stat &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_ec_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[ab9]"></a>pjsua_get_pjsip_endpt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pjsua_core.o(.text.pjsua_get_pjsip_endpt))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsolicited_mwi_on_rx_request
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_start
</UL>

<P><STRONG><a name="[aad]"></a>pjsua_get_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pjsua_core.o(.text.pjsua_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[a87]"></a>pjsua_handle_events</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pjsua_core.o(.text.pjsua_handle_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432<LI>Call Chain = pjsua_handle_events &rArr; pjsip_endpt_handle_events2 &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[a86]"></a>pjsua_ice_check_start_trickling</STRONG> (Thumb, 804 bytes, Stack size 40 bytes, pjsua_call.o(.text.pjsua_ice_check_start_trickling))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = pjsua_ice_check_start_trickling &rArr; pjsip_rdata_get_sdp_info &rArr; pjsip_get_sdp_info &rArr; pjmedia_sdp_parse &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_sdp_info
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_prack_method
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[a64]"></a>pjsua_ice_config_dup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pjsua_core.o(.text.pjsua_ice_config_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsua_ice_config_dup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[a5c]"></a>pjsua_ice_config_from_media_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pjsua_core.o(.text.pjsua_ice_config_from_media_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsua_ice_config_from_media_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[a91]"></a>pjsua_im_accept_pager</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pjsua_im.o(.text.pjsua_im_accept_pager))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[aa6]"></a>pjsua_im_init</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, pjsua_im.o(.text.pjsua_im_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = pjsua_im_init &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[5e0]"></a>pjsua_im_process_pager</STRONG> (Thumb, 472 bytes, Stack size 336 bytes, pjsua_im.o(.text.pjsua_im_process_pager))
<BR><BR>[Stack]<UL><LI>Max Depth = 5248<LI>Call Chain = pjsua_im_process_pager &rArr; pjsip_iscomposing_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_iscomposing_parse
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_on_rx_request
</UL>

<P><STRONG><a name="[aa7]"></a>pjsua_init</STRONG> (Thumb, 1860 bytes, Stack size 1944 bytes, pjsua_core.o(.text.pjsua_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8256<LI>Call Chain = pjsua_init &rArr; pjsua_media_subsys_init &rArr; pjsua_aud_subsys_init &rArr; pjmedia_conf_create &rArr; pjmedia_snd_port_create_player &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_version
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stristr
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_sys_info
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_set_ns
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_options_default
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_set_resolver
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_resolver
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_init_module
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_init_module
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_init_module
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init_module
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_init_module
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_init_module
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_instance
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_init_module
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_init_module
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_setting_default
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_module
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_replaces_init_module
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_init
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_state
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_reconfigure_logging
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[411]"></a>pjsua_init_tpselector</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_init_tpselector))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pjsua_init_tpselector &rArr; pjsip_transport_get_flag_from_type &rArr; get_tpname &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_update_contact
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[b01]"></a>pjsua_logging_config_default</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pjsua_core.o(.text.pjsua_logging_config_default))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a85]"></a>pjsua_media_acc_is_using_stun</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pjsua_acc.o(.text.pjsua_media_acc_is_using_stun))
<BR><BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[a92]"></a>pjsua_media_apply_xml_control</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pjsua_media.o(.text.pjsua_media_apply_xml_control))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[473]"></a>pjsua_media_channel_create_sdp</STRONG> (Thumb, 2016 bytes, Stack size 1568 bytes, pjsua_media.o(.text.pjsua_media_channel_create_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 7632<LI>Call Chain = pjsua_media_channel_create_sdp &rArr; pjmedia_rtcp_fb_encode_sdp &rArr; get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_ssrc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_setting_default
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_sdp_param_default
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_nat_name
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_of_call_hold
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
</UL>

<P><STRONG><a name="[3cd]"></a>pjsua_media_channel_deinit</STRONG> (Thumb, 1776 bytes, Stack size 1048 bytes, pjsua_media.o(.text.pjsua_media_channel_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 9552<LI>Call Chain = pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_set_decor
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_decor
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_clean_up
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[3ce]"></a>pjsua_media_channel_init</STRONG> (Thumb, 2824 bytes, Stack size 232 bytes, pjsua_media.o(.text.pjsua_media_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 10952<LI>Call Chain = pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_clean_up
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media2
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_state
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
</UL>

<P><STRONG><a name="[a8d]"></a>pjsua_media_channel_update</STRONG> (Thumb, 3316 bytes, Stack size 4672 bytes, pjsua_media.o(.text.pjsua_media_channel_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 11104<LI>Call Chain = pjsua_media_channel_update &rArr; pjsua_aud_channel_update &rArr; pjmedia_stream_create &rArr; pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_all_attr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_add_attr
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_type_name
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_loop_disable_rx
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_get_info
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_offer
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_was_answer_remote
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_channel_update
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_codec_fmtp
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_media_stream
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_media
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_state
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
</UL>

<P><STRONG><a name="[6c3]"></a>pjsua_media_prov_clean_up</STRONG> (Thumb, 514 bytes, Stack size 80 bytes, pjsua_media.o(.text.pjsua_media_prov_clean_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pjsua_media_prov_clean_up &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_revert
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_channel_init_cb
</UL>

<P><STRONG><a name="[a8c]"></a>pjsua_media_prov_revert</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pjsua_media.o(.text.pjsua_media_prov_revert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = pjsua_media_prov_revert &rArr; pjsua_media_prov_clean_up &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_clean_up
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
</UL>

<P><STRONG><a name="[aa2]"></a>pjsua_media_subsys_destroy</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pjsua_media.o(.text.pjsua_media_subsys_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5456<LI>Call Chain = pjsua_media_subsys_destroy &rArr; pjsua_aud_subsys_destroy &rArr; close_snd_dev &rArr; pjmedia_master_port_destroy &rArr; pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_instance
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_destroy
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_stop_threads
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_destroy2
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_shutdown
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[aa9]"></a>pjsua_media_subsys_init</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, pjsua_media.o(.text.pjsua_media_subsys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 6312<LI>Call Chain = pjsua_media_subsys_init &rArr; pjsua_aud_subsys_init &rArr; pjmedia_conf_create &rArr; pjmedia_snd_port_create_player &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_instance
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_mgr_create
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create2
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_shutdown
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_subsys_init
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[ab3]"></a>pjsua_media_subsys_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pjsua_media.o(.text.pjsua_media_subsys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = pjsua_media_subsys_start &rArr; pjsua_aud_subsys_start &rArr; pjsua_check_snd_dev_idle &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_start
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
</UL>

<P><STRONG><a name="[406]"></a>pjsua_msg_data_clone</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, pjsua_core.o(.text.pjsua_msg_data_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pjsua_msg_data_clone &rArr; pjsip_multipart_clone_part &rArr; pjsip_msg_body_clone &rArr; pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_clone_part
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
</UL>

<P><STRONG><a name="[40c]"></a>pjsua_msg_data_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pjsua_core.o(.text.pjsua_msg_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pjsua_msg_data_init &rArr; pjsip_media_type_init
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[3cf]"></a>pjsua_perror</STRONG> (Thumb, 54 bytes, Stack size 112 bytes, pjsua_core.o(.text.pjsua_perror))
<BR><BR>[Stack]<UL><LI>Max Depth = 4568<LI>Call Chain = pjsua_perror &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_of_call_hold
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_answer_call_med_tp_complete
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_init
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_initial_aud_param
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_aud_param
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_alive_timer_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_start
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_init
</UL>

<P><STRONG><a name="[a74]"></a>pjsua_player_destroy</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, pjsua_aud.o(.text.pjsua_player_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjsua_player_destroy &rArr; pjsua_check_snd_dev_idle &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
</UL>

<P><STRONG><a name="[391]"></a>pjsua_pool_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pjsua_pool_create &rArr; pj_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[ab4]"></a>pjsua_pres_delete_acc</STRONG> (Thumb, 290 bytes, Stack size 464 bytes, pjsua_pres.o(.text.pjsua_pres_delete_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 9280<LI>Call Chain = pjsua_pres_delete_acc &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_get_status
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[aab]"></a>pjsua_pres_init</STRONG> (Thumb, 972 bytes, Stack size 24 bytes, pjsua_pres.o(.text.pjsua_pres_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = pjsua_pres_init &rArr; pjsua_perror &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[a5e]"></a>pjsua_pres_init_acc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pjsua_pres.o(.text.pjsua_pres_init_acc))
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[a60]"></a>pjsua_pres_init_publish_acc</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, pjsua_pres.o(.text.pjsua_pres_init_publish_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 7080<LI>Call Chain = pjsua_pres_init_publish_acc &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_route_set
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_credentials
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_init
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_create
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_timer_cb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_cb
</UL>

<P><STRONG><a name="[ab6]"></a>pjsua_pres_notify</STRONG> (Thumb, 588 bytes, Stack size 432 bytes, pjsua_pres.o(.text.pjsua_pres_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 9352<LI>Call Chain = pjsua_pres_notify &rArr; subscribe_buddy_presence &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_find_node
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_buddy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[aa1]"></a>pjsua_pres_shutdown</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, pjsua_pres.o(.text.pjsua_pres_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 9328<LI>Call Chain = pjsua_pres_shutdown &rArr; pjsua_pres_delete_acc &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_buddy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[ab8]"></a>pjsua_pres_start</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pjsua_pres.o(.text.pjsua_pres_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = pjsua_pres_start &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_pjsip_endpt
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
</UL>

<P><STRONG><a name="[a6f]"></a>pjsua_pres_unpublish</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pjsua_pres.o(.text.pjsua_pres_unpublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 7040<LI>Call Chain = pjsua_pres_unpublish &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
</UL>

<P><STRONG><a name="[ab7]"></a>pjsua_pres_update_acc</STRONG> (Thumb, 394 bytes, Stack size 448 bytes, pjsua_pres.o(.text.pjsua_pres_update_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 9264<LI>Call Chain = pjsua_pres_update_acc &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_set_status
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_get_status
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[404]"></a>pjsua_process_msg_data</STRONG> (Thumb, 354 bytes, Stack size 80 bytes, pjsua_core.o(.text.pjsua_process_msg_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = pjsua_process_msg_data &rArr; pjsip_multipart_clone_part &rArr; pjsip_msg_body_clone &rArr; pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_add_part
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_clone_part
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create_part
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_create
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_create
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsubscribe_buddy_presence
</UL>

<P><STRONG><a name="[aa8]"></a>pjsua_reconfigure_logging</STRONG> (Thumb, 236 bytes, Stack size 112 bytes, pjsua_core.o(.text.pjsua_reconfigure_logging))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = pjsua_reconfigure_logging &rArr; pjsip_endpt_unregister_module &rArr; pj_rwmutex_lock_write &rArr; pj_sem_wait &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_close
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_open
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_set_log_func
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_set_level
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_set_decor
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_unregister_module
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_register_module
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
</UL>

<P><STRONG><a name="[a75]"></a>pjsua_recorder_destroy</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, pjsua_aud.o(.text.pjsua_recorder_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjsua_recorder_destroy &rArr; pjsua_check_snd_dev_idle &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_remove_port
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
</UL>

<P><STRONG><a name="[abc]"></a>pjsua_resolve_stun_servers</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, pjsua_core.o(.text.pjsua_resolve_stun_servers))
<BR><BR>[Stack]<UL><LI>Max Depth = 5856<LI>Call Chain = pjsua_resolve_stun_servers &rArr; resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_msec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>

<P><STRONG><a name="[40f]"></a>pjsua_schedule_timer2_dbg</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, pjsua_core.o(.text.pjsua_schedule_timer2_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = pjsua_schedule_timer2_dbg &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_media_on_event
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_failed_nego_cb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_init_complete_cb
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
</UL>

<P><STRONG><a name="[407]"></a>pjsua_schedule_timer_dbg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_schedule_timer_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = pjsua_schedule_timer_dbg &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_schedule_reinvite_check
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_retrans_18x
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_send_sip_info
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_evsub_on_state
</UL>

<P><STRONG><a name="[76e]"></a>pjsua_set_null_snd_dev</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, pjsua_aud.o(.text.pjsua_set_null_snd_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448<LI>Call Chain = pjsua_set_null_snd_dev &rArr; close_snd_dev &rArr; pjmedia_master_port_destroy &rArr; pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_start
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_create
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_master_port
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[a81]"></a>pjsua_set_snd_dev</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, pjsua_aud.o(.text.pjsua_set_snd_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 6376<LI>Call Chain = pjsua_set_snd_dev &rArr; pjsua_set_snd_dev2 &rArr; open_snd_dev &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
</UL>

<P><STRONG><a name="[a9b]"></a>pjsua_set_snd_dev2</STRONG> (Thumb, 872 bytes, Stack size 200 bytes, pjsua_aud.o(.text.pjsua_set_snd_dev2))
<BR><BR>[Stack]<UL><LI>Max Depth = 6344<LI>Call Chain = pjsua_set_snd_dev2 &rArr; open_snd_dev &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_master_port
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_param_default
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_aud_param
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
</UL>

<P><STRONG><a name="[aa0]"></a>pjsua_set_state</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = pjsua_set_state &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
</UL>

<P><STRONG><a name="[4e3]"></a>pjsua_sip_acc_is_using_stun</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pjsua_acc.o(.text.pjsua_sip_acc_is_using_stun))
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlg_set_via
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_publish
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_buddy_presence
</UL>

<P><STRONG><a name="[a7c]"></a>pjsua_snd_is_active</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pjsua_aud.o(.text.pjsua_snd_is_active))
<BR><BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[a66]"></a>pjsua_srtp_opt_dup</STRONG> (Thumb, 226 bytes, Stack size 376 bytes, pjsua_core.o(.text.pjsua_srtp_opt_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = pjsua_srtp_opt_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[abf]"></a>pjsua_start</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = pjsua_start &rArr; pjsua_media_subsys_start &rArr; pjsua_aud_subsys_start &rArr; pjsua_check_snd_dev_idle &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_start
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_start
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_subsys_start
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a5f]"></a>pjsua_start_mwi</STRONG> (Thumb, 896 bytes, Stack size 72 bytes, pjsua_pres.o(.text.pjsua_start_mwi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8888<LI>Call Chain = pjsua_start_mwi &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_instance
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_send_request
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_initiate
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_create_uac
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_sip_acc_is_using_stun
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_timer_cb
</UL>

<P><STRONG><a name="[ac1]"></a>pjsua_transport_config_default</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pjsua_core.o(.text.pjsua_transport_config_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pjsua_transport_config_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a63]"></a>pjsua_transport_config_dup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_transport_config_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjsua_transport_config_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[ac2]"></a>pjsua_transport_create</STRONG> (Thumb, 1836 bytes, Stack size 720 bytes, pjsua_core.o(.text.pjsua_transport_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 6648<LI>Call Chain = pjsua_transport_create &rArr; resolve_stun_server &rArr; pjsua_resolve_stun_servers &rArr; resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjstun_get_mapped_addr2
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_tpmgr
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_udp_transport_attach2
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_cfg_default
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_set_state_cb
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_type_get_af
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_string
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[a65]"></a>pjsua_turn_config_dup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pjsua_core.o(.text.pjsua_turn_config_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsua_turn_config_dup &rArr; pj_stun_auth_cred_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_dup
</UL>

<P><STRONG><a name="[a5d]"></a>pjsua_turn_config_from_media_config</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pjsua_core.o(.text.pjsua_turn_config_from_media_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjsua_turn_config_from_media_config &rArr; pj_stun_auth_cred_dup &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_cred_dup
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[a88]"></a>pjsua_update_stun_servers</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, pjsua_core.o(.text.pjsua_update_stun_servers))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = pjsua_update_stun_servers &rArr; resolve_stun_server &rArr; pjsua_resolve_stun_servers &rArr; resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[9f8]"></a>pjxpidf_create</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, xpidf.o(.text.pjxpidf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjxpidf_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_attr
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
</UL>

<P><STRONG><a name="[a04]"></a>pjxpidf_get_status</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, xpidf.o(.text.pjxpidf_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pjxpidf_get_status &rArr; pj_xml_find_attr &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf2
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf
</UL>

<P><STRONG><a name="[a03]"></a>pjxpidf_get_uri</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xpidf.o(.text.pjxpidf_get_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pjxpidf_get_uri &rArr; pj_xml_find_attr &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf2
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf
</UL>

<P><STRONG><a name="[a02]"></a>pjxpidf_parse</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, xpidf.o(.text.pjxpidf_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = pjxpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf2
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf
</UL>

<P><STRONG><a name="[9f9]"></a>pjxpidf_set_status</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, xpidf.o(.text.pjxpidf_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pjxpidf_set_status &rArr; pj_xml_find_attr &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_attr
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_find_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_xpidf
</UL>

<P><STRONG><a name="[889]"></a>platform_strerror</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, os_error_unix.o(.text.platform_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = platform_strerror &rArr; pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
</UL>

<P><STRONG><a name="[8b1]"></a>pthread_attr_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos_posix_pthread.o(.text.pthread_attr_init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
</UL>

<P><STRONG><a name="[8b2]"></a>pthread_attr_setstacksize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos_posix_pthread.o(.text.pthread_attr_setstacksize))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
</UL>

<P><STRONG><a name="[8b3]"></a>pthread_create</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, freertos_posix_pthread.o(.text.pthread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pthread_create &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
</UL>

<P><STRONG><a name="[3fd]"></a>pthread_exit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, freertos_posix_pthread.o(.text.pthread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pthread_exit &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ca_thread_func
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_thread_func
</UL>

<P><STRONG><a name="[8b4]"></a>pthread_getschedparam</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, freertos_posix_pthread.o(.text.pthread_getschedparam))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_get_prio_max
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_set_prio
</UL>

<P><STRONG><a name="[8b9]"></a>pthread_getspecific</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, freertos_posix_pthread_key.o(.text.pthread_getspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pthread_getspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>

<P><STRONG><a name="[8b6]"></a>pthread_join</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, freertos_posix_pthread.o(.text.pthread_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pthread_join &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
</UL>

<P><STRONG><a name="[8b7]"></a>pthread_key_create</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, freertos_posix_pthread_key.o(.text.pthread_key_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pthread_key_create &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
</UL>

<P><STRONG><a name="[8b8]"></a>pthread_key_delete</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, freertos_posix_pthread_key.o(.text.pthread_key_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pthread_key_delete &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
</UL>

<P><STRONG><a name="[ad9]"></a>pthread_key_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, freertos_posix_pthread_key.o(.text.pthread_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pthread_key_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
</UL>

<P><STRONG><a name="[5eb]"></a>pthread_mutex_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pthread_mutex_destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[5e9]"></a>pthread_mutex_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pthread_mutex_init &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[851]"></a>pthread_mutex_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pthread_mutex_lock &rArr; pthread_mutex_timedlock &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>

<P><STRONG><a name="[ada]"></a>pthread_mutex_timedlock</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutex_timedlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pthread_mutex_timedlock &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTILS_AbsoluteTimespecToDeltaTicks
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_trylock
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_lock
</UL>

<P><STRONG><a name="[852]"></a>pthread_mutex_trylock</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutex_trylock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pthread_mutex_trylock &rArr; pthread_mutex_timedlock &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
</UL>

<P><STRONG><a name="[850]"></a>pthread_mutex_unlock</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pthread_mutex_unlock &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
</UL>

<P><STRONG><a name="[5ea]"></a>pthread_mutexattr_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutexattr_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[5e7]"></a>pthread_mutexattr_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutexattr_init))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[5e8]"></a>pthread_mutexattr_settype</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos_posix_pthread_mutex.o(.text.pthread_mutexattr_settype))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[8bb]"></a>pthread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, freertos_posix_pthread.o(.text.pthread_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pthread_self &rArr; xTaskGetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
</UL>
<BR>[Called By]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_getspecific
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setspecific
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
</UL>

<P><STRONG><a name="[8bd]"></a>pthread_setschedparam</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, freertos_posix_pthread.o(.text.pthread_setschedparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pthread_setschedparam &rArr; vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_priority_max
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_set_prio
</UL>

<P><STRONG><a name="[8ba]"></a>pthread_setspecific</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, freertos_posix_pthread_key.o(.text.pthread_setspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
</UL>

<P><STRONG><a name="[2bf]"></a>pvPortMalloc</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, heap_5.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInterfaceInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setspecific
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_create
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_block_alloc
</UL>

<P><STRONG><a name="[b5a]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[acf]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[877]"></a>recv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsd_socket.o(.text.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = recv &rArr; socketReceive &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recv
</UL>

<P><STRONG><a name="[878]"></a>recvfrom</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, bsd_socket.o(.text.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = recvfrom &rArr; socketReceiveFrom &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveFrom
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_recvfrom
</UL>

<P><STRONG><a name="[92c]"></a>res_GetXOFF</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, resamplesubs.o(.text.res_GetXOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = res_GetXOFF &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
</UL>

<P><STRONG><a name="[92d]"></a>res_Resample</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, resamplesubs.o(.text.res_Resample))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = res_Resample &rArr; SrcUD &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SrcUD
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
</UL>

<P><STRONG><a name="[92e]"></a>res_SrcLinear</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, resamplesubs.o(.text.res_SrcLinear))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = res_SrcLinear &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
</UL>

<P><STRONG><a name="[62b]"></a>resolve_stun_server</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, pjsua_core.o(.text.resolve_stun_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 5928<LI>Call Chain = resolve_stun_server &rArr; pjsua_resolve_stun_servers &rArr; resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_msec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_stun_resolve_cb
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_update_stun_servers
</UL>

<P><STRONG><a name="[13b]"></a>saiRxDMA_ConvCplt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(.text.saiRxDMA_ConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = saiRxDMA_ConvCplt &rArr; Audio_DMA_rx_callback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sai.o(.text.SAIA_RX_DMA_Init)
</UL>
<P><STRONG><a name="[13a]"></a>saiRxDMA_M1ConvCplt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(.text.saiRxDMA_M1ConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = saiRxDMA_M1ConvCplt &rArr; Audio_DMA_rx_callback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sai.o(.text.SAIA_RX_DMA_Init)
</UL>
<P><STRONG><a name="[13c]"></a>saiTxDMA_ConvCplt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(.text.saiTxDMA_ConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = saiTxDMA_ConvCplt &rArr; Audio_DMA_tx_callback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sai.o(.text.SAIA_TX_DMA_Init)
</UL>
<P><STRONG><a name="[13d]"></a>saiTxDMA_M1ConvCplt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(.text.saiTxDMA_M1ConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = saiTxDMA_M1ConvCplt &rArr; Audio_DMA_tx_callback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sai.o(.text.SAIA_TX_DMA_Init)
</UL>
<P><STRONG><a name="[ae0]"></a>sched_get_priority_max</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos_posix_sched.o(.text.sched_get_priority_max))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setschedparam
</UL>

<P><STRONG><a name="[879]"></a>select</STRONG> (Thumb, 792 bytes, Stack size 128 bytes, bsd_socket.o(.text.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = select &rArr; socketRegisterEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketFdClr
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_select
</UL>

<P><STRONG><a name="[86d]"></a>sem_destroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, freertos_posix_semaphore.o(.text.sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sem_destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_destroy
</UL>

<P><STRONG><a name="[86c]"></a>sem_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, freertos_posix_semaphore.o(.text.sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sem_init &rArr; xQueueCreateCountingSemaphoreStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
</UL>

<P><STRONG><a name="[86e]"></a>sem_post</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, freertos_posix_semaphore.o(.text.sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sem_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_post
</UL>

<P><STRONG><a name="[86f]"></a>sem_wait</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, freertos_posix_semaphore.o(.text.sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sem_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
</UL>

<P><STRONG><a name="[87a]"></a>send</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsd_socket.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = send &rArr; socketSend &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_send
</UL>

<P><STRONG><a name="[87b]"></a>sendto</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, bsd_socket.o(.text.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sendto &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketTranslateErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_sendto
</UL>

<P><STRONG><a name="[87d]"></a>setsockopt</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, bsd_socket.o(.text.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = setsockopt &rArr; socketSetRxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetRxBufferSize
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTxBufferSize
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetErrnoCode
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
</UL>

<P><STRONG><a name="[afe]"></a>sha256Final</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sha256.o(.text.sha256Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
</UL>

<P><STRONG><a name="[b5e]"></a>sha256Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sha256.o(.text.sha256Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha256Init
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
</UL>

<P><STRONG><a name="[b00]"></a>sha256ProcessBlock</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, sha256.o(.text.sha256ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
</UL>

<P><STRONG><a name="[aff]"></a>sha256Update</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sha256.o(.text.sha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[266]"></a>simple_pjsua</STRONG> (Thumb, 484 bytes, Stack size 4560 bytes, task_main.o(.text.simple_pjsua))
<BR><BR>[Stack]<UL><LI>Max Depth = 14392<LI>Call Chain = simple_pjsua &rArr; pjsua_create &rArr; pjsua_destroy2 &rArr; pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_config_default
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_config_default
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_logging_config_default
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_config_default
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_create
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_main.o(.text.userAppEntry)
</UL>
<P><STRONG><a name="[b02]"></a>sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, freertos_posix_unistd.o(.text.sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[87f]"></a>socket</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsd_socket.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = socket &rArr; socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
</UL>

<P><STRONG><a name="[3a6]"></a>socketAccept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, socket.o(.text.socketAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = socketAccept &rArr; tcpAccept &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[b05]"></a>socketAllocate</STRONG> (Thumb, 340 bytes, Stack size 120 bytes, socket_misc.o(.text.socketAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[3f7]"></a>socketBind</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, socket.o(.text.socketBind))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[3a8]"></a>socketClose</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, socket.o(.text.socketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[444]"></a>socketConnect</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, socket.o(.text.socketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[35f]"></a>socketFdClr</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, bsd_socket_misc.o(.text.socketFdClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = socketFdClr
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_CLR
</UL>

<P><STRONG><a name="[360]"></a>socketFdIsSet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsd_socket_misc.o(.text.socketFdIsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = socketFdIsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ISSET
</UL>

<P><STRONG><a name="[362]"></a>socketFdSet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsd_socket_misc.o(.text.socketFdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = socketFdSet
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_SET
</UL>

<P><STRONG><a name="[365]"></a>socketFdZero</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsd_socket_misc.o(.text.socketFdZero))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ZERO
</UL>

<P><STRONG><a name="[af1]"></a>socketGetEvents</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, socket_misc.o(.text.socketGetEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = socketGetEvents &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[704]"></a>socketInit</STRONG> (Thumb, 1094 bytes, Stack size 72 bytes, socket.o(.text.socketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = socketInit &rArr; osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[6b5]"></a>socketListen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, socket.o(.text.socketListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[b03]"></a>socketOpen</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, socket.o(.text.socketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[ae4]"></a>socketReceive</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, socket.o(.text.socketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = socketReceive &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[b0d]"></a>socketReceiveEx</STRONG> (Thumb, 230 bytes, Stack size 104 bytes, socket.o(.text.socketReceiveEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveFrom
</UL>

<P><STRONG><a name="[ae5]"></a>socketReceiveFrom</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, socket.o(.text.socketReceiveFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = socketReceiveFrom &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[af0]"></a>socketRegisterEvents</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, socket_misc.o(.text.socketRegisterEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = socketRegisterEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[af4]"></a>socketSend</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, socket.o(.text.socketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = socketSend &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[af8]"></a>socketSendTo</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, socket.o(.text.socketSendTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[3a9]"></a>socketSetErrnoCode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsd_socket_misc.o(.text.socketSetErrnoCode))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlsocket
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[afc]"></a>socketSetRxBufferSize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, socket.o(.text.socketSetRxBufferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = socketSetRxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[afd]"></a>socketSetTimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, socket.o(.text.socketSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = socketSetTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[afb]"></a>socketSetTxBufferSize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, socket.o(.text.socketSetTxBufferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = socketSetTxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[3f8]"></a>socketTranslateErrorCode</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, bsd_socket_misc.o(.text.socketTranslateErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[af2]"></a>socketUnregisterEvents</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, socket_misc.o(.text.socketUnregisterEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = socketUnregisterEvents &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[716]"></a>stm32f4xxCryptoInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_crypto.o(.text.stm32f4xxCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = stm32f4xxCryptoInit &rArr; osCreateMutex &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[b14]"></a>stm32f4xxEthCalcCrc</STRONG> (Thumb, 470 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
</UL>

<P><STRONG><a name="[297]"></a>stm32f4xxEthDisableIrq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthDisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[296]"></a>stm32f4xxEthEnableIrq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthEnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[298]"></a>stm32f4xxEthEventHandler</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = stm32f4xxEthEventHandler &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[294]"></a>stm32f4xxEthInit</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = stm32f4xxEthInit &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[b13]"></a>stm32f4xxEthInitGpio</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthInitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = stm32f4xxEthInitGpio &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[29d]"></a>stm32f4xxEthReadPhyReg</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthReadPhyReg))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[299]"></a>stm32f4xxEthSendPacket</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = stm32f4xxEthSendPacket &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[295]"></a>stm32f4xxEthTick</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthTick))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[29a]"></a>stm32f4xxEthUpdateMacAddrFilter</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = stm32f4xxEthUpdateMacAddrFilter &rArr; stm32f4xxEthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[29b]"></a>stm32f4xxEthUpdateMacConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthUpdateMacConfig))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[29c]"></a>stm32f4xxEthWritePhyReg</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(.text.stm32f4xxEthWritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.rodata.stm32f4xxEthDriver)
</UL>
<P><STRONG><a name="[3a7]"></a>swapInt16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(.text.swapInt16))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>

<P><STRONG><a name="[4c6]"></a>swapInt32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(.text.swapInt32))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
</UL>

<P><STRONG><a name="[b08]"></a>tcpAbort</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp.o(.text.tcpAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
</UL>

<P><STRONG><a name="[b04]"></a>tcpAccept</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, tcp.o(.text.tcpAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcpAccept &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
</UL>

<P><STRONG><a name="[b17]"></a>tcpChangeState</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tcp_misc.o(.text.tcpChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[b1b]"></a>tcpCheckAck</STRONG> (Thumb, 704 bytes, Stack size 32 bytes, tcp_misc.o(.text.tcpCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[b1f]"></a>tcpCheckOverrideTimer</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tcp_timer.o(.text.tcpCheckOverrideTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpCheckOverrideTimer &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[b20]"></a>tcpCheckPersistTimer</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp_timer.o(.text.tcpCheckPersistTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[b21]"></a>tcpCheckRetransmitTimer</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tcp_timer.o(.text.tcpCheckRetransmitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpCheckRetransmitTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[b23]"></a>tcpCheckSeqNum</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tcp_misc.o(.text.tcpCheckSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcpCheckSeqNum &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[b24]"></a>tcpCheckSyn</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp_misc.o(.text.tcpCheckSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcpCheckSyn &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[b25]"></a>tcpComputeRto</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, tcp_misc.o(.text.tcpComputeRto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpComputeRto
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[b09]"></a>tcpConnect</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, tcp.o(.text.tcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[b18]"></a>tcpDeleteControlBlock</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp_misc.o(.text.tcpDeleteControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[b29]"></a>tcpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_misc.o(.text.tcpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b1e]"></a>tcpFastRetransmit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp_misc.o(.text.tcpFastRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[b19]"></a>tcpGenerateInitialSeqNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_misc.o(.text.tcpGenerateInitialSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcpGenerateInitialSeqNum &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[b06]"></a>tcpGetDynamicPort</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tcp.o(.text.tcpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tcpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[b3b]"></a>tcpGetOption</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tcp_misc.o(.text.tcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[b10]"></a>tcpGetState</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(.text.tcpGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetRxBufferSize
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTxBufferSize
</UL>

<P><STRONG><a name="[706]"></a>tcpInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(.text.tcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b3a]"></a>tcpIsDuplicateSyn</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tcp_misc.o(.text.tcpIsDuplicateSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpIsDuplicateSyn
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[b07]"></a>tcpKillOldestConnection</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tcp.o(.text.tcpKillOldestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[b0a]"></a>tcpListen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp.o(.text.tcpListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
</UL>

<P><STRONG><a name="[b28]"></a>tcpNagleAlgo</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, tcp_misc.o(.text.tcpNagleAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[690]"></a>tcpProcessSegment</STRONG> (Thumb, 738 bytes, Stack size 56 bytes, tcp_fsm.o(.text.tcpProcessSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[b35]"></a>tcpProcessSegmentData</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, tcp_misc.o(.text.tcpProcessSegmentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[b36]"></a>tcpReadRxBuffer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcp_misc.o(.text.tcpReadRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpReadRxBuffer &rArr; netBufferRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[b0b]"></a>tcpReceive</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, tcp.o(.text.tcpReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[b2a]"></a>tcpRejectSegment</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, tcp_misc.o(.text.tcpRejectSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b1d]"></a>tcpRetransmitSegment</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, tcp_misc.o(.text.tcpRetransmitSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[b0e]"></a>tcpSend</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, tcp.o(.text.tcpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>

<P><STRONG><a name="[b16]"></a>tcpSendResetSegment</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp_misc.o(.text.tcpSendResetSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[b1a]"></a>tcpSendSegment</STRONG> (Thumb, 608 bytes, Stack size 88 bytes, tcp_misc.o(.text.tcpSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerRunning
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[b2f]"></a>tcpStateCloseWait</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp_fsm.o(.text.tcpStateCloseWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcpStateCloseWait &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b33]"></a>tcpStateClosing</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp_fsm.o(.text.tcpStateClosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcpStateClosing &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b2e]"></a>tcpStateEstablished</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tcp_fsm.o(.text.tcpStateEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b31]"></a>tcpStateFinWait1</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tcp_fsm.o(.text.tcpStateFinWait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tcpStateFinWait1 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b32]"></a>tcpStateFinWait2</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tcp_fsm.o(.text.tcpStateFinWait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tcpStateFinWait2 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b30]"></a>tcpStateLastAck</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_fsm.o(.text.tcpStateLastAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSyn &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b2b]"></a>tcpStateListen</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, tcp_fsm.o(.text.tcpStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcpStateListen &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b2d]"></a>tcpStateSynReceived</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tcp_fsm.o(.text.tcpStateSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b2c]"></a>tcpStateSynSent</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, tcp_fsm.o(.text.tcpStateSynSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcpStateSynSent &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[b34]"></a>tcpStateTimeWait</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tcp_fsm.o(.text.tcpStateTimeWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSyn &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[714]"></a>tcpTick</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tcp_timer.o(.text.tcpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tcpTick &rArr; tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[709]"></a>tcpUpdateEvents</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, tcp_misc.o(.text.tcpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
</UL>

<P><STRONG><a name="[b37]"></a>tcpUpdateReceiveWindow</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp_misc.o(.text.tcpUpdateReceiveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[b1c]"></a>tcpUpdateRetransmitQueue</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tcp_misc.o(.text.tcpUpdateRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[b26]"></a>tcpWaitForEvents</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_misc.o(.text.tcpWaitForEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpWaitForEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[b38]"></a>tcpWriteTxBuffer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_misc.o(.text.tcpWriteTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpWriteTxBuffer &rArr; netBufferWrite &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[717]"></a>trngGetRandomData</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_crypto_trng.o(.text.trngGetRandomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = trngGetRandomData &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[b12]"></a>trngInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_crypto_trng.o(.text.trngInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trngInit &rArr; HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
</UL>

<P><STRONG><a name="[499]"></a>tu_fifo_read_n_const_addr_full_words</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tusb_fifo.o(.text.tu_fifo_read_n_const_addr_full_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tu_fifo_read_n_const_addr_full_words &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_peek_n
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[498]"></a>tu_fifo_write_n_const_addr_full_words</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tusb_fifo.o(.text.tu_fifo_write_n_const_addr_full_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tu_fifo_write_n_const_addr_full_words &rArr; _tu_fifo_write_n &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[4c5]"></a>udpAllocBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, udp.o(.text.udpAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[4f1]"></a>udpAttachRxCallback</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, udp.o(.text.udpAttachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
</UL>

<P><STRONG><a name="[4e8]"></a>udpDetachRxCallback</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, udp.o(.text.udpDetachRxCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
</UL>

<P><STRONG><a name="[4f0]"></a>udpGetDynamicPort</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, udp.o(.text.udpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = udpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[705]"></a>udpInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, udp.o(.text.udpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[691]"></a>udpProcessDatagram</STRONG> (Thumb, 686 bytes, Stack size 64 bytes, udp.o(.text.udpProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = udpProcessDatagram &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[b0c]"></a>udpReceiveDatagram</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, udp.o(.text.udpReceiveDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = udpReceiveDatagram &rArr; netBufferFree &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[4c8]"></a>udpSendBuffer</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, udp.o(.text.udpSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[b0f]"></a>udpSendDatagram</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, udp.o(.text.udpSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = udpSendDatagram &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsMulticastAddr
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>

<P><STRONG><a name="[70a]"></a>udpUpdateEvents</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, udp.o(.text.udpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = udpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
</UL>

<P><STRONG><a name="[13e]"></a>userAppEntry</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, task_main.o(.text.userAppEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = userAppEntry &rArr; network_Init &rArr; netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_attr_init
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSDcardInit
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInterfaceInit
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_main.o(.text.UserApplication_Entry)
</UL>
<P><STRONG><a name="[8bf]"></a>usleep</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, freertos_posix_unistd.o(.text.usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
</UL>

<P><STRONG><a name="[ac6]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[b4d]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_port_freertos.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[b5d]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, freertos_hook.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[aca]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[ace]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[ac7]"></a>vListInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[b4a]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[6c1]"></a>vPortDefineHeapRegions</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, heap_5.o(.text.vPortDefineHeapRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortDefineHeapRegions
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac9]"></a>vPortEnterCritical</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
</UL>

<P><STRONG><a name="[acb]"></a>vPortExitCritical</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
</UL>

<P><STRONG><a name="[4a0]"></a>vPortFree</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, heap_5.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_delete
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunThread
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_block_free
</UL>

<P><STRONG><a name="[b52]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b58]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[b5c]"></a>vQueueAddToRegistry</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[550]"></a>vQueueDelete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteMutex
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destroy
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_destroy
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
</UL>

<P><STRONG><a name="[b48]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 456 bytes, Stack size 0 bytes, queue.o(.text.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[ad3]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[71a]"></a>vTaskDelay</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usleep
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>

<P><STRONG><a name="[ad1]"></a>vTaskDelete</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userAppEntry
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunThread
</UL>

<P><STRONG><a name="[b56]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[ad5]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[43c]"></a>vTaskName</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskName))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[b4b]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[b49]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[b4c]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[ae1]"></a>vTaskPrioritySet</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setschedparam
</UL>

<P><STRONG><a name="[ad8]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSetApplicationTaskTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
</UL>

<P><STRONG><a name="[42a]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_gettime
</UL>

<P><STRONG><a name="[43a]"></a>vTaskStackAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskStackAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[43b]"></a>vTaskStackSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskStackSize))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[384]"></a>vTaskStartScheduler</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserApplication_Entry
</UL>

<P><STRONG><a name="[ad2]"></a>vTaskSuspend</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunThread
</UL>

<P><STRONG><a name="[781]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
</UL>

<P><STRONG><a name="[29e]"></a>vTaskSwitchContext</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2cc]"></a>wm8978_CfgAudioIF</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, wm8978.o(.text.wm8978_CfgAudioIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_CfgAudioIF &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2c8]"></a>wm8978_CfgAudioPath</STRONG> (Thumb, 750 bytes, Stack size 56 bytes, wm8978.o(.text.wm8978_CfgAudioPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wm8978_CfgAudioPath &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2c0]"></a>wm8978_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm8978.o(.text.wm8978_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wm8978_Init &rArr; IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInterfaceInit
</UL>

<P><STRONG><a name="[2dc]"></a>wm8978_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm8978.o(.text.wm8978_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_Reset &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_StreamStop
</UL>

<P><STRONG><a name="[2c9]"></a>wm8978_SetMicGain</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm8978.o(.text.wm8978_SetMicGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_SetMicGain &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2ca]"></a>wm8978_SetOUT1Volume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm8978.o(.text.wm8978_SetOUT1Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_SetOUT1Volume &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[2cb]"></a>wm8978_SetOUT2Volume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm8978.o(.text.wm8978_SetOUT2Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_SetOUT2Volume &rArr; wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
</UL>

<P><STRONG><a name="[b51]"></a>wm8978_WriteReg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wm8978.o(.text.wm8978_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm8978_WriteReg &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioIF
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetMicGain
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetOUT2Volume
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetOUT1Volume
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
</UL>

<P><STRONG><a name="[b4f]"></a>xPortStartScheduler</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[379]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[af3]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xQueueCreateCountingSemaphoreStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
</UL>

<P><STRONG><a name="[2be]"></a>xQueueCreateMutex</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInterfaceInit
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[77d]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_init
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
</UL>

<P><STRONG><a name="[2bd]"></a>xQueueGenericCreate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInterfaceInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[77c]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[2c5]"></a>xQueueGenericSend</STRONG> (Thumb, 614 bytes, Stack size 56 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n_const_addr_full_words
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioReadData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioWriteData
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_getspecific
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setspecific
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_delete
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunThread
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>

<P><STRONG><a name="[2d7]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>

<P><STRONG><a name="[adf]"></a>xQueueGetMutexHolder</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text.xQueueGetMutexHolder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xQueueGetMutexHolder
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
</UL>

<P><STRONG><a name="[780]"></a>xQueueGiveFromISR</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>

<P><STRONG><a name="[ade]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
</UL>

<P><STRONG><a name="[2d5]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(.text.xQueueIsQueueFullFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
</UL>

<P><STRONG><a name="[2c4]"></a>xQueueReceive</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioReadData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioWriteData
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2d6]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, queue.o(.text.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_rx_callback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_DMA_tx_callback
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2c2]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n_const_addr_full_words
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioReadData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioWriteData
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_getspecific
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_setspecific
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_delete
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
</UL>

<P><STRONG><a name="[add]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, queue.o(.text.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
</UL>

<P><STRONG><a name="[b57]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[383]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserApplication_Entry
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>

<P><STRONG><a name="[b5b]"></a>xTaskCreateStatic</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[ad0]"></a>xTaskGetApplicationTaskTag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tasks.o(.text.xTaskGetApplicationTaskTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskGetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_self
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunThread
</UL>

<P><STRONG><a name="[adc]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_timedlock
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
</UL>

<P><STRONG><a name="[36e]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[370]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
</UL>

<P><STRONG><a name="[36f]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskGetTickCountFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[b55]"></a>xTaskIncrementTick</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ad7]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[b59]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[ad6]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[77f]"></a>xTaskResumeAll</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_create
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_unlock
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_join
</UL>

<P><STRONG><a name="[b4e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[718]"></a>yarrowInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, yarrow.o(.text.yarrowInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = yarrowInit &rArr; osCreateMutex &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[719]"></a>yarrowSeed</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, yarrow.o(.text.yarrowSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowSeed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_Init
</UL>

<P><STRONG><a name="[b61]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b7b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b7c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b7d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[364]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_ZERO
</UL>

<P><STRONG><a name="[b63]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b7e]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[39e]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_util_strerror
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_print
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_ssrc
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_media_desc
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_codec_info_from_sdp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sdp_attr_rtcp_fb
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_create
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_rtpmap_to_attr
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_audio_sdp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_strerror
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_supp_get_stat
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_info_to_id
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_register_factory
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_create
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_create
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_decode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_errcode_attr_create
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_check
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_strerror2
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_strerror
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_audiodev_strerror
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_log_error
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_strerror
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dialog
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_transport_info
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_factory_addr
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uas
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_create
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsipsimple_strerror
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_outbound_setting
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
</UL>

<P><STRONG><a name="[b7f]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[5ec]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_create
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_exception_id_name
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_error
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_init_int
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_sys_info
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mutex
</UL>

<P><STRONG><a name="[b64]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b80]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[55d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_dump
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[b81]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b50]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_info
</UL>

<P><STRONG><a name="[b65]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b82]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b83]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[b84]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[83f]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>

<P><STRONG><a name="[b85]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b86]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b87]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7de]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fwrite &rArr; fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_write
</UL>

<P><STRONG><a name="[2f3]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = puts &rArr; fputc &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[52a]"></a>error_exit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, task_main.o(.text.error_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 9728<LI>Call Chain = error_exit &rArr; pjsua_destroy &rArr; pjsua_destroy2 &rArr; pjsua_call_hangup_all &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_pjsua
</UL>

<P><STRONG><a name="[23a]"></a>on_incoming_call</STRONG> (Thumb, 88 bytes, Stack size 2224 bytes, task_main.o(.text.on_incoming_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 13296<LI>Call Chain = on_incoming_call &rArr; pjsua_call_answer &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_main.o(.text.simple_pjsua)
</UL>
<P><STRONG><a name="[23b]"></a>on_call_media_state</STRONG> (Thumb, 56 bytes, Stack size 2216 bytes, task_main.o(.text.on_call_media_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8928<LI>Call Chain = on_call_media_state &rArr; pjsua_conf_connect &rArr; pjsua_conf_connect2 &rArr; pjsua_set_snd_dev2 &rArr; open_snd_dev &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_main.o(.text.simple_pjsua)
</UL>
<P><STRONG><a name="[23c]"></a>on_call_state</STRONG> (Thumb, 78 bytes, Stack size 2224 bytes, task_main.o(.text.on_call_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 6768<LI>Call Chain = on_call_state &rArr; pjsua_call_get_info &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_main.o(.text.simple_pjsua)
</UL>
<P><STRONG><a name="[137]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_DMAReceiveCplt &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[138]"></a>SD_DMAError</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
<LI> stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[139]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[135]"></a>SD_DMATxAbort</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(.text.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_DMATxAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[136]"></a>SD_DMARxAbort</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(.text.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_DMARxAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[323]"></a>SD_FindSCR</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(.text.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_FindSCR &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[369]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp1))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[387]"></a>_tu_fifo_peek_n</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, tusb_fifo.o(.text._tu_fifo_peek_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tu_fifo_peek_n &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n_const_addr_full_words
</UL>

<P><STRONG><a name="[388]"></a>_tu_fifo_write_n</STRONG> (Thumb, 750 bytes, Stack size 72 bytes, tusb_fifo.o(.text._tu_fifo_write_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _tu_fifo_write_n &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write_n_const_addr_full_words
</UL>

<P><STRONG><a name="[ad4]"></a>prvUnlockQueue</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvUnlockQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[acc]"></a>prvInitialiseNewTask</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[ac8]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[ac5]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[267]"></a>prvIdleTask</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[268]"></a>prvTimerTask</STRONG> (Thumb, 786 bytes, Stack size 16 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvTimerTask &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[230]"></a>prvTaskExitError</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[b53]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b54]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[54e]"></a>mount_volume</STRONG> (Thumb, 1648 bytes, Stack size 48 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mount_volume &rArr; ff_req_grant &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[419]"></a>check_fs</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_fs &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[6e7]"></a>ld_qword</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(.text.ld_qword))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[6e8]"></a>move_window</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[22f]"></a>prvRunThread</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, freertos_posix_pthread.o(.text.prvRunThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvRunThread &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_posix_pthread.o(.text.pthread_create)
</UL>
<P><STRONG><a name="[375]"></a>_PrintUnsigned</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, segger_rtt_printf.o(.text._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[7a2]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, activesock.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
</UL>

<P><STRONG><a name="[7a5]"></a>pj_pool_zalloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, activesock.o(.text.pj_pool_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_pool_zalloc &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
</UL>

<P><STRONG><a name="[7a6]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, activesock.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
</UL>

<P><STRONG><a name="[176]"></a>ioqueue_on_read_complete</STRONG> (Thumb, 722 bytes, Stack size 80 bytes, activesock.o(.text.ioqueue_on_read_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = ioqueue_on_read_complete &rArr; pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activesock.o(.text.pj_activesock_create)
</UL>
<P><STRONG><a name="[177]"></a>ioqueue_on_write_complete</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, activesock.o(.text.ioqueue_on_write_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = ioqueue_on_write_complete &rArr; send_remaining &rArr; pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_remaining
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activesock.o(.text.pj_activesock_create)
</UL>
<P><STRONG><a name="[178]"></a>ioqueue_on_connect_complete</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, activesock.o(.text.ioqueue_on_connect_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ioqueue_on_connect_complete &rArr; pj_ioqueue_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activesock.o(.text.pj_activesock_create)
</UL>
<P><STRONG><a name="[179]"></a>ioqueue_on_accept_complete</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, activesock.o(.text.ioqueue_on_accept_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = ioqueue_on_accept_complete &rArr; pj_ioqueue_accept &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activesock.o(.text.pj_activesock_create)
</UL>
<P><STRONG><a name="[682]"></a>send_remaining</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, activesock.o(.text.send_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = send_remaining &rArr; pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_on_write_complete
</UL>

<P><STRONG><a name="[7e5]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, addr_resolv_sock.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostbyname
</UL>

<P><STRONG><a name="[7b6]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, addr_resolv_sock.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getaddrinfo
</UL>

<P><STRONG><a name="[7af]"></a>pj_memmove</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, array.o(.text.pj_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memmove &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_insert
</UL>

<P><STRONG><a name="[7b7]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, errno.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_errno_clear_handlers
</UL>

<P><STRONG><a name="[888]"></a>pjlib_error</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, errno.o(.text.pjlib_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pjlib_error &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
</UL>

<P><STRONG><a name="[84b]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, errno.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjlib_error
</UL>

<P><STRONG><a name="[853]"></a>pj_perror_imp</STRONG> (Thumb, 108 bytes, Stack size 248 bytes, errno.o(.text.pj_perror_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_log
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_6
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
</UL>

<P><STRONG><a name="[666]"></a>invoke_log</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, errno.o(.text.invoke_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 4456<LI>Call Chain = invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_imp
</UL>

<P><STRONG><a name="[199]"></a>exception_cleanup</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, except.o(.text.exception_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = exception_cleanup &rArr; pj_thread_local_free &rArr; pthread_key_delete &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> except.o(.text.pj_push_exception_handler_)
</UL>
<P><STRONG><a name="[7df]"></a>init_guid_chars</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, guid_simple.o(.text.init_guid_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_guid_chars
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
</UL>

<P><STRONG><a name="[554]"></a>pj_tolower</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hash.o(.text.pj_tolower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_tolower
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc_tolower
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[553]"></a>find_entry</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, hash.o(.text.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_capacity
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcmp
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_tolower
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_set
</UL>

<P><STRONG><a name="[555]"></a>pj_memcmp</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, hash.o(.text.pj_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pj_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[556]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hash.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[5bc]"></a>hash_set</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, hash.o(.text.hash_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np_lower
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_lower
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
</UL>

<P><STRONG><a name="[66e]"></a>ioqueue_remove_from_set</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ioqueue_select.o(.text.ioqueue_remove_from_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ioqueue_remove_from_set &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_CLR
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_exception_event
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
</UL>

<P><STRONG><a name="[677]"></a>key_has_pending_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ioqueue_select.o(.text.key_has_pending_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_has_pending_write &rArr; pj_list_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
</UL>

<P><STRONG><a name="[671]"></a>pj_list_empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ioqueue_select.o(.text.pj_list_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_write_event
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_accept
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_read
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_has_pending_write
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
</UL>

<P><STRONG><a name="[673]"></a>key_has_pending_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ioqueue_select.o(.text.key_has_pending_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_has_pending_read &rArr; pj_list_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_dispatch_read_event
</UL>

<P><STRONG><a name="[669]"></a>ioqueue_add_to_set</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ioqueue_select.o(.text.ioqueue_add_to_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ioqueue_add_to_set &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJ_FD_SET
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_connect
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_send
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_accept
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recv
</UL>

<P><STRONG><a name="[67c]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ioqueue_select.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
</UL>

<P><STRONG><a name="[7b8]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
</UL>

<P><STRONG><a name="[67b]"></a>pj_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ioqueue_select.o(.text.pj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioqueue_init_key
</UL>

<P><STRONG><a name="[827]"></a>ioqueue_init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ioqueue_select.o(.text.ioqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ioqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
</UL>

<P><STRONG><a name="[49f]"></a>rescan_fdset</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ioqueue_select.o(.text.rescan_fdset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rescan_fdset
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
</UL>

<P><STRONG><a name="[49e]"></a>pj_list_push_back</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ioqueue_select.o(.text.pj_list_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pj_list_push_back &rArr; pj_list_insert_before &rArr; pj_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_create
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_counter
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_closing_keys
</UL>

<P><STRONG><a name="[66a]"></a>ioqueue_destroy</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ioqueue_select.o(.text.ioqueue_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ioqueue_destroy &rArr; pj_lock_release &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_destroy
</UL>

<P><STRONG><a name="[82c]"></a>scan_closing_keys</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ioqueue_select.o(.text.scan_closing_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = scan_closing_keys &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
</UL>

<P><STRONG><a name="[67a]"></a>ioqueue_init_key</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, ioqueue_select.o(.text.ioqueue_init_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = ioqueue_init_key &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockopt
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_set_concurrency
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
</UL>

<P><STRONG><a name="[49d]"></a>decrement_counter</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ioqueue_select.o(.text.decrement_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = decrement_counter &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescan_fdset
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
</UL>

<P><STRONG><a name="[82e]"></a>key_has_pending_connect</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ioqueue_select.o(.text.key_has_pending_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_has_pending_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[5e1]"></a>increment_counter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ioqueue_select.o(.text.increment_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = increment_counter &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[6a9]"></a>key_has_pending_accept</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ioqueue_select.o(.text.key_has_pending_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_has_pending_accept &rArr; pj_list_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>

<P><STRONG><a name="[5ca]"></a>if_enum_by_af</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ip_helper_generic.o(.text.if_enum_by_af))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = if_enum_by_af &rArr; pj_getdefaultipinterface &rArr; pj_getipinterface &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getdefaultipinterface
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface
</UL>

<P><STRONG><a name="[5cb]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ip_helper_generic.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_option_default
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_enum_by_af
</UL>

<P><STRONG><a name="[7d8]"></a>pj_enum_ip_option_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ip_helper_generic.o(.text.pj_enum_ip_option_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_enum_ip_option_default &rArr; pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface2
</UL>

<P><STRONG><a name="[7d9]"></a>get_ipv6_deprecated</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip_helper_generic.o(.text.get_ipv6_deprecated))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ipv6_deprecated
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enum_ip_interface2
</UL>

<P><STRONG><a name="[835]"></a>pj_link_node</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, list_1.o(.text.pj_link_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_link_node
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_merge_last
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_nodes_after
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>

<P><STRONG><a name="[839]"></a>pj_list_empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, list_1.o(.text.pj_list_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_merge_last
</UL>

<P><STRONG><a name="[836]"></a>pj_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, list_1.o(.text.pj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_merge_last
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>

<P><STRONG><a name="[462]"></a>create_mutex_lock</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, lock.o(.text.create_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_simple_mutex
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
</UL>

<P><STRONG><a name="[463]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lock.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mutex_lock
</UL>

<P><STRONG><a name="[5a1]"></a>pj_pool_zalloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lock.o(.text.pj_pool_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_pool_zalloc &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_handler
</UL>

<P><STRONG><a name="[181]"></a>grp_lock_acquire</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lock.o(.text.grp_lock_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 4584<LI>Call Chain = grp_lock_acquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_set_owner_thread
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_del_handler
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_handler
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.text.pj_grp_lock_create)
</UL>
<P><STRONG><a name="[182]"></a>grp_lock_tryacquire</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lock.o(.text.grp_lock_tryacquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = grp_lock_tryacquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_set_owner_thread
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_tryacquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_tryacquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.text.pj_grp_lock_create)
</UL>
<P><STRONG><a name="[183]"></a>grp_lock_release</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lock.o(.text.grp_lock_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_unset_owner_thread
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_del_handler
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_handler
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.text.pj_grp_lock_create)
</UL>
<P><STRONG><a name="[184]"></a>grp_lock_destroy</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, lock.o(.text.grp_lock_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4568<LI>Call Chain = grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_dec_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.text.pj_grp_lock_create)
</UL>
<P><STRONG><a name="[7eb]"></a>pj_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lock.o(.text.pj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
</UL>

<P><STRONG><a name="[5a2]"></a>pj_list_push_back</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lock.o(.text.pj_list_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pj_list_push_back &rArr; pj_list_insert_before &rArr; pj_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_add_handler
</UL>

<P><STRONG><a name="[59f]"></a>grp_lock_set_owner_thread</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lock.o(.text.grp_lock_set_owner_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = grp_lock_set_owner_thread &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_tryacquire
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
</UL>

<P><STRONG><a name="[5a9]"></a>grp_lock_unset_owner_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lock.o(.text.grp_lock_unset_owner_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = grp_lock_unset_owner_thread &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_release
</UL>

<P><STRONG><a name="[5a0]"></a>grp_lock_add_handler</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lock.o(.text.grp_lock_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = grp_lock_add_handler &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_push_back
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_release
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_acquire
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create_w_handler
</UL>

<P><STRONG><a name="[5a3]"></a>grp_lock_add_ref</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lock.o(.text.grp_lock_add_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
</UL>

<P><STRONG><a name="[5a5]"></a>grp_lock_dec_ref</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lock.o(.text.grp_lock_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grp_lock_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
</UL>

<P><STRONG><a name="[82]"></a>null_op</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lock.o(.text.null_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = null_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock.o(.data.null_lock_template)
</UL>
<P><STRONG><a name="[6ba]"></a>log_get_raw_indent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, log.o(.text.log_get_raw_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log_get_raw_indent &rArr; pj_thread_local_get &rArr; pthread_getspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_add_indent
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_indent
</UL>

<P><STRONG><a name="[6bb]"></a>log_set_indent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, log.o(.text.log_set_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = log_set_indent &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_add_indent
</UL>

<P><STRONG><a name="[198]"></a>logging_shutdown</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, log.o(.text.logging_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = logging_shutdown &rArr; pj_thread_local_free &rArr; pthread_key_delete &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.text.pj_log_init)
</UL>
<P><STRONG><a name="[6a0]"></a>is_logging_suspended</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, log.o(.text.is_logging_suspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = is_logging_suspended &rArr; pj_thread_local_get &rArr; pthread_getspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>

<P><STRONG><a name="[83a]"></a>suspend_logging</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, log.o(.text.suspend_logging))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = suspend_logging &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>

<P><STRONG><a name="[6b9]"></a>log_get_indent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, log.o(.text.log_get_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = log_get_indent &rArr; log_get_raw_indent &rArr; pj_thread_local_get &rArr; pthread_getspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_raw_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>

<P><STRONG><a name="[83e]"></a>pj_memset</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, log.o(.text.pj_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>

<P><STRONG><a name="[840]"></a>resume_logging</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, log.o(.text.resume_logging))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = resume_logging &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log
</UL>

<P><STRONG><a name="[845]"></a>term_set_color</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, log_writer_stdout.o(.text.term_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = term_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_write
</UL>

<P><STRONG><a name="[846]"></a>term_restore_color</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log_writer_stdout.o(.text.term_restore_color))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_write
</UL>

<P><STRONG><a name="[5e6]"></a>init_mutex</STRONG> (Thumb, 450 bytes, Stack size 72 bytes, os_core_unix.o(.text.init_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = init_mutex &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutexattr_settype
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutexattr_init
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutexattr_destroy
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_init
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_mutex_destroy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_init
</UL>

<P><STRONG><a name="[7b9]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_shutdown
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
</UL>

<P><STRONG><a name="[8bc]"></a>pj_strlen</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, os_core_unix.o(.text.pj_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_register
</UL>

<P><STRONG><a name="[7b2]"></a>pj_pool_zalloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_core_unix.o(.text.pj_pool_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_pool_zalloc &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
</UL>

<P><STRONG><a name="[1ab]"></a>thread_main</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, os_core_unix.o(.text.thread_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = thread_main &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core_unix.o(.text.pj_thread_create)
</UL>
<P><STRONG><a name="[84c]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, os_error_unix.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_strerror
</UL>

<P><STRONG><a name="[7e1]"></a>ver_info</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_info.o(.text.ver_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ver_info &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_sys_info
</UL>

<P><STRONG><a name="[7e2]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, os_info.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_sys_info
</UL>

<P><STRONG><a name="[8c3]"></a>get_tz_offset_secs</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, os_time_common.o(.text.get_tz_offset_secs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_tz_offset_secs
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_local_to_gmt
</UL>

<P><STRONG><a name="[50e]"></a>get_elapsed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_timestamp_common.o(.text.get_elapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_elapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_msec
</UL>

<P><STRONG><a name="[50c]"></a>elapsed_msec</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, os_timestamp_common.o(.text.elapsed_msec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = elapsed_msec &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp_freq
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elapsed
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_time
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_msec
</UL>

<P><STRONG><a name="[7ea]"></a>pj_set_timestamp32</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, os_timestamp_common.o(.text.pj_set_timestamp32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pj_set_timestamp32
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
</UL>

<P><STRONG><a name="[857]"></a>pj_pool_create_block</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, pool.o(.text.pj_pool_create_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_allocate_find
</UL>

<P><STRONG><a name="[7ba]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pool.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
</UL>

<P><STRONG><a name="[858]"></a>pj_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, pool.o(.text.pj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
</UL>

<P><STRONG><a name="[85a]"></a>reset_pool</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pool.o(.text.reset_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reset_pool &rArr; pj_list_erase &rArr; pj_link_node
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_destroy_int
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
</UL>

<P><STRONG><a name="[859]"></a>pool_buf_initialize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pool_buf.o(.text.pool_buf_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pool_buf_initialize &rArr; pj_thread_local_alloc &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atexit
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_on_buf
</UL>

<P><STRONG><a name="[22c]"></a>pool_buf_cleanup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pool_buf.o(.text.pool_buf_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pool_buf_cleanup &rArr; pj_thread_local_free &rArr; pthread_key_delete &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_buf.o(.text.pool_buf_initialize)
</UL>
<P><STRONG><a name="[22d]"></a>stack_alloc</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pool_buf.o(.text.stack_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = stack_alloc &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_buf.o(.text.pool_buf_initialize)
</UL>
<P><STRONG><a name="[7bb]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pool_caching.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_init
</UL>

<P><STRONG><a name="[7c1]"></a>pj_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, pool_caching.o(.text.pj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_init
</UL>

<P><STRONG><a name="[7c2]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pool_caching.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_caching_pool_init
</UL>

<P><STRONG><a name="[17a]"></a>cpool_create_pool</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, pool_caching.o(.text.cpool_create_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = cpool_create_pool &rArr; pj_pool_create_int &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_capacity
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_empty
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_int
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_init_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_caching.o(.text.pj_caching_pool_init)
</UL>
<P><STRONG><a name="[17b]"></a>cpool_release_pool</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, pool_caching.o(.text.cpool_release_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = cpool_release_pool &rArr; pj_pool_destroy_int &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_capacity
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_destroy_int
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_caching.o(.text.pj_caching_pool_init)
</UL>
<P><STRONG><a name="[17c]"></a>cpool_dump_status</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, pool_caching.o(.text.cpool_dump_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = cpool_dump_status &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_capacity
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_get_used_size
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_getobjname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_caching.o(.text.pj_caching_pool_init)
</UL>
<P><STRONG><a name="[17d]"></a>cpool_on_block_alloc</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, pool_caching.o(.text.cpool_on_block_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpool_on_block_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_caching.o(.text.pj_caching_pool_init)
</UL>
<P><STRONG><a name="[17e]"></a>cpool_on_block_free</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, pool_caching.o(.text.cpool_on_block_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpool_on_block_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_caching.o(.text.pj_caching_pool_init)
</UL>
<P><STRONG><a name="[447]"></a>pj_list_empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pool_caching.o(.text.pj_list_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pj_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpool_create_pool
</UL>

<P><STRONG><a name="[88]"></a>default_block_alloc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, pool_policy_malloc.o(.text.default_block_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = default_block_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_policy_malloc.o(.data.pj_pool_factory_default_policy)
</UL>
<P><STRONG><a name="[89]"></a>default_block_free</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pool_policy_malloc.o(.text.default_block_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = default_block_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_policy_malloc.o(.data.pj_pool_factory_default_policy)
</UL>
<P><STRONG><a name="[8a]"></a>default_pool_callback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pool_policy_malloc.o(.text.default_pool_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = default_pool_callback &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pool_policy_malloc.o(.data.pj_pool_factory_default_policy)
</UL>
<P><STRONG><a name="[821]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sock_bsd.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_aton
</UL>

<P><STRONG><a name="[7bc]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sock_bsd.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_in
</UL>

<P><STRONG><a name="[7bd]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sock_common.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_init
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
</UL>

<P><STRONG><a name="[84d]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sock_common.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_str_addr
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_set_str_addr
</UL>

<P><STRONG><a name="[7e7]"></a>pj_memcmp</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sock_common.o(.text.pj_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pj_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
</UL>

<P><STRONG><a name="[830]"></a>pj_isdigit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sock_common.o(.text.pj_isdigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_isdigit
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse2
</UL>

<P><STRONG><a name="[884]"></a>pj_strchr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sock_common.o(.text.pj_strchr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pj_strchr
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse2
</UL>

<P><STRONG><a name="[84e]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sock_qos_common.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_qos_get_params
</UL>

<P><STRONG><a name="[84f]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, string.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
</UL>

<P><STRONG><a name="[84a]"></a>pj_memcmp</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, string.o(.text.pj_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pj_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
</UL>

<P><STRONG><a name="[832]"></a>pj_isspace</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, string.o(.text.pj_isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strrtrim
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strltrim
</UL>

<P><STRONG><a name="[7c6]"></a>pj_val_to_hex_digit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, string.o(.text.pj_val_to_hex_digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_val_to_hex_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
</UL>

<P><STRONG><a name="[831]"></a>pj_isdigit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, string.o(.text.pj_isdigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_isdigit
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
</UL>

<P><STRONG><a name="[833]"></a>pj_isxdigit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, string.o(.text.pj_isxdigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pj_isxdigit &rArr; __isxdigit_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isxdigit_helper
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul2
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul3
</UL>

<P><STRONG><a name="[896]"></a>pj_hex_digit_to_val</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, string.o(.text.pj_hex_digit_to_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pj_hex_digit_to_val
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul2
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul3
</UL>

<P><STRONG><a name="[834]"></a>__isxdigit_helper</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, string.o(.text.__isxdigit_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __isxdigit_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_isxdigit
</UL>

<P><STRONG><a name="[85b]"></a>pj_pool_zalloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timer.o(.text.pj_pool_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pj_pool_zalloc &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_create
</UL>

<P><STRONG><a name="[8c6]"></a>schedule_w_grp_lock_dbg</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, timer.o(.text.schedule_w_grp_lock_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_timer_heap
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_heap
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_dbg
</UL>

<P><STRONG><a name="[416]"></a>lock_timer_heap</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text.lock_timer_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lock_timer_heap &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
</UL>

<P><STRONG><a name="[418]"></a>unlock_timer_heap</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text.unlock_timer_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = unlock_timer_heap &rArr; pj_lock_release &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_dump
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
</UL>

<P><STRONG><a name="[aee]"></a>schedule_entry</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timer.o(.text.schedule_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_freelist
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_w_grp_lock_dbg
</UL>

<P><STRONG><a name="[415]"></a>cancel_timer</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, timer.o(.text.cancel_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_timer_heap
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
</UL>

<P><STRONG><a name="[413]"></a>cancel</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, timer.o(.text.cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = cancel &rArr; remove_node &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_timer
</UL>

<P><STRONG><a name="[414]"></a>remove_node</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, timer.o(.text.remove_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = remove_node &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reheap_up
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reheap_down
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_node
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_freelist
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_poll
</UL>

<P><STRONG><a name="[aeb]"></a>push_freelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(.text.push_freelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = push_freelist
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
</UL>

<P><STRONG><a name="[aea]"></a>copy_node</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, timer.o(.text.copy_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copy_node
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reheap_up
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reheap_down
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
</UL>

<P><STRONG><a name="[ae9]"></a>reheap_down</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, timer.o(.text.reheap_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = reheap_down &rArr; copy_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_node
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
</UL>

<P><STRONG><a name="[604]"></a>reheap_up</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, timer.o(.text.reheap_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = reheap_up &rArr; copy_node
</UL>
<BR>[Calls]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_node
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_node
</UL>

<P><STRONG><a name="[aef]"></a>pop_freelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(.text.pop_freelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pop_freelist
</UL>
<BR>[Called By]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry
</UL>

<P><STRONG><a name="[601]"></a>insert_node</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, timer.o(.text.insert_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reheap_up
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_memcpy
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_bzero
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grow_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry
</UL>

<P><STRONG><a name="[59c]"></a>grow_heap</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, timer.o(.text.grow_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
</UL>

<P><STRONG><a name="[602]"></a>pj_bzero</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timer.o(.text.pj_bzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pj_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
</UL>

<P><STRONG><a name="[603]"></a>pj_memcpy</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, timer.o(.text.pj_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pj_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_node
</UL>

<P><STRONG><a name="[590]"></a>get_name_len</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, dns.o(.text.get_name_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = get_name_len &rArr;  get_name_len (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_len
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_len
</UL>

<P><STRONG><a name="[79c]"></a>parse_rr</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, dns.o(.text.parse_rr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = parse_rr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name_len
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
</UL>

<P><STRONG><a name="[58f]"></a>get_name</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, dns.o(.text.get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_name &rArr; pj_htons
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rr
</UL>

<P><STRONG><a name="[446]"></a>copy_rr</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, dns.o(.text.copy_rr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = copy_rr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
</UL>

<P><STRONG><a name="[848]"></a>MD5Transform</STRONG> (Thumb, 1844 bytes, Stack size 116 bytes, md5_1.o(.text.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_final
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_md5_update
</UL>

<P><STRONG><a name="[17f]"></a>dns_resolver_on_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, resolver.o(.text.dns_resolver_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dns_resolver_on_destroy &rArr; pj_pool_safe_release &rArr; pj_pool_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resolver.o(.text.pj_dns_resolver_create)
</UL>
<P><STRONG><a name="[180]"></a>on_read_complete</STRONG> (Thumb, 1004 bytes, Stack size 328 bytes, resolver.o(.text.on_read_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5216<LI>Call Chain = on_read_complete &rArr; update_res_cache &rArr; pj_dns_packet_dup &rArr; copy_rr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create_on_buf
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nameserver_state
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_res_cache
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_packet
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resolver.o(.text.pj_dns_resolver_create)
</UL>
<P><STRONG><a name="[764]"></a>transmit_query</STRONG> (Thumb, 1604 bytes, Stack size 264 bytes, resolver.o(.text.transmit_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_is_pending
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_make_query
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_get_type_name
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
</UL>

<P><STRONG><a name="[24c]"></a>on_timeout</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, resolver.o(.text.on_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 5128<LI>Call Chain = on_timeout &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resolver.o(.text.transmit_query)
</UL>
<P><STRONG><a name="[74c]"></a>update_res_cache</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, resolver.o(.text.update_res_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = update_res_cache &rArr; pj_dns_packet_dup &rArr; copy_rr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_packet_dup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
</UL>

<P><STRONG><a name="[74b]"></a>set_nameserver_state</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, resolver.o(.text.set_nameserver_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = set_nameserver_state &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read_complete
</UL>

<P><STRONG><a name="[870]"></a>SHA1_Transform</STRONG> (Thumb, 4118 bytes, Stack size 192 bytes, sha1_1.o(.text.SHA1_Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SHA1_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_final
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sha1_update
</UL>

<P><STRONG><a name="[149]"></a>dns_callback</STRONG> (Thumb, 3760 bytes, Stack size 2696 bytes, srv_resolver.o(.text.dns_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 7976<LI>Call Chain = dns_callback &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_addr_response
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_cancel_query
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_resolver_start_query
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_get_type_name
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> srv_resolver.o(.text.pj_dns_srv_resolve)
<LI> srv_resolver.o(.text.dns_callback)
</UL>
<P><STRONG><a name="[1bc]"></a>on_syntax_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xml.o(.text.on_syntax_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = on_syntax_error &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xml.o(.text.pj_xml_parse)
</UL>
<P><STRONG><a name="[8dd]"></a>xml_parse_node</STRONG> (Thumb, 652 bytes, Stack size 56 bytes, xml.o(.text.xml_parse_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664 + In Cycle
<LI>Call Chain = xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_strcmp
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_chr
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quotes
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_advance_n
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_node
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_parse
</UL>

<P><STRONG><a name="[8e0]"></a>xml_print_node</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, xml.o(.text.xml_print_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = xml_print_node &rArr;  xml_print_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_print_node
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_print
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_print_node
</UL>

<P><STRONG><a name="[6c0]"></a>lookup_dev</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, audiodev.o(.text.lookup_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lookup_dev &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_create
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_default_param
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_get_info
</UL>

<P><STRONG><a name="[1c0]"></a>clock_thread</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, clock_thread.o(.text.clock_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = clock_thread &rArr; pj_thread_get_prio_max &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_msec
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_get_prio_max
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_set_prio
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock_thread.o(.text.pjmedia_clock_start)
</UL>
<P><STRONG><a name="[1c1]"></a>get_frame</STRONG> (Thumb, 4912 bytes, Stack size 152 bytes, conference.o(.text.get_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = get_frame &rArr; pjmedia_delay_buf_get &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_put_frame
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_get_frame
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_get
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conference.o(.text.pjmedia_conf_create)
</UL>
<P><STRONG><a name="[1c2]"></a>put_frame</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, conference.o(.text.put_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = put_frame &rArr; pjmedia_delay_buf_put &rArr; update &rArr; shrink_buffer &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conference.o(.text.pjmedia_conf_create)
</UL>
<P><STRONG><a name="[1c3]"></a>destroy_port</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, conference.o(.text.destroy_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = destroy_port &rArr; pjmedia_conf_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conference.o(.text.pjmedia_conf_create)
</UL>
<P><STRONG><a name="[455]"></a>create_conf_port</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, conference.o(.text.create_conf_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = create_conf_port &rArr; pjmedia_resample_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_format_get_audio_format_detail
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_add_port
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_create
</UL>

<P><STRONG><a name="[90d]"></a>update</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, delaybuf.o(.text.update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = update &rArr; shrink_buffer &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shrink_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
</UL>

<P><STRONG><a name="[90f]"></a>shrink_buffer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, delaybuf.o(.text.shrink_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = shrink_buffer &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_discard
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_delay_buf_put
</UL>

<P><STRONG><a name="[1c5]"></a>worker_proc</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, endpoint.o(.text.worker_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5416<LI>Call Chain = worker_proc &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> endpoint.o(.text.pjmedia_endpt_create2)
</UL>
<P><STRONG><a name="[1c6]"></a>event_worker_thread</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, event.o(.text.event_worker_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4552<LI>Call Chain = event_worker_thread &rArr; event_mgr_distribute_events &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sem_wait
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_mgr_distribute_events
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event.o(.text.pjmedia_event_mgr_create)
</UL>
<P><STRONG><a name="[540]"></a>event_mgr_distribute_events</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, event.o(.text.event_mgr_distribute_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = event_mgr_distribute_events &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_worker_thread
</UL>

<P><STRONG><a name="[4e]"></a>g711_test_alloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, g711.o(.text.g711_test_alloc))
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_factory_op)
</UL>
<P><STRONG><a name="[4f]"></a>g711_default_attr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, g711.o(.text.g711_default_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = g711_default_attr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_factory_op)
</UL>
<P><STRONG><a name="[50]"></a>g711_enum_codecs</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, g711.o(.text.g711_enum_codecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = g711_enum_codecs &rArr; pj_str
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_factory_op)
</UL>
<P><STRONG><a name="[51]"></a>g711_alloc_codec</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, g711.o(.text.g711_alloc_codec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = g711_alloc_codec &rArr; pjmedia_silence_det_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_create
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_factory_op)
</UL>
<P><STRONG><a name="[52]"></a>g711_dealloc_codec</STRONG> (Thumb, 136 bytes, Stack size 184 bytes, g711.o(.text.g711_dealloc_codec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = g711_dealloc_codec &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_save
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_factory_op)
</UL>
<P><STRONG><a name="[54]"></a>g711_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, g711.o(.text.g711_init))
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[55]"></a>g711_open</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, g711.o(.text.g711_open))
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[56]"></a>g711_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, g711.o(.text.g711_close))
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[57]"></a>g711_modify</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, g711.o(.text.g711_modify))
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[58]"></a>g711_parse</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, g711.o(.text.g711_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = g711_parse &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[59]"></a>g711_encode</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, g711.o(.text.g711_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4540<LI>Call Chain = g711_encode &rArr; pjmedia_silence_det_detect &rArr; pjmedia_silence_det_apply &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_silence_det_detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[5a]"></a>g711_decode</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, g711.o(.text.g711_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = g711_decode &rArr; pjmedia_plc_save &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[5b]"></a>g711_recover</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, g711.o(.text.g711_recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = g711_recover &rArr; pjmedia_plc_generate &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_plc_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> g711.o(.data.g711_op)
</UL>
<P><STRONG><a name="[1cb]"></a>jbuf_discard_progressive</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, jbuf.o(.text.jbuf_discard_progressive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = jbuf_discard_progressive &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jbuf.o(.text.pjmedia_jbuf_create)
<LI> jbuf.o(.text.pjmedia_jbuf_set_discard)
</UL>
<P><STRONG><a name="[1cc]"></a>jbuf_discard_static</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, jbuf.o(.text.jbuf_discard_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = jbuf_discard_static &rArr; jb_framelist_remove_head &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jb_framelist_remove_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jbuf.o(.text.pjmedia_jbuf_set_discard)
</UL>
<P><STRONG><a name="[6a5]"></a>jb_framelist_remove_head</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, jbuf.o(.text.jb_framelist_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = jb_framelist_remove_head &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame3
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame3
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jbuf_discard_static
</UL>

<P><STRONG><a name="[6a4]"></a>jb_framelist_put_at</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, jbuf.o(.text.jb_framelist_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = jb_framelist_put_at &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame3
</UL>

<P><STRONG><a name="[1cd]"></a>clock_callback</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, master_port.o(.text.clock_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = clock_callback &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_put_frame
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_get_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master_port.o(.text.pjmedia_master_port_create)
</UL>
<P><STRONG><a name="[1ce]"></a>null_get_frame</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, null_port.o(.text.null_get_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = null_get_frame &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> null_port.o(.text.pjmedia_null_port_create)
</UL>
<P><STRONG><a name="[1cf]"></a>null_put_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, null_port.o(.text.null_put_frame))
<BR>[Address Reference Count : 1]<UL><LI> null_port.o(.text.pjmedia_null_port_create)
</UL>
<P><STRONG><a name="[1d0]"></a>null_on_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, null_port.o(.text.null_on_destroy))
<BR>[Address Reference Count : 1]<UL><LI> null_port.o(.text.pjmedia_null_port_create)
</UL>
<P><STRONG><a name="[8f]"></a>plc_wsola_create</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, plc_common.o(.text.plc_wsola_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = plc_wsola_create &rArr; pjmedia_wsola_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> plc_common.o(.data.plc_wsola)
</UL>
<P><STRONG><a name="[90]"></a>plc_wsola_save</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, plc_common.o(.text.plc_wsola_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = plc_wsola_save &rArr; pjmedia_wsola_save &rArr; wsola_fade_out
</UL>
<BR>[Calls]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> plc_common.o(.data.plc_wsola)
</UL>
<P><STRONG><a name="[91]"></a>plc_wsola_generate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, plc_common.o(.text.plc_wsola_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = plc_wsola_generate &rArr; pjmedia_wsola_generate &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> plc_common.o(.data.plc_wsola)
</UL>
<P><STRONG><a name="[1d1]"></a>resample_get_frame</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, resample_port.o(.text.resample_get_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = resample_get_frame &rArr; pjmedia_resample_run &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_get_frame
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resample_port.o(.text.pjmedia_resample_port_create)
</UL>
<P><STRONG><a name="[1d2]"></a>resample_put_frame</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, resample_port.o(.text.resample_put_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = resample_put_frame &rArr; pjmedia_resample_run &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_put_frame
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_run
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resample_port.o(.text.pjmedia_resample_port_create)
</UL>
<P><STRONG><a name="[1d3]"></a>resample_destroy</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, resample_port.o(.text.resample_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = resample_destroy &rArr; pjmedia_port_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_destroy
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resample_port.o(.text.pjmedia_resample_port_create)
</UL>
<P><STRONG><a name="[3bd]"></a>add_sdp_attr_rtcp_fb</STRONG> (Thumb, 168 bytes, Stack size 184 bytes, rtcp_fb.o(.text.add_sdp_attr_rtcp_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = add_sdp_attr_rtcp_fb &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
</UL>

<P><STRONG><a name="[57b]"></a>get_codec_info_from_sdp</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, rtcp_fb.o(.text.get_codec_info_from_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_get_type
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_get_codec_mgr
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_codec_info
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_info_to_id
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_decode_sdp2
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_encode_sdp
</UL>

<P><STRONG><a name="[5f4]"></a>init_sdp_parser</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdp.o(.text.init_sdp_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_leave_critical_section
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_enter_critical_section
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_num
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_alpha
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_add_str
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_cis_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_parse
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_ssrc
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
</UL>

<P><STRONG><a name="[1d4]"></a>on_scanner_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdp.o(.text.on_scanner_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = on_scanner_error &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sdp.o(.text.pjmedia_sdp_attr_get_rtpmap)
<LI> sdp.o(.text.pjmedia_sdp_attr_get_rtcp)
<LI> sdp.o(.text.pjmedia_sdp_attr_get_ssrc)
<LI> sdp.o(.text.pjmedia_sdp_parse)
</UL>
<P><STRONG><a name="[954]"></a>print_media_desc</STRONG> (Thumb, 578 bytes, Stack size 64 bytes, sdp.o(.text.print_media_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = print_media_desc &rArr; pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_print
</UL>

<P><STRONG><a name="[94d]"></a>sdp_media_clone_deactivate</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sdp_neg.o(.text.sdp_media_clone_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = sdp_media_clone_deactivate &rArr; pjmedia_sdp_media_clone_deactivate &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_clone_deactivate
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_conn_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
</UL>

<P><STRONG><a name="[94f]"></a>update_media_direction</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, sdp_neg.o(.text.update_media_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = update_media_direction &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_all_attr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_add_attr
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
</UL>

<P><STRONG><a name="[1d5]"></a>rec_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sound_port.o(.text.rec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = rec_cb &rArr; pjmedia_echo_capture &rArr; pjmedia_delay_buf_get &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_put_frame
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_capture
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound_port.o(.text.pjmedia_snd_port_create2)
</UL>
<P><STRONG><a name="[1d6]"></a>rec_cb_ext</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sound_port.o(.text.rec_cb_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rec_cb_ext &rArr; pjmedia_port_put_frame &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_put_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound_port.o(.text.pjmedia_snd_port_create2)
</UL>
<P><STRONG><a name="[1d7]"></a>play_cb</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, sound_port.o(.text.play_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = play_cb &rArr; pjmedia_echo_playback &rArr; pjmedia_delay_buf_get &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_get_frame
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_echo_playback
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_clock_src_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound_port.o(.text.pjmedia_snd_port_create2)
</UL>
<P><STRONG><a name="[1d8]"></a>play_cb_ext</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sound_port.o(.text.play_cb_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = play_cb_ext &rArr; pjmedia_port_get_frame &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_port_get_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound_port.o(.text.pjmedia_snd_port_create2)
</UL>
<P><STRONG><a name="[1d9]"></a>get_frame_ext</STRONG> (Thumb, 904 bytes, Stack size 128 bytes, stream.o(.text.get_frame_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = get_frame_ext &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_state
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.pjmedia_stream_create)
</UL>
<P><STRONG><a name="[1da]"></a>get_frame</STRONG> (Thumb, 1348 bytes, Stack size 168 bytes, stream.o(.text.get_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = get_frame &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_state
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_get_frame2
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_reset
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.pjmedia_stream_create)
</UL>
<P><STRONG><a name="[1db]"></a>put_frame</STRONG> (Thumb, 480 bytes, Stack size 96 bytes, stream.o(.text.put_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = put_frame &rArr; put_frame_imp &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.pjmedia_stream_create)
</UL>
<P><STRONG><a name="[453]"></a>create_channel</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, stream.o(.text.create_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = create_channel &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_init2
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[1dc]"></a>stream_event_cb</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stream.o(.text.stream_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4560<LI>Call Chain = stream_event_cb &rArr; pjmedia_event_publish &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.text.pjmedia_stream_destroy)
<LI> stream.o(.text.pjmedia_stream_create)
</UL>
<P><STRONG><a name="[1dd]"></a>on_rx_rtp</STRONG> (Thumb, 1948 bytes, Stack size 632 bytes, stream.o(.text.on_rx_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5488<LI>Call Chain = on_rx_rtp &rArr; check_tx_rtcp &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_session_update2
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_decode_rtp
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtp2
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_put_frame2
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_set_ptime
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_jbuf_reset
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tx_rtcp
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_CCNT
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_SPF
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_dtmf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtcp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.pjmedia_stream_create)
</UL>
<P><STRONG><a name="[1de]"></a>on_rx_rtcp</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, stream.o(.text.on_rx_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = on_rx_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_rx_rtcp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_publish
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.text.pjmedia_stream_create)
</UL>
<P><STRONG><a name="[95f]"></a>pjmedia_transport_attach2</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stream.o(.text.pjmedia_transport_attach2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pjmedia_transport_attach2
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_create
</UL>

<P><STRONG><a name="[ae2]"></a>put_frame_imp</STRONG> (Thumb, 884 bytes, Stack size 128 bytes, stream.o(.text.put_frame_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = put_frame_imp &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtp_encode_rtp
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_tx_rtp
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dtmf_payload
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame
</UL>

<P><STRONG><a name="[422]"></a>send_rtcp</STRONG> (Thumb, 336 bytes, Stack size 104 bytes, stream.o(.text.send_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_fb_build_nack
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_bye
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp_sdes
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_rtcp_build_rtcp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tx_rtcp
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_bye
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_send_rtcp_sdes
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
</UL>

<P><STRONG><a name="[5b0]"></a>handle_incoming_dtmf</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, stream.o(.text.handle_incoming_dtmf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = handle_incoming_dtmf &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[359]"></a>PJMEDIA_PIA_SPF</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stream.o(.text.PJMEDIA_PIA_SPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = PJMEDIA_PIA_SPF &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[357]"></a>PJMEDIA_PIA_CCNT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stream.o(.text.PJMEDIA_PIA_CCNT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PJMEDIA_PIA_CCNT &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[421]"></a>check_tx_rtcp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stream.o(.text.check_tx_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = check_tx_rtcp &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rtcp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rx_rtp
</UL>

<P><STRONG><a name="[460]"></a>create_dtmf_payload</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stream.o(.text.create_dtmf_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = create_dtmf_payload &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_frame_imp
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_destroy
</UL>

<P><STRONG><a name="[56c]"></a>get_audio_codec_info_param</STRONG> (Thumb, 1448 bytes, Stack size 128 bytes, stream_info.o(.text.get_audio_codec_info_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = get_audio_codec_info_param &rArr; pjmedia_sdp_neg_fmt_match &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strltrim
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_to_rtpmap
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_default_param
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_find_codecs_by_id
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_mgr_get_codec_info
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_codec_info_to_id
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_parse_fmtp
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_fmt_match
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_stream_info_from_sdp
</UL>

<P><STRONG><a name="[1c7]"></a>ice_on_ice_complete</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, transport_ice.o(.text.ice_on_ice_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = ice_on_ice_complete &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.text.pjmedia_ice_create3)
</UL>
<P><STRONG><a name="[1c8]"></a>ice_on_rx_data</STRONG> (Thumb, 580 bytes, Stack size 88 bytes, transport_ice.o(.text.ice_on_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = ice_on_rx_data &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.text.pjmedia_ice_create3)
</UL>
<P><STRONG><a name="[1c9]"></a>ice_on_new_candidate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, transport_ice.o(.text.ice_on_new_candidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ice_on_new_candidate &rArr; pj_ice_strans_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.text.pjmedia_ice_create3)
</UL>
<P><STRONG><a name="[1ca]"></a>tp_ice_on_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, transport_ice.o(.text.tp_ice_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tp_ice_on_destroy &rArr; pj_pool_safe_release &rArr; pj_pool_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.text.pjmedia_ice_create3)
</UL>
<P><STRONG><a name="[782]"></a>parse_cand</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, transport_ice.o(.text.parse_cand))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = parse_cand &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
</UL>

<P><STRONG><a name="[584]"></a>get_ice_attr</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, transport_ice.o(.text.get_ice_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = get_ice_attr &rArr; pjmedia_sdp_attr_find &rArr; pj_strtoul2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
</UL>

<P><STRONG><a name="[519]"></a>print_sdp_cand_attr</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, transport_ice.o(.text.print_sdp_cand_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = print_sdp_cand_attr &rArr; pj_sockaddr_print &rArr; pj_inet_ntop &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_get_cand_type_name
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
</UL>

<P><STRONG><a name="[9e]"></a>transport_get_info</STRONG> (Thumb, 668 bytes, Stack size 1048 bytes, transport_ice.o(.text.transport_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = transport_get_info &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_valid_pair
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_state
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_role
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_def_cand
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_enum_cands
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_ufrag_pwd
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[9f]"></a>transport_attach</STRONG> (Thumb, 184 bytes, Stack size 120 bytes, transport_ice.o(.text.transport_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = transport_attach &rArr; pj_sockaddr_cmp &rArr; pj_sockaddr_get_port &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a0]"></a>transport_detach</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, transport_ice.o(.text.transport_detach))
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a1]"></a>transport_send_rtp</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, transport_ice.o(.text.transport_send_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = transport_send_rtp &rArr; pj_ice_strans_sendto2 &rArr; send_data &rArr; pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sendto2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a2]"></a>transport_send_rtcp</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, transport_ice.o(.text.transport_send_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = transport_send_rtcp &rArr; pj_ice_strans_sendto2 &rArr; send_data &rArr; pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sendto2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a3]"></a>transport_send_rtcp2</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, transport_ice.o(.text.transport_send_rtcp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 5352<LI>Call Chain = transport_send_rtcp2 &rArr; pj_ice_strans_sendto2 &rArr; send_data &rArr; pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sendto2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a4]"></a>transport_media_create</STRONG> (Thumb, 340 bytes, Stack size 960 bytes, transport_ice.o(.text.transport_media_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 6408<LI>Call Chain = transport_media_create &rArr; pj_ice_strans_update_check_list &rArr; setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup3
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_comp_cnt
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a5]"></a>transport_encode_sdp</STRONG> (Thumb, 900 bytes, Stack size 56 bytes, transport_ice.o(.text.transport_encode_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5896<LI>Call Chain = transport_encode_sdp &rArr; encode_session_in_sdp &rArr; pjmedia_ice_trickle_encode_sdp &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_cands_count
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_running_comp_cnt
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_no_ice_in_sdp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_session_in_sdp
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[b3f]"></a>verify_ice_sdp</STRONG> (Thumb, 1104 bytes, Stack size 256 bytes, transport_ice.o(.text.verify_ice_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = verify_ice_sdp &rArr; pjmedia_sdp_attr_get_rtcp &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtcp
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_role_name
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sess_is_complete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_ufrag_pwd
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sess_is_running
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
</UL>

<P><STRONG><a name="[514]"></a>encode_session_in_sdp</STRONG> (Thumb, 1468 bytes, Stack size 1000 bytes, transport_ice.o(.text.encode_session_in_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 5840<LI>Call Chain = encode_session_in_sdp &rArr; pjmedia_ice_trickle_encode_sdp &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_random_string
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sess_is_complete
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_valid_pair
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_state
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_role
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_enum_cands
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_encode_sdp
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_ufrag_pwd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_sdp_cand_attr
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
</UL>

<P><STRONG><a name="[50f]"></a>encode_no_ice_in_sdp</STRONG> (Thumb, 174 bytes, Stack size 144 bytes, transport_ice.o(.text.encode_no_ice_in_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = encode_no_ice_in_sdp &rArr; pjmedia_sdp_attr_create_rtcp &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_def_cand
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_encode_sdp
</UL>

<P><STRONG><a name="[a6]"></a>transport_media_start</STRONG> (Thumb, 1072 bytes, Stack size 80 bytes, transport_ice.o(.text.transport_media_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 5568<LI>Call Chain = transport_media_start &rArr; pj_ice_strans_start_ice &rArr; pj_ice_strans_update_check_list &rArr; setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sess_is_complete
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_set_options
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_options
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_change_role
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_init_ice
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_has_sess
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sess_is_running
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_ice
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_ice_sdp
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ice_attr
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[afa]"></a>set_no_ice</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, transport_ice.o(.text.set_no_ice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = set_no_ice &rArr; pj_ice_strans_stop_ice &rArr; pj_ice_sess_destroy &rArr; destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_media_start
</UL>

<P><STRONG><a name="[a7]"></a>transport_media_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, transport_ice.o(.text.transport_media_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = transport_media_stop &rArr; pj_ice_strans_stop_ice &rArr; pj_ice_sess_destroy &rArr; destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_stop_ice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a8]"></a>transport_simulate_lost</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, transport_ice.o(.text.transport_simulate_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = transport_simulate_lost &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[a9]"></a>transport_destroy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, transport_ice.o(.text.transport_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5136<LI>Call Chain = transport_destroy &rArr; pj_ice_strans_destroy &rArr; destroy_ice_st &rArr; pj_turn_sock_destroy &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_destroy
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_get_grp_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[aa]"></a>transport_attach2</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, transport_ice.o(.text.transport_attach2))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = transport_attach2 &rArr; pj_sockaddr_cmp &rArr; pj_sockaddr_get_port &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_ice.o(.data.transport_ice_op)
</UL>
<P><STRONG><a name="[ab]"></a>transport_get_info</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, transport_loop.o(.text.transport_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = transport_get_info &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[ac]"></a>transport_attach</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, transport_loop.o(.text.transport_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = transport_attach &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[ad]"></a>transport_detach</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, transport_loop.o(.text.transport_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = transport_detach &rArr; pj_array_erase &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[ae]"></a>transport_send_rtp</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, transport_loop.o(.text.transport_send_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = transport_send_rtp &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[af]"></a>transport_send_rtcp</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, transport_loop.o(.text.transport_send_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transport_send_rtcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b0]"></a>transport_send_rtcp2</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, transport_loop.o(.text.transport_send_rtcp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transport_send_rtcp2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b1]"></a>transport_media_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport_loop.o(.text.transport_media_create))
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b2]"></a>transport_encode_sdp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport_loop.o(.text.transport_encode_sdp))
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b3]"></a>transport_media_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport_loop.o(.text.transport_media_start))
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b4]"></a>transport_media_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport_loop.o(.text.transport_media_stop))
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b5]"></a>transport_simulate_lost</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, transport_loop.o(.text.transport_simulate_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = transport_simulate_lost &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b6]"></a>transport_destroy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, transport_loop.o(.text.transport_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = transport_destroy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b7]"></a>transport_attach2</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, transport_loop.o(.text.transport_attach2))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = transport_attach2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_loop.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[1df]"></a>on_rx_rtp</STRONG> (Thumb, 612 bytes, Stack size 128 bytes, transport_udp.o(.text.on_rx_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = on_rx_rtp &rArr; pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.text.pjmedia_transport_udp_attach)
</UL>
<P><STRONG><a name="[1e0]"></a>on_rtp_data_sent</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, transport_udp.o(.text.on_rtp_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = on_rtp_data_sent &rArr; pj_ioqueue_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.text.pjmedia_transport_udp_attach)
</UL>
<P><STRONG><a name="[1e1]"></a>on_rx_rtcp</STRONG> (Thumb, 392 bytes, Stack size 120 bytes, transport_udp.o(.text.on_rx_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = on_rx_rtcp &rArr; pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.text.pjmedia_transport_udp_attach)
</UL>
<P><STRONG><a name="[c3]"></a>transport_destroy</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, transport_udp.o(.text.transport_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = transport_destroy &rArr; pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_transport_udp_attach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b8]"></a>transport_get_info</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, transport_udp.o(.text.transport_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = transport_get_info &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b9]"></a>transport_attach</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, transport_udp.o(.text.transport_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = transport_attach &rArr; tp_attach &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[b3c]"></a>tp_attach</STRONG> (Thumb, 436 bytes, Stack size 128 bytes, transport_udp.o(.text.tp_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = tp_attach &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>

<P><STRONG><a name="[ba]"></a>transport_detach</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, transport_udp.o(.text.transport_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = transport_detach &rArr; pj_ioqueue_clear_key &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unlock_key
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_lock_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[bb]"></a>transport_send_rtp</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, transport_udp.o(.text.transport_send_rtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = transport_send_rtp &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[bc]"></a>transport_send_rtcp</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, transport_udp.o(.text.transport_send_rtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = transport_send_rtcp &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[bd]"></a>transport_send_rtcp2</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, transport_udp.o(.text.transport_send_rtcp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = transport_send_rtcp2 &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[be]"></a>transport_media_create</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, transport_udp.o(.text.transport_media_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = transport_media_create &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[bf]"></a>transport_encode_sdp</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, transport_udp.o(.text.transport_encode_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = transport_encode_sdp &rArr; pjmedia_sdp_attr_create_rtcp &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_deactivate
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create_rtcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[c0]"></a>transport_media_start</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, transport_udp.o(.text.transport_media_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = transport_media_start &rArr; pj_perror_3 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[c1]"></a>transport_media_stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, transport_udp.o(.text.transport_media_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = transport_media_stop &rArr; pj_ioqueue_clear_key &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_clear_key
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[c2]"></a>transport_simulate_lost</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, transport_udp.o(.text.transport_simulate_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = transport_simulate_lost &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[c4]"></a>transport_attach2</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, transport_udp.o(.text.transport_attach2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = transport_attach2 &rArr; tp_attach &rArr; pj_perror &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_udp.o(.data.transport_udp_op)
</UL>
<P><STRONG><a name="[96e]"></a>wsola_fade_out</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, wsola.o(.text.wsola_fade_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wsola_fade_out
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_save
</UL>

<P><STRONG><a name="[442]"></a>find_pitch</STRONG> (Thumb, 970 bytes, Stack size 108 bytes, wsola.o(.text.find_pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = find_pitch
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_generate
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
</UL>

<P><STRONG><a name="[440]"></a>compress</STRONG> (Thumb, 786 bytes, Stack size 72 bytes, wsola.o(.text.compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = compress &rArr; find_pitch
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pitch
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_wsola_discard
</UL>

<P><STRONG><a name="[3b]"></a>esp32_factory_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm_dev.o(.text.esp32_factory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = esp32_factory_init &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[3c]"></a>esp32_factory_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm_dev.o(.text.esp32_factory_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = esp32_factory_destroy &rArr; pj_pool_safe_release &rArr; pj_pool_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[3d]"></a>esp32_factory_get_dev_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm_dev.o(.text.esp32_factory_get_dev_count))
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[3e]"></a>esp32_factory_get_dev_info</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm_dev.o(.text.esp32_factory_get_dev_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = esp32_factory_get_dev_info &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[3f]"></a>esp32_factory_default_param</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, stm_dev.o(.text.esp32_factory_default_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = esp32_factory_default_param &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[40]"></a>esp32_factory_create_stream</STRONG> (Thumb, 1420 bytes, Stack size 56 bytes, stm_dev.o(.text.esp32_factory_create_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = esp32_factory_create_stream &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Config_FullDuplex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[41]"></a>esp32_factory_refresh</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm_dev.o(.text.esp32_factory_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = esp32_factory_refresh &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_factory_op)
</UL>
<P><STRONG><a name="[44]"></a>esp32_stream_set_cap</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm_dev.o(.text.esp32_stream_set_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = esp32_stream_set_cap &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_stream_op)
</UL>
<P><STRONG><a name="[42]"></a>esp32_stream_get_param</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm_dev.o(.text.esp32_stream_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = esp32_stream_get_param &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_stream_op)
</UL>
<P><STRONG><a name="[43]"></a>esp32_stream_get_cap</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm_dev.o(.text.esp32_stream_get_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = esp32_stream_get_cap &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_stream_op)
</UL>
<P><STRONG><a name="[45]"></a>esp32_stream_start</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm_dev.o(.text.esp32_stream_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = esp32_stream_start &rArr; pj_thread_create &rArr; pj_mutex_create_simple &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_stream_op)
</UL>
<P><STRONG><a name="[14a]"></a>pb_thread_func</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, stm_dev.o(.text.pb_thread_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = pb_thread_func &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioWriteData
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.text.esp32_stream_start)
</UL>
<P><STRONG><a name="[14b]"></a>ca_thread_func</STRONG> (Thumb, 544 bytes, Stack size 88 bytes, stm_dev.o(.text.ca_thread_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = ca_thread_func &rArr; pj_log_3 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioReadData
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_exit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.text.esp32_stream_start)
</UL>
<P><STRONG><a name="[46]"></a>esp32_stream_stop</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm_dev.o(.text.esp32_stream_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4520<LI>Call Chain = esp32_stream_stop &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_join
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_stream_op)
</UL>
<P><STRONG><a name="[47]"></a>esp32_stream_destroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm_dev.o(.text.esp32_stream_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = esp32_stream_destroy &rArr; esp32_stream_stop &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_StreamStop
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp32_stream_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm_dev.o(.data.esp_stream_op)
</UL>
<P><STRONG><a name="[1e2]"></a>pjnath_strerror</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, errno_4.o(.text.pjnath_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pjnath_strerror &rArr; pj_strncpy_with_null &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy_with_null
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> errno_4.o(.text.pjnath_init)
</UL>
<P><STRONG><a name="[1e3]"></a>pjnath_strerror2</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, errno_4.o(.text.pjnath_strerror2))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjnath_strerror2 &rArr; pj_strncpy &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_err_reason
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> errno_4.o(.text.pjnath_init)
</UL>
<P><STRONG><a name="[185]"></a>on_timer</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, ice_session.o(.text.on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = on_timer &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_use_fingerprint
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[186]"></a>ice_on_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ice_session.o(.text.ice_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = ice_on_destroy &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
<LI> ice_session.o(.text.pj_ice_sess_detach_grp_lock)
</UL>
<P><STRONG><a name="[187]"></a>on_stun_request_complete</STRONG> (Thumb, 1564 bytes, Stack size 256 bytes, ice_session.o(.text.on_stun_request_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5400<LI>Call Chain = on_stun_request_complete &rArr; perform_check &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_comp_check
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_check
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_checklist
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[188]"></a>on_stun_rx_indication</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ice_session.o(.text.on_stun_rx_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = on_stun_rx_indication &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_method_name
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[189]"></a>on_stun_rx_request</STRONG> (Thumb, 952 bytes, Stack size 168 bytes, ice_session.o(.text.on_stun_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5488<LI>Call Chain = on_stun_rx_request &rArr; handle_incoming_check &rArr; perform_check &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_res
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_respond
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_change_role
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[18a]"></a>on_stun_send_msg</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ice_session.o(.text.on_stun_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = on_stun_send_msg &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[18b]"></a>stun_auth_get_auth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ice_session.o(.text.stun_auth_get_auth))
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[18c]"></a>stun_auth_get_cred</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ice_session.o(.text.stun_auth_get_cred))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = stun_auth_get_cred &rArr; pj_stun_session_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[18d]"></a>stun_auth_get_password</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ice_session.o(.text.stun_auth_get_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = stun_auth_get_password &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create)
</UL>
<P><STRONG><a name="[4a9]"></a>destroy_ice</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ice_session.o(.text.destroy_ice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = destroy_ice &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create
</UL>

<P><STRONG><a name="[41c]"></a>start_nominated_check</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, ice_session.o(.text.start_nominated_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = start_nominated_check &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
</UL>

<P><STRONG><a name="[41b]"></a>on_ice_complete</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ice_session.o(.text.on_ice_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = on_ice_complete &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_checklist
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
</UL>

<P><STRONG><a name="[18e]"></a>periodic_timer</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, ice_session.o(.text.periodic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 5200<LI>Call Chain = periodic_timer &rArr; perform_check &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_create_check_list)
</UL>
<P><STRONG><a name="[3af]"></a>add_rcand_and_update_checklist</STRONG> (Thumb, 3768 bytes, Stack size 280 bytes, ice_session.o(.text.add_rcand_and_update_checklist))
<BR><BR>[Stack]<UL><LI>Max Depth = 5192<LI>Call Chain = add_rcand_and_update_checklist &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_checklist
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
</UL>

<P><STRONG><a name="[507]"></a>dump_checklist</STRONG> (Thumb, 244 bytes, Stack size 160 bytes, ice_session.o(.text.dump_checklist))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = dump_checklist &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_create_check_list
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
</UL>

<P><STRONG><a name="[5ad]"></a>perform_check</STRONG> (Thumb, 500 bytes, Stack size 184 bytes, ice_session.o(.text.perform_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 5144<LI>Call Chain = perform_check &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint64_attr
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_empty_attr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_perror
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[3b6]"></a>check_set_state</STRONG> (Thumb, 212 bytes, Stack size 168 bytes, ice_session.o(.text.check_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = check_set_state &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[5af]"></a>on_check_complete</STRONG> (Thumb, 668 bytes, Stack size 160 bytes, ice_session.o(.text.on_check_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = on_check_complete &rArr; pj_stun_session_cancel_req &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_cancel_req
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_set_state
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_timer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[3b7]"></a>sort_checklist</STRONG> (Thumb, 1392 bytes, Stack size 120 bytes, ice_session.o(.text.sort_checklist))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sort_checklist &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_check
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[3b9]"></a>check_ice_complete</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, ice_session.o(.text.check_ice_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = check_ice_complete &rArr; on_ice_complete &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ice_complete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nominated_check
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_of_cand_ind_timer
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_rcand_and_update_checklist
</UL>

<P><STRONG><a name="[5ac]"></a>handle_incoming_check</STRONG> (Thumb, 1320 bytes, Stack size 176 bytes, ice_session.o(.text.handle_incoming_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 5320<LI>Call Chain = handle_incoming_check &rArr; perform_check &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_retransmit_req
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_checklist
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_check_complete
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_check
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_start_check
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_rx_request
</UL>

<P><STRONG><a name="[18f]"></a>end_of_cand_ind_timer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ice_session.o(.text.end_of_cand_ind_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = end_of_cand_ind_timer &rArr; check_ice_complete &rArr; on_ice_complete &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ice_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_session.o(.text.pj_ice_sess_start_check)
</UL>
<P><STRONG><a name="[506]"></a>dump_check</STRONG> (Thumb, 140 bytes, Stack size 144 bytes, ice_session.o(.text.dump_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = dump_check &rArr; pj_sockaddr_print &rArr; pj_inet_ntop &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[75f]"></a>update_comp_check</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ice_session.o(.text.update_comp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_comp_check
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_stun_request_complete
</UL>

<P><STRONG><a name="[3c9]"></a>alloc_send_buf</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ice_strans.o(.text.alloc_send_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = alloc_send_buf &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ice_tx_pkt
</UL>

<P><STRONG><a name="[4aa]"></a>destroy_ice_st</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ice_strans.o(.text.destroy_ice_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 5112<LI>Call Chain = destroy_ice_st &rArr; pj_turn_sock_destroy &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_destroy
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
</UL>

<P><STRONG><a name="[190]"></a>ice_st_on_destroy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ice_strans.o(.text.ice_st_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = ice_st_on_destroy &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_create)
</UL>
<P><STRONG><a name="[191]"></a>stun_on_rx_data</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ice_strans.o(.text.stun_on_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 5336<LI>Call Chain = stun_on_rx_data &rArr; pj_ice_sess_on_rx_pkt &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_user_data
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_perror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_create)
</UL>
<P><STRONG><a name="[192]"></a>stun_on_status</STRONG> (Thumb, 1216 bytes, Stack size 464 bytes, ice_strans.o(.text.stun_on_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 5736<LI>Call Chain = stun_on_status &rArr; sess_init_update &rArr; pj_ice_sess_update_check_list &rArr; add_rcand_and_update_checklist &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr_len
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_user_data
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_create)
</UL>
<P><STRONG><a name="[193]"></a>stun_on_data_sent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ice_strans.o(.text.stun_on_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = stun_on_data_sent &rArr; check_pending_send &rArr;  send_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_user_data
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pending_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_create)
</UL>
<P><STRONG><a name="[3c3]"></a>add_update_turn</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, ice_strans.o(.text.add_update_turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 5584<LI>Call Chain = add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_alloc
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[80e]"></a>sess_init_update</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, ice_strans.o(.text.sess_init_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = sess_init_update &rArr; pj_ice_sess_update_check_list &rArr; add_rcand_and_update_checklist &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_get_cand_type_name
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_update_check_list
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_status
</UL>

<P><STRONG><a name="[194]"></a>on_valid_pair</STRONG> (Thumb, 424 bytes, Stack size 176 bytes, ice_strans.o(.text.on_valid_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 5184<LI>Call Chain = on_valid_pair &rArr; pj_turn_sock_bind_channel &rArr; pj_turn_session_bind_channel &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_get_cand_type_name
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_bind_channel
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_init_ice)
</UL>
<P><STRONG><a name="[195]"></a>on_ice_complete</STRONG> (Thumb, 488 bytes, Stack size 176 bytes, ice_strans.o(.text.on_ice_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5184<LI>Call Chain = on_ice_complete &rArr; pj_turn_sock_bind_channel &rArr; pj_turn_session_bind_channel &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_get_cand_type_name
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_bind_channel
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_init_ice)
</UL>
<P><STRONG><a name="[196]"></a>ice_rx_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ice_strans.o(.text.ice_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ice_rx_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_init_ice)
</UL>
<P><STRONG><a name="[197]"></a>ice_tx_pkt</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, ice_strans.o(.text.ice_tx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = ice_tx_pkt &rArr; pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_sendto
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_sendto
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.pj_ice_strans_init_ice)
</UL>
<P><STRONG><a name="[819]"></a>setup_turn_perm</STRONG> (Thumb, 346 bytes, Stack size 384 bytes, ice_strans.o(.text.setup_turn_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 5408<LI>Call Chain = setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_perm
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_info
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_detach_grp_lock
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_start_ice
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_update_check_list
</UL>

<P><STRONG><a name="[420]"></a>send_data</STRONG> (Thumb, 808 bytes, Stack size 56 bytes, ice_strans.o(.text.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = send_data &rArr; pj_turn_sock_sendto &rArr; pj_turn_session_sendto &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_sendto
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_sendto
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_log
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pending_send
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_send_buf
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_send_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_strans_sendto2
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pending_send
</UL>

<P><STRONG><a name="[41d]"></a>check_pending_send</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ice_strans.o(.text.check_pending_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680 + In Cycle
<LI>Call Chain = check_pending_send &rArr;  send_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_data_sent
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_data_sent
</UL>

<P><STRONG><a name="[13f]"></a>turn_on_rx_data</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ice_strans.o(.text.turn_on_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 5328<LI>Call Chain = turn_on_rx_data &rArr; pj_ice_sess_on_rx_pkt &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_user_data
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_on_rx_pkt
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjnath_perror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.add_update_turn)
</UL>
<P><STRONG><a name="[140]"></a>turn_on_data_sent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ice_strans.o(.text.turn_on_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = turn_on_data_sent &rArr; check_pending_send &rArr;  send_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_user_data
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pending_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.add_update_turn)
</UL>
<P><STRONG><a name="[141]"></a>turn_on_state</STRONG> (Thumb, 1240 bytes, Stack size 464 bytes, ice_strans.o(.text.turn_on_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 6048<LI>Call Chain = turn_on_state &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_user_data
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_state_name
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_user_data
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_set_perm
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_get_info
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_fail
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_init_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_update_turn
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_sess_add_cand
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ice_calc_foundation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ice_strans.o(.text.add_update_turn)
</UL>
<P><STRONG><a name="[af9]"></a>sess_fail</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ice_strans.o(.text.sess_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = sess_fail &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[19c]"></a>sess_on_destroy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nat_detect.o(.text.sess_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sess_on_destroy &rArr; pj_pool_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nat_detect.o(.text.pj_stun_detect_nat_type2)
</UL>
<P><STRONG><a name="[19d]"></a>on_sess_timer</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, nat_detect.o(.text.on_sess_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 5104<LI>Call Chain = on_sess_timer &rArr; send_test &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_dbg
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nat_detect.o(.text.pj_stun_detect_nat_type2)
</UL>
<P><STRONG><a name="[585]"></a>get_local_interface</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, nat_detect.o(.text.get_local_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = get_local_interface &rArr; pj_sockaddr_init &rArr; pj_sockaddr_set_str_addr &rArr; pj_sockaddr_in_set_str_addr &rArr; pj_getaddrinfo &rArr; pj_gethostbyname &rArr; gethostbyname &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferSetLength &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_connect
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
</UL>

<P><STRONG><a name="[19e]"></a>on_read_complete</STRONG> (Thumb, 440 bytes, Stack size 144 bytes, nat_detect.o(.text.on_read_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5368<LI>Call Chain = on_read_complete &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_dbg
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nat_detect.o(.text.pj_stun_detect_nat_type2)
</UL>
<P><STRONG><a name="[19f]"></a>on_request_complete</STRONG> (Thumb, 920 bytes, Stack size 144 bytes, nat_detect.o(.text.on_request_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5216<LI>Call Chain = on_request_complete &rArr; send_test &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_dbg
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_session
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nat_detect.o(.text.pj_stun_detect_nat_type2)
</UL>
<P><STRONG><a name="[1a0]"></a>on_send_msg</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, nat_detect.o(.text.on_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = on_send_msg &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nat_detect.o(.text.pj_stun_detect_nat_type2)
</UL>
<P><STRONG><a name="[74e]"></a>send_test</STRONG> (Thumb, 264 bytes, Stack size 112 bytes, nat_detect.o(.text.send_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = send_test &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_synthesize
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sess_timer
</UL>

<P><STRONG><a name="[522]"></a>end_session</STRONG> (Thumb, 122 bytes, Stack size 136 bytes, nat_detect.o(.text.end_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = end_session &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_request_complete
</UL>

<P><STRONG><a name="[28f]"></a>encode_binary_attr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stun_msg.o(.text.encode_binary_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_binary_attr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[285]"></a>encode_msgint_attr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stun_msg.o(.text.encode_msgint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_msgint_attr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[27a]"></a>encode_uint_attr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stun_msg.o(.text.encode_uint_attr))
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[290]"></a>clone_binary_attr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stun_msg.o(.text.clone_binary_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = clone_binary_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[291]"></a>decode_empty_attr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stun_msg.o(.text.decode_empty_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = decode_empty_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[276]"></a>decode_sockaddr_attr</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stun_msg.o(.text.decode_sockaddr_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = decode_sockaddr_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_xored_sockaddr_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[277]"></a>encode_sockaddr_attr</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stun_msg.o(.text.encode_sockaddr_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_sockaddr_attr &rArr; pj_htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[278]"></a>clone_sockaddr_attr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stun_msg.o(.text.clone_sockaddr_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = clone_sockaddr_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[279]"></a>decode_uint_attr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stun_msg.o(.text.decode_uint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = decode_uint_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[27b]"></a>clone_uint_attr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stun_msg.o(.text.clone_uint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = clone_uint_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[273]"></a>decode_string_attr</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, stun_msg.o(.text.decode_string_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = decode_string_attr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[274]"></a>encode_string_attr</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stun_msg.o(.text.encode_string_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_string_attr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[275]"></a>clone_string_attr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stun_msg.o(.text.clone_string_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = clone_string_attr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[284]"></a>decode_msgint_attr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stun_msg.o(.text.decode_msgint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = decode_msgint_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[286]"></a>clone_msgint_attr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stun_msg.o(.text.clone_msgint_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = clone_msgint_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[287]"></a>decode_errcode_attr</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stun_msg.o(.text.decode_errcode_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = decode_errcode_attr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[288]"></a>encode_errcode_attr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stun_msg.o(.text.encode_errcode_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = encode_errcode_attr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[289]"></a>clone_errcode_attr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stun_msg.o(.text.clone_errcode_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = clone_errcode_attr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[28a]"></a>decode_unknown_attr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stun_msg.o(.text.decode_unknown_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = decode_unknown_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[28b]"></a>encode_unknown_attr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stun_msg.o(.text.encode_unknown_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_unknown_attr &rArr; pj_htons
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[28c]"></a>clone_unknown_attr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stun_msg.o(.text.clone_unknown_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = clone_unknown_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[28d]"></a>decode_xored_sockaddr_attr</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stun_msg.o(.text.decode_xored_sockaddr_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = decode_xored_sockaddr_attr &rArr; decode_sockaddr_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htonl
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_htons
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_sockaddr_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[28e]"></a>decode_binary_attr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stun_msg.o(.text.decode_binary_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = decode_binary_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[292]"></a>encode_empty_attr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stun_msg.o(.text.encode_empty_attr))
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[293]"></a>clone_empty_attr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stun_msg.o(.text.clone_empty_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = clone_empty_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
</UL>
<P><STRONG><a name="[27c]"></a>decode_uint64_attr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stun_msg.o(.text.decode_uint64_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = decode_uint64_attr &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[27d]"></a>encode_uint64_attr</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stun_msg.o(.text.encode_uint64_attr))
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[27e]"></a>clone_uint64_attr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stun_msg.o(.text.clone_uint64_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4592<LI>Call Chain = clone_uint64_attr &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stun_msg.o(.rodata.mandatory_attr_desc)
<LI> stun_msg.o(.rodata.extended_attr_desc)
</UL>
<P><STRONG><a name="[4b0]"></a>destroy_tdata</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stun_session.o(.text.destroy_tdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_schedule_destroy
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_set_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_destroy_tdata
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_tsx_on_complete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cache_timeout
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_sess_on_destroy
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_cancel_req
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[1a1]"></a>stun_sess_on_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stun_session.o(.text.stun_sess_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = stun_sess_on_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_session.o(.text.pj_stun_session_create)
</UL>
<P><STRONG><a name="[579]"></a>get_auth</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, stun_session.o(.text.get_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = get_auth &rArr; pj_stun_create_key &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_create_key
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
</UL>

<P><STRONG><a name="[3d0]"></a>apply_msg_options</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, stun_session.o(.text.apply_msg_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = apply_msg_options &rArr; pj_stun_msg_add_string_attr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_msgint_attr
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_auth_valid_for_msg
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_string_attr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[508]"></a>dump_tx_msg</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, stun_session.o(.text.dump_tx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = dump_tx_msg &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>

<P><STRONG><a name="[1a2]"></a>tdata_on_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stun_session.o(.text.tdata_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = tdata_on_destroy &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_session.o(.text.pj_stun_session_send_msg)
</UL>
<P><STRONG><a name="[1a3]"></a>on_cache_timeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stun_session.o(.text.on_cache_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = on_cache_timeout &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_session.o(.text.pj_stun_session_send_msg)
</UL>
<P><STRONG><a name="[c5]"></a>stun_tsx_on_complete</STRONG> (Thumb, 528 bytes, Stack size 56 bytes, stun_session.o(.text.stun_tsx_on_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = stun_tsx_on_complete &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_get_data
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_attr_clone
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_session.o(.data.tsx_cb)
</UL>
<P><STRONG><a name="[c6]"></a>stun_tsx_on_send_msg</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stun_session.o(.text.stun_tsx_on_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = stun_tsx_on_send_msg &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_session.o(.data.tsx_cb)
</UL>
<P><STRONG><a name="[c7]"></a>stun_tsx_on_destroy</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stun_session.o(.text.stun_tsx_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = stun_tsx_on_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_destroy
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_get_data
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_stop
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_tdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_session.o(.data.tsx_cb)
</UL>
<P><STRONG><a name="[1a4]"></a>stun_sock_destructor</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stun_sock.o(.text.stun_sock_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = stun_sock_destructor &rArr; pj_dns_srv_cancel_query &rArr; pj_dns_resolver_cancel_query &rArr; pj_timer_heap_cancel_if_active &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_srv_cancel_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_create)
</UL>
<P><STRONG><a name="[1a5]"></a>on_data_recvfrom</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, stun_sock.o(.text.on_data_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 5272<LI>Call Chain = on_data_recvfrom &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_on_rx_pkt
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_check
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_create)
</UL>
<P><STRONG><a name="[1a6]"></a>on_data_sent</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stun_sock.o(.text.on_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = on_data_sent &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_create)
</UL>
<P><STRONG><a name="[1a7]"></a>sess_on_request_complete</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, stun_sock.o(.text.sess_on_request_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = sess_on_request_complete &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_create)
</UL>
<P><STRONG><a name="[1a8]"></a>sess_on_send_msg</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, stun_sock.o(.text.sess_on_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = sess_on_send_msg &rArr; pj_activesock_sendto &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_sendto
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_create)
</UL>
<P><STRONG><a name="[1a9]"></a>ka_timer_cb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stun_sock.o(.text.ka_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = ka_timer_cb &rArr; get_mapped_addr &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_create)
</UL>
<P><STRONG><a name="[501]"></a>get_mapped_addr</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stun_sock.o(.text.get_mapped_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = get_mapped_addr &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_timer_cb
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
</UL>

<P><STRONG><a name="[1aa]"></a>dns_srv_resolver_cb</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, stun_sock.o(.text.dns_srv_resolver_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = dns_srv_resolver_cb &rArr; get_mapped_addr &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_sock.o(.text.pj_stun_sock_start)
</UL>
<P><STRONG><a name="[19a]"></a>retransmit_timer_callback</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stun_transaction.o(.text.retransmit_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = retransmit_timer_callback &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_transmit_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stun_transaction.o(.text.pj_stun_client_tsx_create)
</UL>
<P><STRONG><a name="[19b]"></a>destroy_timer_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stun_transaction.o(.text.destroy_timer_callback))
<BR>[Address Reference Count : 1]<UL><LI> stun_transaction.o(.text.pj_stun_client_tsx_create)
</UL>
<P><STRONG><a name="[8a0]"></a>tsx_transmit_msg</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, stun_transaction.o(.text.tsx_transmit_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_callback
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_retransmit
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_client_tsx_send_msg
</UL>

<P><STRONG><a name="[1ac]"></a>turn_sess_on_destroy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, turn_session.o(.text.turn_sess_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = turn_sess_on_destroy &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_session.o(.text.pj_turn_session_create)
</UL>
<P><STRONG><a name="[1ad]"></a>on_timer_event</STRONG> (Thumb, 664 bytes, Stack size 80 bytes, turn_session.o(.text.on_timer_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = on_timer_event &rArr; pj_turn_session_bind_channel &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_this
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_next
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_first
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_destroy
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_destroy_tdata
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_binary_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_sockaddr_attr
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_session.o(.text.pj_turn_session_create)
</UL>
<P><STRONG><a name="[1ae]"></a>stun_on_send_msg</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, turn_session.o(.text.stun_on_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = stun_on_send_msg &rArr; pj_stun_session_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_session.o(.text.pj_turn_session_create)
</UL>
<P><STRONG><a name="[1af]"></a>stun_on_request_complete</STRONG> (Thumb, 1240 bytes, Stack size 224 bytes, turn_session.o(.text.stun_on_request_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5456<LI>Call Chain = stun_on_request_complete &rArr; on_allocate_success &rArr; on_session_fail &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_this
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_next
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_first
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_method_name
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_session.o(.text.pj_turn_session_create)
</UL>
<P><STRONG><a name="[1b0]"></a>stun_on_rx_indication</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, turn_session.o(.text.stun_on_rx_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = stun_on_rx_indication &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_method_name
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_get_user_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_session.o(.text.pj_turn_session_create)
</UL>
<P><STRONG><a name="[505]"></a>do_destroy</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, turn_session.o(.text.do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = do_destroy &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_create
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
</UL>

<P><STRONG><a name="[768]"></a>send_refresh</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, turn_session.o(.text.send_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008 + In Cycle
<LI>Call Chain = send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_add_uint_attr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_create_req
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_session_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer_event
</UL>

<P><STRONG><a name="[502]"></a>sess_shutdown</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, turn_session.o(.text.sess_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 5048<LI>Call Chain = sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_refresh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
</UL>

<P><STRONG><a name="[71f]"></a>on_allocate_success</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, turn_session.o(.text.on_allocate_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232<LI>Call Chain = on_allocate_success &rArr; on_session_fail &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_msg_find_attr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
</UL>

<P><STRONG><a name="[6be]"></a>lookup_ch_by_addr</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, turn_session.o(.text.lookup_ch_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = lookup_ch_by_addr &rArr; lookup_perm &rArr; pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_perm
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_bind_channel
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
</UL>

<P><STRONG><a name="[504]"></a>on_session_fail</STRONG> (Thumb, 376 bytes, Stack size 136 bytes, turn_session.o(.text.on_session_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 5184<LI>Call Chain = on_session_fail &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_method_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_srv_resolver_cb
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_allocate_success
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_on_request_complete
</UL>

<P><STRONG><a name="[1b1]"></a>dns_srv_resolver_cb</STRONG> (Thumb, 570 bytes, Stack size 48 bytes, turn_session.o(.text.dns_srv_resolver_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232<LI>Call Chain = dns_srv_resolver_cb &rArr; on_session_fail &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_session_fail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sess_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_session.o(.text.pj_turn_session_set_server)
</UL>
<P><STRONG><a name="[6bf]"></a>lookup_perm</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, turn_session.o(.text.lookup_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = lookup_perm &rArr; pj_hash_set &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_perm
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_ch_by_addr
</UL>

<P><STRONG><a name="[1b2]"></a>turn_sock_on_destroy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, turn_sock.o(.text.turn_sock_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = turn_sock_on_destroy &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b3]"></a>timer_cb</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, turn_sock.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = timer_cb &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b4]"></a>turn_on_send_pkt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, turn_sock.o(.text.turn_on_send_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = turn_on_send_pkt &rArr; send_pkt &rArr; pj_activesock_send &rArr; send_remaining &rArr; pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b5]"></a>turn_on_stun_send_pkt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, turn_sock.o(.text.turn_on_stun_send_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = turn_on_stun_send_pkt &rArr; send_pkt &rArr; pj_activesock_send &rArr; send_remaining &rArr; pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b6]"></a>turn_on_channel_bound</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, turn_sock.o(.text.turn_on_channel_bound))
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b7]"></a>turn_on_rx_data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, turn_sock.o(.text.turn_on_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = turn_on_rx_data
</UL>
<BR>[Calls]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b8]"></a>turn_on_state</STRONG> (Thumb, 960 bytes, Stack size 280 bytes, turn_sock.o(.text.turn_on_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 5360<LI>Call Chain = turn_on_state &rArr; pj_turn_sock_destroy &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_connect
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_user_data
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_set_user_data
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1b9]"></a>turn_on_connect_complete</STRONG> (Thumb, 1184 bytes, Stack size 288 bytes, turn_sock.o(.text.turn_on_connect_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5320<LI>Call Chain = turn_on_connect_complete &rArr; dataconn_on_connect_complete &rArr; pj_turn_session_connection_bind &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_connect
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_user_data
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1ba]"></a>turn_on_connection_attempt</STRONG> (Thumb, 1164 bytes, Stack size 296 bytes, turn_sock.o(.text.turn_on_connection_attempt))
<BR><BR>[Stack]<UL><LI>Max Depth = 5328<LI>Call Chain = turn_on_connection_attempt &rArr; dataconn_on_connect_complete &rArr; pj_turn_session_connection_bind &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_create
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_connect
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_sobuf
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind_random
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_user_data
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_cleanup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataconn_on_connect_complete
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[1bb]"></a>turn_on_connection_bind_status</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, turn_sock.o(.text.turn_on_connection_bind_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = turn_on_connection_bind_status &rArr; pj_activesock_close &rArr; pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_user_data
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.pj_turn_sock_create)
</UL>
<P><STRONG><a name="[4a6]"></a>destroy</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, turn_sock.o(.text.destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_shutdown
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_create
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_sock_destroy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[af6]"></a>send_pkt</STRONG> (Thumb, 484 bytes, Stack size 152 bytes, turn_sock.o(.text.send_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = send_pkt &rArr; pj_activesock_send &rArr; send_remaining &rArr; pj_ioqueue_send &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_sendto
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_user_data
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_stun_send_pkt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_send_pkt
</UL>

<P><STRONG><a name="[72c]"></a>on_connect_complete</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, turn_sock.o(.text.on_connect_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = on_connect_complete &rArr; pj_turn_session_destroy &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_alloc
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete_asock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_state
</UL>

<P><STRONG><a name="[262]"></a>on_data_read_asock</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, turn_sock.o(.text.on_data_read_asock))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = on_data_read_asock &rArr; pj_turn_session_on_rx_pkt &rArr; pj_turn_session_on_rx_pkt2 &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ntohs
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_destroy
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.turn_on_state)
</UL>
<P><STRONG><a name="[263]"></a>on_data_sent_asock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, turn_sock.o(.text.on_data_sent_asock))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = on_data_sent_asock &rArr; pj_activesock_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.turn_on_state)
</UL>
<P><STRONG><a name="[264]"></a>on_connect_complete_asock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, turn_sock.o(.text.on_connect_complete_asock))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = on_connect_complete_asock &rArr; on_connect_complete &rArr; pj_turn_session_destroy &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> turn_sock.o(.text.turn_on_state)
</UL>
<P><STRONG><a name="[25f]"></a>dataconn_on_data_read</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, turn_sock.o(.text.dataconn_on_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = dataconn_on_data_read &rArr; pj_turn_session_on_rx_pkt2 &rArr; pj_stun_session_on_rx_pkt &rArr; pj_stun_authenticate_request &rArr; pj_stun_msg_create_response &rArr; pj_stun_errcode_attr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_on_rx_pkt2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> turn_sock.o(.text.turn_on_connect_complete)
<LI> turn_sock.o(.text.turn_on_connection_attempt)
</UL>
<P><STRONG><a name="[260]"></a>dataconn_on_data_sent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, turn_sock.o(.text.dataconn_on_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dataconn_on_data_sent &rArr; pj_activesock_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> turn_sock.o(.text.turn_on_connect_complete)
<LI> turn_sock.o(.text.turn_on_connection_attempt)
</UL>
<P><STRONG><a name="[261]"></a>dataconn_on_connect_complete</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, turn_sock.o(.text.dataconn_on_connect_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = dataconn_on_connect_complete &rArr; pj_turn_session_connection_bind &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_turn_session_connection_bind
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connect_complete
</UL>
<BR>[Address Reference Count : 2]<UL><LI> turn_sock.o(.text.turn_on_connect_complete)
<LI> turn_sock.o(.text.turn_on_connection_attempt)
</UL>
<P><STRONG><a name="[48d]"></a>dataconn_cleanup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, turn_sock.o(.text.dataconn_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = dataconn_cleanup &rArr; pj_activesock_close &rArr; pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_connection_attempt
</UL>

<P><STRONG><a name="[98d]"></a>digestNtoStr</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, sip_auth_client.o(.text.digestNtoStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = digestNtoStr
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_create_digest
</UL>

<P><STRONG><a name="[29]"></a>pjsip_authorization_hdr_clone</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, sip_auth_msg.o(.text.pjsip_authorization_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_authorization_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_msg.o(.data.authorization_hdr_vptr)
</UL>
<P><STRONG><a name="[2a]"></a>pjsip_authorization_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_auth_msg.o(.text.pjsip_authorization_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_authorization_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_msg.o(.data.authorization_hdr_vptr)
</UL>
<P><STRONG><a name="[2b]"></a>pjsip_authorization_hdr_print</STRONG> (Thumb, 1830 bytes, Stack size 48 bytes, sip_auth_msg.o(.text.pjsip_authorization_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pjsip_authorization_hdr_print &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_msg.o(.data.authorization_hdr_vptr)
</UL>
<P><STRONG><a name="[cb]"></a>pjsip_www_authenticate_hdr_clone</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_www_authenticate_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_msg.o(.data.www_authenticate_hdr_vptr)
</UL>
<P><STRONG><a name="[cc]"></a>pjsip_www_authenticate_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_www_authenticate_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_msg.o(.data.www_authenticate_hdr_vptr)
</UL>
<P><STRONG><a name="[cd]"></a>pjsip_www_authenticate_hdr_print</STRONG> (Thumb, 850 bytes, Stack size 48 bytes, sip_auth_msg.o(.text.pjsip_www_authenticate_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pjsip_www_authenticate_hdr_print &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_msg.o(.data.www_authenticate_hdr_vptr)
</UL>
<P><STRONG><a name="[1e5]"></a>parse_hdr_authorization</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sip_auth_parser.o(.text.parse_hdr_authorization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = parse_hdr_authorization &rArr; int_parse_hdr_authorization &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_authorization_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_parser.o(.text.pjsip_auth_init_parser)
</UL>
<P><STRONG><a name="[1e6]"></a>parse_hdr_proxy_authorization</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sip_auth_parser.o(.text.parse_hdr_proxy_authorization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = parse_hdr_proxy_authorization &rArr; int_parse_hdr_authorization &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authorization
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_proxy_authorization_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_parser.o(.text.pjsip_auth_init_parser)
</UL>
<P><STRONG><a name="[1e7]"></a>parse_hdr_www_authenticate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sip_auth_parser.o(.text.parse_hdr_www_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = parse_hdr_www_authenticate &rArr; int_parse_hdr_authenticate &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_www_authenticate_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_parser.o(.text.pjsip_auth_init_parser)
</UL>
<P><STRONG><a name="[1e8]"></a>parse_hdr_proxy_authenticate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sip_auth_parser.o(.text.parse_hdr_proxy_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = parse_hdr_proxy_authenticate &rArr; int_parse_hdr_authenticate &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_hdr_authenticate
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_proxy_authenticate_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_auth_parser.o(.text.pjsip_auth_init_parser)
</UL>
<P><STRONG><a name="[60c]"></a>int_parse_hdr_authorization</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, sip_auth_parser.o(.text.int_parse_hdr_authorization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = int_parse_hdr_authorization &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_proxy_authorization
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_authorization
</UL>

<P><STRONG><a name="[605]"></a>int_parse_hdr_authenticate</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, sip_auth_parser.o(.text.int_parse_hdr_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = int_parse_hdr_authenticate &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_proxy_authenticate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_www_authenticate
</UL>

<P><STRONG><a name="[458]"></a>create_dialog</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, sip_dialog.o(.text.create_dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = create_dialog &rArr; pj_grp_lock_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_get_endpt
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_fork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_uas_dialog
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac2
</UL>

<P><STRONG><a name="[145]"></a>dlg_on_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sip_dialog.o(.text.dlg_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = dlg_on_destroy &rArr; pjsip_endpt_release_pool &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_dialog.o(.text.create_dialog)
</UL>
<P><STRONG><a name="[994]"></a>unregister_and_destroy_dialog</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sip_dialog.o(.text.unregister_and_destroy_dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_unregister_dlg
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>

<P><STRONG><a name="[1e9]"></a>send_ack_callback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sip_dialog.o(.text.send_ack_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = send_ack_callback &rArr; pjsip_tx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_dialog.o(.text.pjsip_dlg_send_request)
</UL>
<P><STRONG><a name="[4d9]"></a>dlg_beautify_response</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, sip_dialog.o(.text.dlg_beautify_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dlg_beautify_response &rArr; pjsip_msg_find_hdr_by_name &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
</UL>

<P><STRONG><a name="[4e5]"></a>dlg_update_routeset</STRONG> (Thumb, 380 bytes, Stack size 104 bytes, sip_dialog.o(.text.dlg_update_routeset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = dlg_update_routeset &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_routing_hdr_set_route
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
</UL>

<P><STRONG><a name="[1ee]"></a>cmp_mod_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_endpoint.o(.text.cmp_mod_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cmp_mod_name &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_endpoint.o(.text.pjsip_endpt_register_module)
</UL>
<P><STRONG><a name="[1eb]"></a>pool_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sip_endpoint.o(.text.pool_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = pool_callback &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_NO_MEMORY_EXCEPTION
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sip_endpoint.o(.text.pjsip_endpt_create)
<LI> sip_endpoint.o(.text.pjsip_endpt_create_pool)
</UL>
<P><STRONG><a name="[1ec]"></a>endpt_on_rx_msg</STRONG> (Thumb, 364 bytes, Stack size 168 bytes, sip_endpoint.o(.text.endpt_on_rx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = endpt_on_rx_msg &rArr; pjsip_endpt_process_rx_data &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_process_rx_data
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_endpoint.o(.text.pjsip_endpt_create)
</UL>
<P><STRONG><a name="[1ed]"></a>endpt_on_tx_msg</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sip_endpoint.o(.text.endpt_on_tx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = endpt_on_tx_msg &rArr; pj_rwmutex_unlock_read &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_unlock_read
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rwmutex_lock_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_endpoint.o(.text.pjsip_endpt_create)
</UL>
<P><STRONG><a name="[5f]"></a>pjsip_generic_string_hdr_clone</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, sip_msg.o(.text.pjsip_generic_string_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = pjsip_generic_string_hdr_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_hdr_vptr)
</UL>
<P><STRONG><a name="[60]"></a>pjsip_generic_string_hdr_shallow_clone</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_string_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_generic_string_hdr_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_hdr_vptr)
</UL>
<P><STRONG><a name="[61]"></a>pjsip_generic_string_hdr_print</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_string_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pjsip_generic_string_hdr_print &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_hdr_vptr)
</UL>
<P><STRONG><a name="[62]"></a>pjsip_generic_int_hdr_clone</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_int_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_generic_int_hdr_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_int_hdr_vptr)
</UL>
<P><STRONG><a name="[63]"></a>pjsip_generic_int_hdr_shallow_clone</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_int_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_generic_int_hdr_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_int_hdr_vptr)
</UL>
<P><STRONG><a name="[64]"></a>pjsip_generic_int_hdr_print</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_int_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pjsip_generic_int_hdr_print &rArr; pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_int_hdr_vptr)
</UL>
<P><STRONG><a name="[5c]"></a>pjsip_generic_array_hdr_clone</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sip_msg.o(.text.pjsip_generic_array_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = pjsip_generic_array_hdr_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_array_hdr_vptr)
</UL>
<P><STRONG><a name="[5d]"></a>pjsip_generic_array_hdr_shallow_clone</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_generic_array_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_generic_array_hdr_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_array_hdr_vptr)
</UL>
<P><STRONG><a name="[5e]"></a>pjsip_generic_array_hdr_print</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sip_msg.o(.text.pjsip_generic_array_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pjsip_generic_array_hdr_print &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.generic_array_hdr_vptr)
</UL>
<P><STRONG><a name="[2c]"></a>pjsip_clen_hdr_clone</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_clen_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_clen_hdr_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.clen_hdr_vptr)
</UL>
<P><STRONG><a name="[2d]"></a>pjsip_clen_hdr_print</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_clen_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pjsip_clen_hdr_print &rArr; pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.clen_hdr_vptr)
</UL>
<P><STRONG><a name="[31]"></a>pjsip_cseq_hdr_clone</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_cseq_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjsip_cseq_hdr_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.cseq_hdr_vptr)
</UL>
<P><STRONG><a name="[32]"></a>pjsip_cseq_hdr_shallow_clone</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_cseq_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsip_cseq_hdr_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.cseq_hdr_vptr)
</UL>
<P><STRONG><a name="[33]"></a>pjsip_cseq_hdr_print</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_cseq_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pjsip_cseq_hdr_print &rArr; pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.cseq_hdr_vptr)
</UL>
<P><STRONG><a name="[2e]"></a>pjsip_contact_hdr_clone</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_contact_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_contact_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.contact_hdr_vptr)
</UL>
<P><STRONG><a name="[2f]"></a>pjsip_contact_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_contact_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_contact_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.contact_hdr_vptr)
</UL>
<P><STRONG><a name="[30]"></a>pjsip_contact_hdr_print</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, sip_msg.o(.text.pjsip_contact_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pjsip_contact_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.contact_hdr_vptr)
</UL>
<P><STRONG><a name="[34]"></a>pjsip_ctype_hdr_clone</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_ctype_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_ctype_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.ctype_hdr_vptr)
</UL>
<P><STRONG><a name="[35]"></a>pjsip_ctype_hdr_print</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, sip_msg.o(.text.pjsip_ctype_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pjsip_ctype_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.ctype_hdr_vptr)
</UL>
<P><STRONG><a name="[4b]"></a>pjsip_fromto_hdr_clone</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_fromto_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_fromto_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.fromto_hdr_vptr)
</UL>
<P><STRONG><a name="[4c]"></a>pjsip_fromto_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_fromto_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_fromto_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.fromto_hdr_vptr)
</UL>
<P><STRONG><a name="[4d]"></a>pjsip_fromto_hdr_print</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, sip_msg.o(.text.pjsip_fromto_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pjsip_fromto_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy2_escape
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.fromto_hdr_vptr)
</UL>
<P><STRONG><a name="[98]"></a>pjsip_routing_hdr_clone</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_routing_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_routing_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_assign
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.routing_hdr_vptr)
</UL>
<P><STRONG><a name="[99]"></a>pjsip_routing_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_routing_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_routing_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.routing_hdr_vptr)
</UL>
<P><STRONG><a name="[9a]"></a>pjsip_routing_hdr_print</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, sip_msg.o(.text.pjsip_routing_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pjsip_routing_hdr_print &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.routing_hdr_vptr)
</UL>
<P><STRONG><a name="[95]"></a>pjsip_retry_after_hdr_clone</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_retry_after_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_retry_after_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.retry_after_hdr_vptr)
</UL>
<P><STRONG><a name="[96]"></a>pjsip_retry_after_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_retry_after_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_retry_after_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.retry_after_hdr_vptr)
</UL>
<P><STRONG><a name="[97]"></a>pjsip_retry_after_hdr_print</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sip_msg.o(.text.pjsip_retry_after_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pjsip_retry_after_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.retry_after_hdr_vptr)
</UL>
<P><STRONG><a name="[c8]"></a>pjsip_via_hdr_clone</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sip_msg.o(.text.pjsip_via_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_via_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.via_hdr_vptr)
</UL>
<P><STRONG><a name="[c9]"></a>pjsip_via_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_msg.o(.text.pjsip_via_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_via_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.via_hdr_vptr)
</UL>
<P><STRONG><a name="[ca]"></a>pjsip_via_hdr_print</STRONG> (Thumb, 692 bytes, Stack size 40 bytes, sip_msg.o(.text.pjsip_via_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pjsip_via_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy2_escape
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_msg.o(.data.via_hdr_vptr)
</UL>
<P><STRONG><a name="[1f7]"></a>multipart_print_body</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, sip_multipart.o(.text.multipart_print_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = multipart_print_body &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_print
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_print_on
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sip_multipart.o(.text.pjsip_multipart_create)
<LI> sip_multipart.o(.text.pjsip_multipart_add_part)
<LI> sip_multipart.o(.text.pjsip_multipart_find_part)
<LI> sip_multipart.o(.text.pjsip_multipart_parse)
</UL>
<P><STRONG><a name="[1f8]"></a>multipart_clone_data</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sip_multipart.o(.text.multipart_clone_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = multipart_clone_data &rArr; pjsip_msg_body_clone &rArr; pjsip_msg_body_copy &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_multipart.o(.text.pjsip_multipart_create)
</UL>
<P><STRONG><a name="[150]"></a>int_parse_sip_url</STRONG> (Thumb, 1152 bytes, Stack size 112 bytes, sip_parser.o(.text.int_parse_sip_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = int_parse_sip_url &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_peek
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str_unescape
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_create
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_param_imp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoi_validate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[151]"></a>parse_hdr_accept</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sip_parser.o(.text.parse_hdr_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = parse_hdr_accept &rArr; pjsip_accept_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[5ff]"></a>int_register_parser</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, sip_parser.o(.text.int_register_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = int_register_parser &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sip_parser
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_register_hdr_parser
</UL>

<P><STRONG><a name="[152]"></a>parse_hdr_allow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sip_parser.o(.text.parse_hdr_allow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = parse_hdr_allow &rArr; pjsip_allow_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_allow_hdr_create
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[153]"></a>parse_hdr_call_id</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sip_parser.o(.text.parse_hdr_call_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = parse_hdr_call_id &rArr; pjsip_cid_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cid_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[154]"></a>parse_hdr_contact</STRONG> (Thumb, 1150 bytes, Stack size 96 bytes, sip_parser.o(.text.parse_hdr_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = parse_hdr_contact &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_contact_hdr_create
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[155]"></a>parse_hdr_content_len</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sip_parser.o(.text.parse_hdr_content_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = parse_hdr_content_len &rArr; pjsip_clen_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_clen_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[156]"></a>parse_hdr_content_type</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sip_parser.o(.text.parse_hdr_content_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = parse_hdr_content_type &rArr; pjsip_ctype_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_param
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ctype_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[157]"></a>parse_hdr_cseq</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, sip_parser.o(.text.parse_hdr_cseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = parse_hdr_cseq &rArr; pjsip_cseq_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_cseq_hdr_create
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_init_np
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[158]"></a>parse_hdr_expires</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sip_parser.o(.text.parse_hdr_expires))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = parse_hdr_expires &rArr; pjsip_expires_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[159]"></a>parse_hdr_from</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_parser.o(.text.parse_hdr_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = parse_hdr_from &rArr; parse_hdr_fromto &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_from_hdr_create
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[15a]"></a>parse_hdr_max_forwards</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sip_parser.o(.text.parse_hdr_max_forwards))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = parse_hdr_max_forwards &rArr; pjsip_max_fwd_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_max_fwd_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[15b]"></a>parse_hdr_min_expires</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sip_parser.o(.text.parse_hdr_min_expires))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = parse_hdr_min_expires &rArr; pjsip_min_expires_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_min_expires_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[15c]"></a>parse_hdr_rr</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, sip_parser.o(.text.parse_hdr_rr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = parse_hdr_rr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rr_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[15d]"></a>parse_hdr_route</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, sip_parser.o(.text.parse_hdr_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = parse_hdr_route &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_route_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[15e]"></a>parse_hdr_require</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sip_parser.o(.text.parse_hdr_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = parse_hdr_require &rArr; pjsip_require_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_require_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[15f]"></a>parse_hdr_retry_after</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, sip_parser.o(.text.parse_hdr_retry_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = parse_hdr_retry_after &rArr; pjsip_retry_after_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_param
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[160]"></a>parse_hdr_supported</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sip_parser.o(.text.parse_hdr_supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = parse_hdr_supported &rArr; pjsip_supported_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_supported_hdr_create
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[161]"></a>parse_hdr_to</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_parser.o(.text.parse_hdr_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = parse_hdr_to &rArr; parse_hdr_fromto &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_to_hdr_create
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[162]"></a>parse_hdr_unsupported</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sip_parser.o(.text.parse_hdr_unsupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = parse_hdr_unsupported &rArr; pjsip_unsupported_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_generic_array_hdr
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_unsupported_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[163]"></a>parse_hdr_via</STRONG> (Thumb, 1118 bytes, Stack size 88 bytes, sip_parser.o(.text.parse_hdr_via))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = parse_hdr_via &rArr; pjsip_via_hdr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_parser.o(.text.init_sip_parser)
</UL>
<P><STRONG><a name="[1f6]"></a>on_syntax_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sip_parser.o(.text.on_syntax_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = on_syntax_error &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
</UL>
<BR>[Address Reference Count : 5]<UL><LI> sip_parser.o(.text.pjsip_parse_rdata)
<LI> sip_parser.o(.text.pjsip_find_msg)
<LI> sip_parser.o(.text.pjsip_parse_uri)
<LI> sip_parser.o(.text.pjsip_parse_hdr)
<LI> sip_parser.o(.text.pjsip_parse_headers)
</UL>
<P><STRONG><a name="[60d]"></a>int_parse_msg</STRONG> (Thumb, 752 bytes, Stack size 256 bytes, sip_parser.o(.text.int_parse_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5336<LI>Call Chain = int_parse_msg &rArr; pjsip_multipart_parse &rArr; pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_nodes_before
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_push_exception_handler_
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pop_exception_handler_
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_peek
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_line
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_generic_string
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_handler
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_req_line
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_status_line
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_parse
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_cp
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_rdata
</UL>

<P><STRONG><a name="[614]"></a>int_parse_status_line</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sip_parser.o(.text.int_parse_status_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = int_parse_status_line &rArr; parse_sip_version &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoi_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
</UL>

<P><STRONG><a name="[615]"></a>int_parse_req_line</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sip_parser.o(.text.int_parse_req_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = int_parse_req_line &rArr; int_parse_uri &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_sip_version
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_init_np
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
</UL>

<P><STRONG><a name="[557]"></a>find_handler</STRONG> (Thumb, 246 bytes, Stack size 104 bytes, sip_parser.o(.text.find_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = find_handler &rArr; pj_hash_calc_tolower &rArr; pj_tolower
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc_tolower
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[616]"></a>parse_hdr_generic_string</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, sip_parser.o(.text.parse_hdr_generic_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat2
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_msg
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_headers
</UL>

<P><STRONG><a name="[626]"></a>strtoi_validate</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, sip_parser.o(.text.strtoi_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496<LI>Call Chain = strtoi_validate &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtol2
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_status_line
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[629]"></a>int_parse_uri_or_name_addr</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, sip_parser.o(.text.int_parse_uri_or_name_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_peek
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_create
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_contact
</UL>

<P><STRONG><a name="[61a]"></a>int_parse_name_addr</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sip_parser.o(.text.int_parse_name_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtrim
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_peek
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_name_addr_create
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_route
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_rr
</UL>

<P><STRONG><a name="[165]"></a>int_parse_other_uri</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sip_parser.o(.text.int_parse_other_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = int_parse_other_uri &rArr; pjsip_other_uri_create &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_other_uri_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sip_parser.o(.text.int_parse_uri_or_name_addr)
<LI> sip_parser.o(.text.int_parse_uri)
</UL>
<P><STRONG><a name="[627]"></a>parse_param_imp</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sip_parser.o(.text.parse_param_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str_unescape
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_sip_url
</UL>

<P><STRONG><a name="[623]"></a>parse_sip_version</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, sip_parser.o(.text.parse_sip_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = parse_sip_version &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_n
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_req_line
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_status_line
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_via
</UL>

<P><STRONG><a name="[785]"></a>parse_generic_array_hdr</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, sip_parser.o(.text.parse_generic_array_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = parse_generic_array_hdr &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_unsupported
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_supported
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_require
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_allow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_accept
</UL>

<P><STRONG><a name="[621]"></a>int_parse_param</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sip_parser.o(.text.int_parse_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = int_parse_param &rArr; pj_scan_get_quote &rArr; pj_scan_get_quotes &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_quote
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_fromto
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_retry_after
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_content_type
</UL>

<P><STRONG><a name="[78e]"></a>parse_hdr_fromto</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, sip_parser.o(.text.parse_hdr_fromto))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = parse_hdr_fromto &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_newline
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_param
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_uri_or_name_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_to
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hdr_from
</UL>

<P><STRONG><a name="[61f]"></a>int_parse_uri</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sip_parser.o(.text.int_parse_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = int_parse_uri &rArr; pj_throw_exception_ &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_name_addr
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_parse_req_line
</UL>

<P><STRONG><a name="[1ff]"></a>srv_resolver_cb</STRONG> (Thumb, 328 bytes, Stack size 768 bytes, sip_resolve.o(.text.srv_resolver_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5504<LI>Call Chain = srv_resolver_cb &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_resolve.o(.text.pjsip_resolve)
</UL>
<P><STRONG><a name="[200]"></a>dns_a_callback</STRONG> (Thumb, 236 bytes, Stack size 352 bytes, sip_resolve.o(.text.dns_a_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = dns_a_callback &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_in_init
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_dns_parse_addr_response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_resolve.o(.text.pjsip_resolve)
</UL>
<P><STRONG><a name="[205]"></a>tel_uri_parse</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, sip_tel_uri.o(.text.tel_uri_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = tel_uri_parse &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_throw_exception_
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str_unescape
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_skip_whitespace
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_tel_uri.o(.text.pjsip_tel_uri_subsys_init)
</UL>
<P><STRONG><a name="[0]"></a>tel_uri_get_scheme</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sip_tel_uri.o(.text.tel_uri_get_scheme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tel_uri_get_scheme
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_tel_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1]"></a>tel_uri_get_uri</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sip_tel_uri.o(.text.tel_uri_get_uri))
<BR>[Address Reference Count : 1]<UL><LI> sip_tel_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[2]"></a>tel_uri_print</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, sip_tel_uri.o(.text.tel_uri_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tel_uri_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy2_escape
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_tel_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[3]"></a>tel_uri_cmp</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, sip_tel_uri.o(.text.tel_uri_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tel_uri_cmp &rArr; pjsip_param_find &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tel_nb_cmp
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_tel_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[4]"></a>tel_uri_clone</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sip_tel_uri.o(.text.tel_uri_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = tel_uri_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_tel_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[55b]"></a>find_tsx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sip_transaction.o(.text.find_tsx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = find_tsx &rArr; pj_hash_get_lower &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_find_tsx2
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_find_tsx
</UL>

<P><STRONG><a name="[a45]"></a>tsx_create</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, sip_transaction.o(.text.tsx_create), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create_w_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_simple
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
</UL>

<P><STRONG><a name="[20d]"></a>tsx_on_state_null</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, sip_transaction.o(.text.tsx_on_state_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 8920<LI>Call Chain = tsx_on_state_null &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sip_transaction.o(.text.pjsip_tsx_create_uac2)
<LI> sip_transaction.o(.text.pjsip_tsx_create_uas2)
<LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[6d3]"></a>mod_tsx_layer_register_tsx</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sip_transaction.o(.text.mod_tsx_layer_register_tsx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_lower
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
</UL>

<P><STRONG><a name="[6d7]"></a>tsx_shutdown</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, sip_transaction.o(.text.tsx_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpselector_dec_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uac2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_tsx_layer_stop
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_create
</UL>

<P><STRONG><a name="[251]"></a>tsx_timer_callback</STRONG> (Thumb, 356 bytes, Stack size 136 bytes, sip_transaction.o(.text.tsx_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 5192<LI>Call Chain = tsx_timer_callback &rArr; tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_create)
</UL>
<P><STRONG><a name="[252]"></a>tsx_on_destroy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sip_transaction.o(.text.tsx_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = tsx_on_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_create)
</UL>
<P><STRONG><a name="[a4c]"></a>tsx_set_state</STRONG> (Thumb, 528 bytes, Stack size 80 bytes, sip_transaction.o(.text.tsx_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_lower
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_str
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_trying
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_terminated
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_confirmed
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uac
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_timer_callback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
</UL>

<P><STRONG><a name="[a4a]"></a>tsx_send_msg</STRONG> (Thumb, 580 bytes, Stack size 120 bytes, sip_transaction.o(.text.tsx_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8880<LI>Call Chain = tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uac
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_null
</UL>

<P><STRONG><a name="[a47]"></a>tsx_update_transport</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sip_transaction.o(.text.tsx_update_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = tsx_update_transport &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_state_listener
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_tp_state_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_uas2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
</UL>

<P><STRONG><a name="[25e]"></a>tsx_tp_state_callback</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sip_transaction.o(.text.tsx_tp_state_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = tsx_tp_state_callback &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_update_transport)
</UL>
<P><STRONG><a name="[255]"></a>tsx_on_state_calling</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, sip_transaction.o(.text.tsx_on_state_calling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8984<LI>Call Chain = tsx_on_state_calling &rArr; tsx_on_state_proceeding_uac &rArr; tsx_retransmit &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[256]"></a>tsx_on_state_proceeding_uac</STRONG> (Thumb, 740 bytes, Stack size 48 bytes, sip_transaction.o(.text.tsx_on_state_proceeding_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8952<LI>Call Chain = tsx_on_state_proceeding_uac &rArr; tsx_retransmit &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_ack
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[257]"></a>tsx_on_state_completed_uac</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, sip_transaction.o(.text.tsx_on_state_completed_uac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8904<LI>Call Chain = tsx_on_state_completed_uac &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[258]"></a>tsx_on_state_confirmed</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, sip_transaction.o(.text.tsx_on_state_confirmed))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = tsx_on_state_confirmed &rArr; tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[259]"></a>tsx_on_state_terminated</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sip_transaction.o(.text.tsx_on_state_terminated))
<BR><BR>[Stack]<UL><LI>Max Depth = 5072<LI>Call Chain = tsx_on_state_terminated &rArr; tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[25a]"></a>tsx_on_state_destroyed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_transaction.o(.text.tsx_on_state_destroyed))
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[25b]"></a>tsx_on_state_trying</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sip_transaction.o(.text.tsx_on_state_trying))
<BR><BR>[Stack]<UL><LI>Max Depth = 8976<LI>Call Chain = tsx_on_state_trying &rArr; tsx_on_state_proceeding_uas &rArr; tsx_retransmit &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[25c]"></a>tsx_on_state_proceeding_uas</STRONG> (Thumb, 1016 bytes, Stack size 48 bytes, sip_transaction.o(.text.tsx_on_state_proceeding_uas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8952<LI>Call Chain = tsx_on_state_proceeding_uas &rArr; tsx_retransmit &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_schedule_timer
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_trying
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[25d]"></a>tsx_on_state_completed_uas</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, sip_transaction.o(.text.tsx_on_state_completed_uas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8952<LI>Call Chain = tsx_on_state_completed_uas &rArr; tsx_retransmit &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_set_state)
</UL>
<P><STRONG><a name="[b42]"></a>tsx_schedule_timer</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sip_transaction.o(.text.tsx_schedule_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = tsx_schedule_timer &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
</UL>

<P><STRONG><a name="[253]"></a>transport_callback</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, sip_transaction.o(.text.transport_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8928<LI>Call Chain = transport_callback &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_resched_retransmission
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_send_msg)
</UL>
<P><STRONG><a name="[254]"></a>send_msg_callback</STRONG> (Thumb, 680 bytes, Stack size 136 bytes, sip_transaction.o(.text.send_msg_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 9016<LI>Call Chain = send_msg_callback &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_release
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_remove_state_listener
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_resched_retransmission
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_update_transport
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_set_state
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.tsx_send_msg)
</UL>
<P><STRONG><a name="[5]"></a>mod_tsx_layer_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_transaction.o(.text.mod_tsx_layer_load))
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[6]"></a>mod_tsx_layer_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_transaction.o(.text.mod_tsx_layer_start))
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[7]"></a>mod_tsx_layer_stop</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, sip_transaction.o(.text.mod_tsx_layer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 5120<LI>Call Chain = mod_tsx_layer_stop &rArr; pjsip_tsx_terminate &rArr; tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_this
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_next
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_first
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_lower
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[8]"></a>mod_tsx_layer_unload</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sip_transaction.o(.text.mod_tsx_layer_unload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = mod_tsx_layer_unload &rArr; pj_perror_3 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_count
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_atexit
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[170]"></a>tsx_layer_destroy</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sip_transaction.o(.text.tsx_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = tsx_layer_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.text.mod_tsx_layer_unload)
</UL>
<P><STRONG><a name="[9]"></a>mod_tsx_layer_on_rx_request</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sip_transaction.o(.text.mod_tsx_layer_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = mod_tsx_layer_on_rx_request &rArr; pjsip_tsx_recv_msg &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[a]"></a>mod_tsx_layer_on_rx_response</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sip_transaction.o(.text.mod_tsx_layer_on_rx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872<LI>Call Chain = mod_tsx_layer_on_rx_response &rArr; pjsip_tsx_recv_msg &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_recv_msg
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transaction.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[b41]"></a>tsx_retransmit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sip_transaction.o(.text.tsx_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8904<LI>Call Chain = tsx_retransmit &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_resched_retransmission
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_completed_uas
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uas
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_proceeding_uac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_on_state_calling
</UL>

<P><STRONG><a name="[af5]"></a>tsx_resched_retransmission</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, sip_transaction.o(.text.tsx_resched_retransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = tsx_resched_retransmission &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsx_retransmit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg_callback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_callback
</UL>

<P><STRONG><a name="[597]"></a>get_tpname</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, sip_transport.o(.text.get_tpname))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_tpname &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_acquire_transport2
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_desc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_default_port_for_type
</UL>

<P><STRONG><a name="[a3b]"></a>tx_data_destroy</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sip_transport.o(.text.tx_data_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4952<LI>Call Chain = tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_info
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_raw_callback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_send_callback
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
</UL>

<P><STRONG><a name="[58e]"></a>get_msg_info</STRONG> (Thumb, 144 bytes, Stack size 160 bytes, sip_transport.o(.text.get_msg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_clone
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
</UL>

<P><STRONG><a name="[20c]"></a>transport_send_callback</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sip_transport.o(.text.transport_send_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = transport_send_callback &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport.o(.text.pjsip_transport_send)
</UL>
<P><STRONG><a name="[20a]"></a>send_raw_callback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sip_transport.o(.text.send_raw_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = send_raw_callback &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data_destroy
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport.o(.text.pjsip_tpmgr_send_raw)
</UL>
<P><STRONG><a name="[20b]"></a>transport_idle_callback</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sip_transport.o(.text.transport_idle_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = transport_idle_callback &rArr; pjsip_transport_destroy &rArr; destroy_transport &rArr; pj_hash_set_np &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport.o(.text.pjsip_transport_register)
</UL>
<P><STRONG><a name="[4b4]"></a>destroy_transport</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, sip_transport.o(.text.destroy_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = destroy_transport &rArr; pj_hash_set_np &rArr; hash_set &rArr; find_entry &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set_np
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_destroy
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_destroy
</UL>

<P><STRONG><a name="[209]"></a>tp_state_callback</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, sip_transport.o(.text.tp_state_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tp_state_callback &rArr; pj_lock_acquire &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport.o(.text.pjsip_tpmgr_create)
</UL>
<P><STRONG><a name="[591]"></a>get_net_interface</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, sip_transport.o(.text.get_net_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = get_net_interface &rArr; pj_perror_5 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_getipinterface
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_find_local_addr2
</UL>

<P><STRONG><a name="[6e]"></a>mod_on_tx_msg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_transport.o(.text.mod_on_tx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = mod_on_tx_msg &rArr; pjsip_tx_data_encode &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport.o(.data.mod_msg_print)
</UL>
<P><STRONG><a name="[202]"></a>lis_on_destroy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sip_transport_tcp.o(.text.lis_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = lis_on_destroy &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.pjsip_tcp_transport_start3)
</UL>
<P><STRONG><a name="[203]"></a>lis_create_transport</STRONG> (Thumb, 564 bytes, Stack size 184 bytes, sip_transport_tcp.o(.text.lis_create_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 5392<LI>Call Chain = lis_create_transport &rArr; on_connect_complete &rArr; on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_connect
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_bind
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_socket
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_set_port
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockaddr_to_host_port
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.pjsip_tcp_transport_start3)
</UL>
<P><STRONG><a name="[204]"></a>lis_destroy</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sip_transport_tcp.o(.text.lis_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = lis_destroy &rArr; pj_activesock_close &rArr; pj_ioqueue_unregister &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_safe_release
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_unregister_tpfactory
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_start3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.pjsip_tcp_transport_start3)
</UL>
<P><STRONG><a name="[6af]"></a>tcp_create</STRONG> (Thumb, 820 bytes, Stack size 176 bytes, sip_transport_tcp.o(.text.tcp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5200<LI>Call Chain = tcp_create &rArr; tcp_destroy &rArr; on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_get_ref
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create_w_handler
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_len
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_create
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_cfg_default
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_on_destroy
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
</UL>

<P><STRONG><a name="[247]"></a>on_connect_complete</STRONG> (Thumb, 808 bytes, Stack size 208 bytes, sip_transport_tcp.o(.text.on_connect_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5208<LI>Call Chain = on_connect_complete &rArr; on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[6b1]"></a>tcp_destroy</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sip_transport_tcp.o(.text.tcp_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = tcp_destroy &rArr; on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_close
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_sent
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy_transport
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
</UL>

<P><STRONG><a name="[6b2]"></a>sockaddr_to_host_port</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sip_transport_tcp.o(.text.sockaddr_to_host_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = sockaddr_to_host_port &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis_create_transport
</UL>

<P><STRONG><a name="[a32]"></a>update_factory_addr</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, sip_transport_tcp.o(.text.update_factory_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = update_factory_addr &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostip
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_copy_addr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_has_addr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_type_get_af
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
</UL>

<P><STRONG><a name="[201]"></a>on_accept_complete</STRONG> (Thumb, 412 bytes, Stack size 224 bytes, sip_transport_tcp.o(.text.on_accept_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5424<LI>Call Chain = on_accept_complete &rArr; tcp_create &rArr; tcp_destroy &rArr; on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_apply_qos2
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt_params
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_read
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.pjsip_tcp_transport_lis_start)
</UL>
<P><STRONG><a name="[a34]"></a>update_transport_info</STRONG> (Thumb, 172 bytes, Stack size 200 bytes, sip_transport_tcp.o(.text.update_transport_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = update_transport_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tcp_transport_lis_start
</UL>

<P><STRONG><a name="[71d]"></a>tcp_start_read</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, sip_transport_tcp.o(.text.tcp_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800<LI>Call Chain = tcp_start_read &rArr; pj_activesock_start_read2 &rArr; pj_ioqueue_recv &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_start_read2
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_accept_complete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>

<P><STRONG><a name="[243]"></a>tcp_send_msg</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, sip_transport_tcp.o(.text.tcp_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 5016<LI>Call Chain = tcp_send_msg &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[244]"></a>tcp_shutdown</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sip_transport_tcp.o(.text.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = tcp_shutdown &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[245]"></a>tcp_destroy_transport</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sip_transport_tcp.o(.text.tcp_destroy_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = tcp_destroy_transport &rArr; tcp_destroy &rArr; on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[246]"></a>tcp_on_destroy</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, sip_transport_tcp.o(.text.tcp_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = tcp_on_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[248]"></a>on_data_read</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, sip_transport_tcp.o(.text.on_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 5816<LI>Call Chain = on_data_read &rArr; pjsip_tpmgr_receive_packet &rArr; pjsip_parse_rdata &rArr; int_parse_msg &rArr; pjsip_multipart_parse &rArr; pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[249]"></a>on_data_sent</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, sip_transport_tcp.o(.text.on_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = on_data_sent &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_get_user_data
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destroy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[24a]"></a>tcp_keep_alive_timer</STRONG> (Thumb, 356 bytes, Stack size 112 bytes, sip_transport_tcp.o(.text.tcp_keep_alive_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = tcp_keep_alive_timer &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_activesock_send
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[24b]"></a>tcp_initial_timer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sip_transport_tcp.o(.text.tcp_initial_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = tcp_initial_timer &rArr; pjsip_transport_shutdown &rArr; pjsip_transport_shutdown2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_get_state_cb
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_shutdown
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_tcp.o(.text.tcp_create)
</UL>
<P><STRONG><a name="[a50]"></a>transport_attach</STRONG> (Thumb, 652 bytes, Stack size 96 bytes, sip_transport_udp.o(.text.transport_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512<LI>Call Chain = transport_attach &rArr; udp_destroy &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_create
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_create_recursive_mutex
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_getsockname
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_pton
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_tpmgr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_async_read
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_to_ioqueue
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_socket
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_destroy
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_register
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_desc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_udp_transport_attach2
</UL>

<P><STRONG><a name="[b3e]"></a>udp_set_socket</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sip_transport_udp.o(.text.udp_set_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = udp_set_socket &rArr; udp_set_pub_name &rArr; pj_strdup_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_setsockopt
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_pub_name
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>

<P><STRONG><a name="[ae8]"></a>register_to_ioqueue</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, sip_transport_udp.o(.text.register_to_ioqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = register_to_ioqueue &rArr; pj_grp_lock_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_add_ref
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_register_sock2
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>

<P><STRONG><a name="[24d]"></a>udp_send_msg</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sip_transport_udp.o(.text.udp_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = udp_send_msg &rArr; pj_ioqueue_sendto &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_udp.o(.text.transport_attach)
</UL>
<P><STRONG><a name="[24e]"></a>udp_shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_transport_udp.o(.text.udp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = udp_shutdown &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_udp.o(.text.transport_attach)
</UL>
<P><STRONG><a name="[24f]"></a>udp_destroy</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, sip_transport_udp.o(.text.udp_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5416<LI>Call Chain = udp_destroy &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_get
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_poll
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_unregister
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sock_close
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_ioqueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_on_destroy
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_udp.o(.text.transport_attach)
</UL>
<P><STRONG><a name="[b11]"></a>start_async_read</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, sip_transport_udp.o(.text.start_async_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = start_async_read &rArr; pj_ioqueue_recvfrom &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_attach
</UL>

<P><STRONG><a name="[b47]"></a>udp_set_pub_name</STRONG> (Thumb, 168 bytes, Stack size 144 bytes, sip_transport_udp.o(.text.udp_set_pub_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = udp_set_pub_name &rArr; pj_strdup_with_null &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_socket
</UL>

<P><STRONG><a name="[232]"></a>udp_on_read_complete</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, sip_transport_udp.o(.text.udp_on_read_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5832<LI>Call Chain = udp_on_read_complete &rArr; pjsip_tpmgr_receive_packet &rArr; pjsip_parse_rdata &rArr; int_parse_msg &rArr; pjsip_multipart_parse &rArr; pjsip_parse_headers &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_op_key_init
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_recvfrom
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_port
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_log_error
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_receive_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_udp.o(.text.register_to_ioqueue)
</UL>
<P><STRONG><a name="[233]"></a>udp_on_write_complete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sip_transport_udp.o(.text.udp_on_write_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = udp_on_write_complete &rArr; pj_ioqueue_get_user_data &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_ioqueue_get_user_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_udp.o(.text.register_to_ioqueue)
</UL>
<P><STRONG><a name="[234]"></a>udp_on_destroy</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sip_transport_udp.o(.text.udp_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = udp_on_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_destroy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_destroy
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_transport_udp.o(.text.register_to_ioqueue)
</UL>
<P><STRONG><a name="[72]"></a>mod_ua_load</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sip_ua_layer.o(.text.mod_ua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = mod_ua_load &rArr; pj_mutex_create_recursive &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_create
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_alloc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_set
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_create_recursive
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_ua_layer.o(.data.mod_ua)
</UL>
<P><STRONG><a name="[73]"></a>mod_ua_unload</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sip_ua_layer.o(.text.mod_ua_unload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = mod_ua_unload &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_local_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_ua_layer.o(.data.mod_ua)
</UL>
<P><STRONG><a name="[74]"></a>mod_ua_on_rx_request</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, sip_ua_layer.o(.text.mod_ua_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 9056<LI>Call Chain = mod_ua_on_rx_request &rArr; pjsip_dlg_on_rx_request &rArr; pjsip_endpt_respond_stateless &rArr; pjsip_endpt_send_response &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_request
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_find_tsx2
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_invite_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_ua_layer.o(.data.mod_ua)
</UL>
<P><STRONG><a name="[75]"></a>mod_ua_on_rx_response</STRONG> (Thumb, 628 bytes, Stack size 48 bytes, sip_ua_layer.o(.text.mod_ua_on_rx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8928<LI>Call Chain = mod_ua_on_rx_response &rArr; pjsip_dlg_on_rx_response &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_get_lower
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_6
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_rx_response
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_ua_layer.o(.data.mod_ua)
</UL>
<P><STRONG><a name="[76]"></a>mod_ua_on_tsx_state</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sip_ua_layer.o(.text.mod_ua_on_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4992<LI>Call Chain = mod_ua_on_tsx_state &rArr; pjsip_dlg_on_tsx_state &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_on_tsx_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_ua_layer.o(.data.mod_ua)
</UL>
<P><STRONG><a name="[b]"></a>pjsips_url_get_scheme</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_uri.o(.text.pjsips_url_get_scheme))
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[c]"></a>pjsip_get_uri</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sip_uri.o(.text.pjsip_get_uri))
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[d]"></a>pjsip_url_print</STRONG> (Thumb, 964 bytes, Stack size 48 bytes, sip_uri.o(.text.pjsip_url_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pjsip_url_print &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy2_escape
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e]"></a>pjsip_url_compare</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, sip_uri.o(.text.pjsip_url_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pjsip_url_compare &rArr; pjsip_param_cmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[f]"></a>pjsip_url_clone</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sip_uri.o(.text.pjsip_url_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = pjsip_url_clone &rArr; pjsip_sip_uri_assign &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_sip_uri_assign
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[10]"></a>pjsip_url_get_scheme</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sip_uri.o(.text.pjsip_url_get_scheme))
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[7d]"></a>pjsip_name_addr_get_scheme</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sip_uri.o(.text.pjsip_name_addr_get_scheme))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_name_addr_get_scheme &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.name_addr_vptr)
</UL>
<P><STRONG><a name="[7e]"></a>pjsip_name_addr_get_uri</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sip_uri.o(.text.pjsip_name_addr_get_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pjsip_name_addr_get_uri &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.name_addr_vptr)
</UL>
<P><STRONG><a name="[7f]"></a>pjsip_name_addr_print</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, sip_uri.o(.text.pjsip_name_addr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pjsip_name_addr_print &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.name_addr_vptr)
</UL>
<P><STRONG><a name="[80]"></a>pjsip_name_addr_compare</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sip_uri.o(.text.pjsip_name_addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pjsip_name_addr_compare &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.name_addr_vptr)
</UL>
<P><STRONG><a name="[81]"></a>pjsip_name_addr_clone</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sip_uri.o(.text.pjsip_name_addr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = pjsip_name_addr_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.name_addr_vptr)
</UL>
<P><STRONG><a name="[83]"></a>other_uri_get_scheme</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_uri.o(.text.other_uri_get_scheme))
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.other_uri_vptr)
</UL>
<P><STRONG><a name="[84]"></a>other_uri_get_uri</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sip_uri.o(.text.other_uri_get_uri))
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.other_uri_vptr)
</UL>
<P><STRONG><a name="[85]"></a>other_uri_print</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sip_uri.o(.text.other_uri_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = other_uri_print &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.other_uri_vptr)
</UL>
<P><STRONG><a name="[86]"></a>other_uri_cmp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sip_uri.o(.text.other_uri_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = other_uri_cmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.other_uri_vptr)
</UL>
<P><STRONG><a name="[87]"></a>other_uri_clone</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sip_uri.o(.text.other_uri_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640<LI>Call Chain = other_uri_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_uri.o(.data.other_uri_vptr)
</UL>
<P><STRONG><a name="[5ef]"></a>init_request_throw</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, sip_util.o(.text.init_request_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = init_request_throw &rArr; pjsip_tx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_request_headers
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_via_hdr_create
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
</UL>

<P><STRONG><a name="[1ef]"></a>stateless_send_resolver_callback</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, sip_util.o(.text.stateless_send_resolver_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = stateless_send_resolver_callback &rArr; stateless_send_transport_cb &rArr;  stateless_send_transport_cb (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_encode
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_request_stateless
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_util.o(.text.pjsip_endpt_send_request_stateless)
</UL>
<P><STRONG><a name="[23e]"></a>stateless_send_transport_cb</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, sip_util.o(.text.stateless_send_transport_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5112 + In Cycle
<LI>Call Chain = stateless_send_transport_cb &rArr;  stateless_send_transport_cb (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_GUID_STRING_LENGTH
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_generate_unique_string
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_acquire_transport2
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_find
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_transport_cb
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateless_send_resolver_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_util.o(.text.stateless_send_transport_cb)
</UL>
<P><STRONG><a name="[1f0]"></a>send_response_transport_cb</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sip_util.o(.text.send_response_transport_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = send_response_transport_cb &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sip_util.o(.text.pjsip_endpt_send_response)
<LI> sip_util.o(.text.send_response_resolver_cb)
</UL>
<P><STRONG><a name="[1f1]"></a>send_response_resolver_cb</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, sip_util.o(.text.send_response_resolver_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = send_response_resolver_cb &rArr; pjsip_transport_send &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_acquire_transport2
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_send
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_util.o(.text.pjsip_endpt_send_response)
</UL>
<P><STRONG><a name="[71]"></a>mod_util_on_tsx_state</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sip_util_statefull.o(.text.mod_util_on_tsx_state))
<BR>[Address Reference Count : 1]<UL><LI> sip_util_statefull.o(.data.mod_stateful_util)
</UL>
<P><STRONG><a name="[6d0]"></a>set_timer</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, evsub.o(.text.set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4864<LI>Call Chain = set_timer &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_schedule_w_grp_lock_dbg
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_accept
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
</UL>

<P><STRONG><a name="[542]"></a>evsub_create</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, evsub.o(.text.evsub_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = evsub_create &rArr; pjsip_dlg_add_usage &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_add_usage
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_has_usage
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_event_hdr_create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uas
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_create_uac
</UL>

<P><STRONG><a name="[1f2]"></a>evsub_on_destroy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, evsub.o(.text.evsub_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = evsub_on_destroy &rArr; pjsip_dlg_dec_session &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
</UL>
<BR>[Address Reference Count : 2]<UL><LI> evsub.o(.text.pjsip_evsub_create_uac)
<LI> evsub.o(.text.pjsip_evsub_create_uas)
</UL>
<P><STRONG><a name="[14c]"></a>on_timer</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, evsub.o(.text.on_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8848<LI>Call Chain = on_timer &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_running
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_notify
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub.o(.text.evsub_create)
</UL>
<P><STRONG><a name="[6cf]"></a>set_state</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, evsub.o(.text.set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = set_state &rArr; evsub_destroy &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_terminate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timer
</UL>

<P><STRONG><a name="[548]"></a>evsub_destroy</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, evsub.o(.text.evsub_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = evsub_destroy &rArr; pjsip_endpt_cancel_timer &rArr; pj_timer_heap_cancel &rArr; cancel_timer &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
</UL>

<P><STRONG><a name="[67]"></a>mod_evsub_unload</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, evsub.o(.text.mod_evsub_unload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = mod_evsub_unload &rArr; pjsip_endpt_release_pool &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_release_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub.o(.data.mod_evsub)
</UL>
<P><STRONG><a name="[68]"></a>mod_evsub_on_tsx_state</STRONG> (Thumb, 3000 bytes, Stack size 208 bytes, evsub.o(.text.mod_evsub_on_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 9000<LI>Call Chain = mod_evsub_on_tsx_state &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_names
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evsub_destroy
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub.o(.data.mod_evsub)
</UL>
<P><STRONG><a name="[46d]"></a>create_response</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, evsub.o(.text.create_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = create_response &rArr; pjsip_dlg_create_response &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_body_clone
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_evsub_on_tsx_state
</UL>

<P><STRONG><a name="[168]"></a>terminate_timer_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, evsub.o(.text.terminate_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = terminate_timer_cb &rArr; pjsip_tsx_terminate &rArr; tsx_set_state &rArr; tsx_shutdown &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_find_tsx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub.o(.text.mod_evsub_on_tsx_state)
</UL>
<P><STRONG><a name="[1f4]"></a>parse_hdr_event</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, evsub_msg.o(.text.parse_hdr_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = parse_hdr_event &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.text.pjsip_evsub_init_parser)
</UL>
<P><STRONG><a name="[1f5]"></a>parse_hdr_sub_state</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, evsub_msg.o(.text.parse_hdr_sub_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = parse_hdr_sub_state &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.text.pjsip_evsub_init_parser)
</UL>
<P><STRONG><a name="[48]"></a>pjsip_event_hdr_clone</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, evsub_msg.o(.text.pjsip_event_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_event_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.data.event_hdr_vptr)
</UL>
<P><STRONG><a name="[49]"></a>pjsip_event_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, evsub_msg.o(.text.pjsip_event_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_event_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.data.event_hdr_vptr)
</UL>
<P><STRONG><a name="[4a]"></a>pjsip_event_hdr_print</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, evsub_msg.o(.text.pjsip_event_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pjsip_event_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.data.event_hdr_vptr)
</UL>
<P><STRONG><a name="[9b]"></a>pjsip_sub_state_hdr_clone</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, evsub_msg.o(.text.pjsip_sub_state_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = pjsip_sub_state_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.data.sub_state_hdr_vptr)
</UL>
<P><STRONG><a name="[9c]"></a>pjsip_sub_state_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, evsub_msg.o(.text.pjsip_sub_state_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = pjsip_sub_state_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.data.sub_state_hdr_vptr)
</UL>
<P><STRONG><a name="[9d]"></a>pjsip_sub_state_hdr_print</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, evsub_msg.o(.text.pjsip_sub_state_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pjsip_sub_state_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy2_escape
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evsub_msg.o(.data.sub_state_hdr_vptr)
</UL>
<P><STRONG><a name="[11]"></a>mwi_on_evsub_state</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mwi.o(.text.mwi_on_evsub_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mwi_on_evsub_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mwi.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[12]"></a>mwi_on_evsub_tsx_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mwi.o(.text.mwi_on_evsub_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mwi_on_evsub_tsx_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mwi.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[13]"></a>mwi_on_evsub_rx_refresh</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, mwi.o(.text.mwi_on_evsub_rx_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8848<LI>Call Chain = mwi_on_evsub_rx_refresh &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_mwi_current_notify
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mwi.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[14]"></a>mwi_on_evsub_rx_notify</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mwi.o(.text.mwi_on_evsub_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mwi_on_evsub_rx_notify &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mwi.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[15]"></a>mwi_on_evsub_client_refresh</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mwi.o(.text.mwi_on_evsub_client_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8832<LI>Call Chain = mwi_on_evsub_client_refresh &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mwi.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[16]"></a>mwi_on_evsub_server_timeout</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mwi.o(.text.mwi_on_evsub_server_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mwi_on_evsub_server_timeout &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mwi.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[17]"></a>pres_on_evsub_state</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, presence.o(.text.pres_on_evsub_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pres_on_evsub_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> presence.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[18]"></a>pres_on_evsub_tsx_state</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, presence.o(.text.pres_on_evsub_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pres_on_evsub_tsx_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> presence.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[19]"></a>pres_on_evsub_rx_refresh</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, presence.o(.text.pres_on_evsub_rx_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8864<LI>Call Chain = pres_on_evsub_rx_refresh &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_current_notify
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> presence.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1a]"></a>pres_on_evsub_rx_notify</STRONG> (Thumb, 780 bytes, Stack size 96 bytes, presence.o(.text.pres_on_evsub_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = pres_on_evsub_rx_notify &rArr; pjsip_pres_parse_pidf &rArr; pjsip_pres_parse_pidf2 &rArr; pjpidf_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_accept_hdr_create
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_multipart_find_part
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf2
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_xpidf
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_parse_pidf2
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> presence.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1b]"></a>pres_on_evsub_client_refresh</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, presence.o(.text.pres_on_evsub_client_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8832<LI>Call Chain = pres_on_evsub_client_refresh &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> presence.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1c]"></a>pres_on_evsub_server_timeout</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, presence.o(.text.pres_on_evsub_server_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8848<LI>Call Chain = pres_on_evsub_server_timeout &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_notify
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> presence.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1f9]"></a>pres_print_body</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, presence_body.o(.text.pres_print_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pres_print_body &rArr; pj_xml_print &rArr; xml_print_node &rArr;  xml_print_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_print
</UL>
<BR>[Address Reference Count : 2]<UL><LI> presence_body.o(.text.pjsip_pres_create_pidf)
<LI> presence_body.o(.text.pjsip_pres_create_xpidf)
</UL>
<P><STRONG><a name="[1fa]"></a>xml_clone_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, presence_body.o(.text.xml_clone_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = xml_clone_data &rArr; pj_xml_clone &rArr;  pj_xml_clone (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_xml_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> presence_body.o(.text.pjsip_pres_create_pidf)
<LI> presence_body.o(.text.pjsip_pres_create_xpidf)
</UL>
<P><STRONG><a name="[465]"></a>create_request</STRONG> (Thumb, 348 bytes, Stack size 80 bytes, publishc.o(.text.create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5288<LI>Call Chain = create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_shallow_clone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_unpublish
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
</UL>

<P><STRONG><a name="[1fb]"></a>tsx_callback</STRONG> (Thumb, 724 bytes, Stack size 88 bytes, publishc.o(.text.tsx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 5144<LI>Call Chain = tsx_callback &rArr; pjsip_auth_clt_reinit_req &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> publishc.o(.text.pjsip_publishc_send)
</UL>
<P><STRONG><a name="[250]"></a>pubc_refresh_timer_cb</STRONG> (Thumb, 88 bytes, Stack size 144 bytes, publishc.o(.text.pubc_refresh_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5456<LI>Call Chain = pubc_refresh_timer_cb &rArr; pjsip_publishc_publish &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> publishc.o(.text.tsx_callback)
</UL>
<P><STRONG><a name="[559]"></a>find_node</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rpid.o(.text.find_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = find_node &rArr; pj_strnicmp2 &rArr; pj_strnicmp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_get_element
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjrpid_add_element
</UL>

<P><STRONG><a name="[1e4]"></a>on_retransmit</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, sip_100rel.o(.text.on_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8936<LI>Call Chain = on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_100rel.o(.text.pjsip_100rel_tx_response)
</UL>
<P><STRONG><a name="[66]"></a>mod_100rel_load</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sip_100rel.o(.text.mod_100rel_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = mod_100rel_load &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_100rel.o(.data.mod_100rel)
</UL>
<P><STRONG><a name="[147]"></a>print_sdp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sip_inv.o(.text.print_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = print_sdp &rArr; pjmedia_sdp_print &rArr; print_media_desc &rArr; pj_utoa &rArr; pj_utoa_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_print
</UL>
<BR>[Address Reference Count : 8]<UL><LI> sip_inv.o(.text.pjsip_get_sdp_info)
<LI> sip_inv.o(.text.pjsip_create_sdp_body)
<LI> sip_inv.o(.text.pjsip_inv_invite)
<LI> sip_inv.o(.text.create_sdp_body)
<LI> sip_inv.o(.text.process_answer)
<LI> sip_inv.o(.text.pjsip_inv_update)
<LI> sip_inv.o(.text.pjsip_inv_create_ack)
<LI> sip_inv.o(.text.inv_handle_incoming_reliable_response)
</UL>
<P><STRONG><a name="[5b7]"></a>inv_set_state</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sip_inv.o(.text.inv_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 6200 + In Cycle
<LI>Call Chain = inv_set_state &rArr;  pjsip_inv_send_msg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_bye_response
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_bye
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
</UL>

<P><STRONG><a name="[146]"></a>clone_sdp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_inv.o(.text.clone_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = clone_sdp &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
</UL>
<BR>[Address Reference Count : 7]<UL><LI> sip_inv.o(.text.pjsip_create_sdp_body)
<LI> sip_inv.o(.text.pjsip_inv_invite)
<LI> sip_inv.o(.text.create_sdp_body)
<LI> sip_inv.o(.text.process_answer)
<LI> sip_inv.o(.text.pjsip_inv_update)
<LI> sip_inv.o(.text.pjsip_inv_create_ack)
<LI> sip_inv.o(.text.inv_handle_incoming_reliable_response)
</UL>
<P><STRONG><a name="[423]"></a>cleanup_allow_sup_hdr</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, sip_inv.o(.text.cleanup_allow_sup_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = cleanup_allow_sup_hdr &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_array_erase
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
</UL>

<P><STRONG><a name="[470]"></a>create_sdp_body</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sip_inv.o(.text.create_sdp_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = create_sdp_body &rArr; pjmedia_sdp_session_clone &rArr; pjmedia_sdp_media_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
</UL>

<P><STRONG><a name="[651]"></a>process_answer</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, sip_inv.o(.text.process_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 6088<LI>Call Chain = process_answer &rArr; inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_has_local_answer
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_local_answer
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_local
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_local_offer
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
</UL>

<P><STRONG><a name="[636]"></a>inv_negotiate_sdp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sip_inv.o(.text.inv_negotiate_sdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 6040<LI>Call Chain = inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_reset
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_negotiate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
</UL>

<P><STRONG><a name="[5b6]"></a>inv_uac_recurse</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, sip_inv.o(.text.inv_uac_recurse))
<BR><BR>[Stack]<UL><LI>Max Depth = 9432<LI>Call Chain = inv_uac_recurse &rArr; pjsip_inv_process_redirect &rArr;  inv_uac_recurse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_session
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_assign_status
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_set_current
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_process_redirect
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
</UL>

<P><STRONG><a name="[69]"></a>mod_inv_load</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, sip_inv.o(.text.mod_inv_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = mod_inv_load &rArr; pjsip_endpt_add_capability &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_add_capability
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.data.mod_inv)
</UL>
<P><STRONG><a name="[6a]"></a>mod_inv_unload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sip_inv.o(.text.mod_inv_unload))
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.data.mod_inv)
</UL>
<P><STRONG><a name="[6b]"></a>mod_inv_on_rx_request</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, sip_inv.o(.text.mod_inv_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 9152<LI>Call Chain = mod_inv_on_rx_request &rArr; inv_perform_pending_bye &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_dlg
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_terminate
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_pending_bye
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.data.mod_inv)
</UL>
<P><STRONG><a name="[62d]"></a>inv_check_sdp_in_incoming_msg</STRONG> (Thumb, 1168 bytes, Stack size 64 bytes, sip_inv.o(.text.inv_check_sdp_in_incoming_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 6104<LI>Call Chain = inv_check_sdp_in_incoming_msg &rArr; inv_negotiate_sdp &rArr; pjmedia_sdp_neg_negotiate &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_offer
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_set_remote_answer
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_create_w_remote_offer
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_state_str
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tdata_get_sdp_info
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_sdp_info
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_is_reliable
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
</UL>

<P><STRONG><a name="[65c]"></a>inv_perform_pending_bye</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sip_inv.o(.text.inv_perform_pending_bye))
<BR><BR>[Stack]<UL><LI>Max Depth = 9104<LI>Call Chain = inv_perform_pending_bye &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_request
</UL>

<P><STRONG><a name="[6c]"></a>mod_inv_on_rx_response</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, sip_inv.o(.text.mod_inv_on_rx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8888<LI>Call Chain = mod_inv_on_rx_response &rArr; inv_send_ack &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_dlg
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.data.mod_inv)
</UL>
<P><STRONG><a name="[649]"></a>inv_send_ack</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, sip_inv.o(.text.inv_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8840<LI>Call Chain = inv_send_ack &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_request
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_ack
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_inv_on_rx_response
</UL>

<P><STRONG><a name="[6d]"></a>mod_inv_on_tsx_state</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sip_inv.o(.text.mod_inv_on_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = mod_inv_on_tsx_state &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.data.mod_inv)
</UL>
<P><STRONG><a name="[169]"></a>inv_on_state_null</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, sip_inv.o(.text.inv_on_state_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 9528<LI>Call Chain = inv_on_state_null &rArr; inv_on_state_calling &rArr; handle_uac_call_rejection &rArr; inv_uac_recurse &rArr; pjsip_inv_process_redirect &rArr;  inv_uac_recurse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[16a]"></a>inv_on_state_calling</STRONG> (Thumb, 844 bytes, Stack size 48 bytes, sip_inv.o(.text.inv_on_state_calling))
<BR><BR>[Stack]<UL><LI>Max Depth = 9504<LI>Call Chain = inv_on_state_calling &rArr; handle_uac_call_rejection &rArr; inv_uac_recurse &rArr; pjsip_inv_process_redirect &rArr;  inv_uac_recurse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_is_reliable
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[16b]"></a>inv_on_state_incoming</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, sip_inv.o(.text.inv_on_state_incoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 9080<LI>Call Chain = inv_on_state_incoming &rArr; inv_respond_incoming_cancel &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_null
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[16c]"></a>inv_on_state_early</STRONG> (Thumb, 1204 bytes, Stack size 32 bytes, sip_inv.o(.text.inv_on_state_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 9488<LI>Call Chain = inv_on_state_early &rArr; handle_uac_call_rejection &rArr; inv_uac_recurse &rArr; pjsip_inv_process_redirect &rArr;  inv_uac_recurse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_invalidate_msg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_set_timeout
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_dec_ref
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timer_response
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_bye
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_call_rejection
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_incoming_reliable_response
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_is_reliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[16d]"></a>inv_on_state_connecting</STRONG> (Thumb, 988 bytes, Stack size 40 bytes, sip_inv.o(.text.inv_on_state_connecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 9280<LI>Call Chain = inv_on_state_connecting &rArr; handle_uac_tsx_response &rArr; pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_1
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_bye_method
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_invite_method
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_bye_response
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[16e]"></a>inv_on_state_confirmed</STRONG> (Thumb, 1732 bytes, Stack size 56 bytes, sip_inv.o(.text.inv_on_state_confirmed))
<BR><BR>[Stack]<UL><LI>Max Depth = 9296<LI>Call Chain = inv_on_state_confirmed &rArr; handle_uac_tsx_response &rArr; pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_send_local_offer
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_modify_local_offer2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create_from_status
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_create
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_cancel_reinvite
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_sdp_info
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_bye_response
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_timer_response
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_send_ack
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_answer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_body
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_on_rx_prack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[16f]"></a>inv_on_state_disconnected</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, sip_inv.o(.text.inv_on_state_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 9280<LI>Call Chain = inv_on_state_disconnected &rArr; handle_uac_tsx_response &rArr; pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uac_tsx_response
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_inv.o(.text.mod_inv_on_tsx_state)
</UL>
<P><STRONG><a name="[63e]"></a>inv_handle_incoming_reliable_response</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, sip_inv.o(.text.inv_handle_incoming_reliable_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8856<LI>Call Chain = inv_handle_incoming_reliable_response &rArr; pjsip_100rel_send_prack &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_session_clone
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_has_local_answer
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_send_prack
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_create_prack
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
</UL>

<P><STRONG><a name="[5b3]"></a>handle_uac_call_rejection</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sip_inv.o(.text.handle_uac_call_rejection))
<BR><BR>[Stack]<UL><LI>Max Depth = 9456<LI>Call Chain = handle_uac_call_rejection &rArr; inv_uac_recurse &rArr; pjsip_inv_process_redirect &rArr;  inv_uac_recurse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_uac_recurse
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_from_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
</UL>

<P><STRONG><a name="[638]"></a>inv_check_secure_dlg</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, sip_inv.o(.text.inv_check_secure_dlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 9136<LI>Call Chain = inv_check_secure_dlg &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_name
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_get_dlg
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_warning_hdr_create
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_handle_update_response
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_respond_incoming_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
</UL>

<P><STRONG><a name="[648]"></a>inv_respond_incoming_update</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, sip_inv.o(.text.inv_respond_incoming_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 9168<LI>Call Chain = inv_respond_incoming_update &rArr; inv_check_secure_dlg &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_retry_after_hdr_create
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_req
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_negotiate_sdp
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_body
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_calling
</UL>

<P><STRONG><a name="[64a]"></a>inv_respond_incoming_cancel</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, sip_inv.o(.text.inv_respond_incoming_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 9064<LI>Call Chain = inv_respond_incoming_cancel &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_grp_lock_dec_ref
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_modify_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_layer_find_tsx2
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_create_key
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_invite_method
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_100rel_tx_response
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_incoming
</UL>

<P><STRONG><a name="[5b9]"></a>handle_uac_tsx_response</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, sip_inv.o(.text.handle_uac_tsx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 9240<LI>Call Chain = handle_uac_tsx_response &rArr; pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_request
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_bye_method
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_disconnected
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
</UL>

<P><STRONG><a name="[657]"></a>inv_respond_incoming_bye</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, sip_inv.o(.text.inv_respond_incoming_bye))
<BR><BR>[Stack]<UL><LI>Max Depth = 6240<LI>Call Chain = inv_respond_incoming_bye &rArr; inv_set_state &rArr;  pjsip_inv_send_msg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
</UL>

<P><STRONG><a name="[5b1]"></a>handle_timer_response</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sip_inv.o(.text.handle_timer_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 9232<LI>Call Chain = handle_timer_response &rArr; pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
</UL>

<P><STRONG><a name="[643]"></a>inv_handle_update_response</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, sip_inv.o(.text.inv_handle_update_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 9232<LI>Call Chain = inv_handle_update_response &rArr; pjsip_timer_process_resp &rArr; timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_cancel_offer
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_handle_refresh_error
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_secure_dlg
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sdp_in_incoming_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_early
</UL>

<P><STRONG><a name="[63d]"></a>inv_handle_bye_response</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, sip_inv.o(.text.inv_handle_bye_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 9128<LI>Call Chain = inv_handle_bye_response &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_confirmed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_on_state_connecting
</UL>

<P><STRONG><a name="[a19]"></a>set_contact</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, sip_reg.o(.text.set_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032<LI>Call Chain = set_contact &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_merge_last
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_create_unique_string
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_update_contact
</UL>

<P><STRONG><a name="[46a]"></a>create_request</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, sip_reg.o(.text.create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5264<LI>Call Chain = create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_request_from_hdr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_init_req
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_register_method
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_unregister
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
</UL>

<P><STRONG><a name="[a1f]"></a>schedule_registration</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sip_reg.o(.text.schedule_registration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = schedule_registration &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_heap_cancel_if_active
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_timer_heap
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_callback
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_delay_before_refresh
</UL>

<P><STRONG><a name="[238]"></a>regc_refresh_timer_cb</STRONG> (Thumb, 164 bytes, Stack size 192 bytes, sip_reg.o(.text.regc_refresh_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5488<LI>Call Chain = regc_refresh_timer_cb &rArr; pjsip_regc_register &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_reg.o(.text.schedule_registration)
</UL>
<P><STRONG><a name="[1fc]"></a>regc_tsx_callback</STRONG> (Thumb, 1976 bytes, Stack size 280 bytes, sip_reg.o(.text.regc_tsx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 5576<LI>Call Chain = regc_tsx_callback &rArr; pjsip_regc_register &rArr; create_request &rArr; pjsip_endpt_create_request_from_hdr &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_dec_and_get
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_atomic_inc
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_size
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_acquire
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_lock_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_reinit_req
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_find
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_expires_hdr_create
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_registration
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_send
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_register
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_reg.o(.text.pjsip_regc_send)
</UL>
<P><STRONG><a name="[1fd]"></a>parse_hdr_replaces</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, sip_replaces.o(.text.parse_hdr_replaces))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = parse_hdr_replaces &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_until_ch
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_replaces.o(.text.pjsip_replaces_init_module)
</UL>
<P><STRONG><a name="[1fe]"></a>pjsip_replaces_deinit_module</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sip_replaces.o(.text.pjsip_replaces_deinit_module))
<BR>[Address Reference Count : 1]<UL><LI> sip_replaces.o(.text.pjsip_replaces_init_module)
</UL>
<P><STRONG><a name="[92]"></a>replaces_hdr_clone</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sip_replaces.o(.text.replaces_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = replaces_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_replaces.o(.data.replaces_hdr_vptr)
</UL>
<P><STRONG><a name="[93]"></a>replaces_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_replaces.o(.text.replaces_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = replaces_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_replaces.o(.data.replaces_hdr_vptr)
</UL>
<P><STRONG><a name="[94]"></a>replaces_hdr_print</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, sip_replaces.o(.text.replaces_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = replaces_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_replaces.o(.data.replaces_hdr_vptr)
</UL>
<P><STRONG><a name="[206]"></a>parse_hdr_se</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, sip_timer.o(.text.parse_hdr_se))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = parse_hdr_se &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.text.pjsip_timer_init_module)
</UL>
<P><STRONG><a name="[207]"></a>parse_hdr_min_se</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, sip_timer.o(.text.parse_hdr_min_se))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = parse_hdr_min_se &rArr; pjsip_parse_param_imp &rArr; parse_param_imp &rArr; pj_str_unescape &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_scan_get_char
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_end_hdr_imp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_param_imp
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.text.pjsip_timer_init_module)
</UL>
<P><STRONG><a name="[208]"></a>pjsip_timer_deinit_module</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sip_timer.o(.text.pjsip_timer_deinit_module))
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.text.pjsip_timer_init_module)
</UL>
<P><STRONG><a name="[3c0]"></a>add_timer_headers</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, sip_timer.o(.text.add_timer_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = add_timer_headers &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_req
</UL>

<P><STRONG><a name="[23d]"></a>timer_cb</STRONG> (Thumb, 544 bytes, Stack size 88 bytes, sip_timer.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 9176<LI>Call Chain = timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_send_local_offer
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_local
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_create_sdp_body
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.text.start_timer)
</UL>
<P><STRONG><a name="[a3a]"></a>start_timer</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, sip_timer.o(.text.start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 5056<LI>Call Chain = start_timer &rArr; pjsip_dlg_remote_has_cap &rArr; pjsip_dlg_get_remote_cap_hdr &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_process_resp
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_update_resp
</UL>

<P><STRONG><a name="[1d]"></a>se_hdr_clone</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sip_timer.o(.text.se_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = se_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1e]"></a>se_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_timer.o(.text.se_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = se_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1f]"></a>se_hdr_print</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, sip_timer.o(.text.se_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = se_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[20]"></a>min_se_hdr_clone</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sip_timer.o(.text.min_se_hdr_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4656<LI>Call Chain = min_se_hdr_clone &rArr; pjsip_param_clone &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[21]"></a>min_se_hdr_shallow_clone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sip_timer.o(.text.min_se_hdr_shallow_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = min_se_hdr_shallow_clone &rArr; pjsip_param_shallow_clone &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_shallow_clone
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[22]"></a>min_se_hdr_print</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sip_timer.o(.text.min_se_hdr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = min_se_hdr_print &rArr; pjsip_param_print_on &rArr; pj_strncpy2_escape
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_utoa
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_param_print_on
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parser_const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_timer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[23]"></a>xfer_on_evsub_state</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sip_xfer.o(.text.xfer_on_evsub_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = xfer_on_evsub_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_xfer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[24]"></a>xfer_on_evsub_tsx_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sip_xfer.o(.text.xfer_on_evsub_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = xfer_on_evsub_tsx_state &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_xfer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[25]"></a>xfer_on_evsub_rx_refresh</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, sip_xfer.o(.text.xfer_on_evsub_rx_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8856<LI>Call Chain = xfer_on_evsub_rx_refresh &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_current_notify
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_xfer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[26]"></a>xfer_on_evsub_rx_notify</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sip_xfer.o(.text.xfer_on_evsub_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = xfer_on_evsub_rx_notify &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_xfer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[27]"></a>xfer_on_evsub_client_refresh</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sip_xfer.o(.text.xfer_on_evsub_client_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8832<LI>Call Chain = xfer_on_evsub_client_refresh &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_initiate
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_xfer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[28]"></a>xfer_on_evsub_server_timeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sip_xfer.o(.text.xfer_on_evsub_server_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8832<LI>Call Chain = xfer_on_evsub_server_timeout &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_send_request
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sip_xfer.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[5ed]"></a>init_outbound_setting</STRONG> (Thumb, 308 bytes, Stack size 96 bytes, pjsua_acc.o(.text.init_outbound_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = init_outbound_setting &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_hash_calc
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gethostname
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_add
</UL>

<P><STRONG><a name="[20e]"></a>regc_cb</STRONG> (Thumb, 1228 bytes, Stack size 96 bytes, pjsua_acc.o(.text.regc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 9776<LI>Call Chain = regc_cb &rArr; schedule_reregistration &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_get_info
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy2
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_end_ip_change
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_keep_alive
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_route
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_acc.o(.text.pjsua_acc_set_registration)
</UL>
<P><STRONG><a name="[20f]"></a>regc_tsx_cb</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, pjsua_acc.o(.text.regc_tsx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 7528<LI>Call Chain = regc_tsx_cb &rArr; acc_check_nat_addr &rArr; pjsua_acc_set_registration &rArr; pjsua_pres_unpublish &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_acc.o(.text.pjsua_acc_set_registration)
</UL>
<P><STRONG><a name="[3a3]"></a>update_regc_contact</STRONG> (Thumb, 520 bytes, Stack size 352 bytes, pjsua_acc.o(.text.update_regc_contact))
<BR><BR>[Stack]<UL><LI>Max Depth = 5312<LI>Call Chain = update_regc_contact &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stristr
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
</UL>

<P><STRONG><a name="[265]"></a>keep_alive_timer_cb</STRONG> (Thumb, 452 bytes, Stack size 128 bytes, pjsua_acc.o(.text.keep_alive_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5136<LI>Call Chain = keep_alive_timer_cb &rArr; pjsip_tpmgr_send_raw &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_tpmgr
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tpmgr_send_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_acc.o(.text.update_keep_alive)
</UL>
<P><STRONG><a name="[3f2]"></a>schedule_reregistration</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, pjsua_acc.o(.text.schedule_reregistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 9680<LI>Call Chain = schedule_reregistration &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_rereg_timer_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[239]"></a>auto_rereg_timer_cb</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, pjsua_acc.o(.text.auto_rereg_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 9712<LI>Call Chain = auto_rereg_timer_cb &rArr; schedule_reregistration &rArr; pjsua_call_hangup &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_reregistration
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_update_contact
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_acc.o(.text.schedule_reregistration)
</UL>
<P><STRONG><a name="[ae6]"></a>update_service_route</STRONG> (Thumb, 484 bytes, Stack size 104 bytes, pjsua_acc.o(.text.update_service_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = update_service_route &rArr; pjsip_parse_hdr &rArr; parse_hdr_generic_string &rArr; pjsip_generic_string_hdr_create &rArr; pj_strdup &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_size
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_route_hdr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[ae7]"></a>update_keep_alive</STRONG> (Thumb, 440 bytes, Stack size 104 bytes, pjsua_acc.o(.text.update_keep_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 5040<LI>Call Chain = update_keep_alive &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_cancel_timer
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_add_ref
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_dec_ref
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[231]"></a>handle_call_on_ip_change_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pjsua_acc.o(.text.handle_call_on_ip_change_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 13336<LI>Call Chain = handle_call_on_ip_change_cb &rArr; pjsua_acc_handle_call_on_ip_change &rArr; pjsua_call_reinvite &rArr; pjsua_call_reinvite2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_handle_call_on_ip_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_acc.o(.text.regc_cb)
</UL>
<P><STRONG><a name="[389]"></a>acc_check_nat_addr</STRONG> (Thumb, 1120 bytes, Stack size 336 bytes, pjsua_acc.o(.text.acc_check_nat_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 7512<LI>Call Chain = acc_check_nat_addr &rArr; pjsua_acc_set_registration &rArr; pjsua_pres_unpublish &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup2_with_null
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_hdr
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_flag_from_type
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_type_name
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_transport_get_default_port_for_type
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_destroy
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_via_sent_by
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_set_registration
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_private_ip
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_regc_contact
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_set_via_sent_by
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_regc_update_contact
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_tsx_cb
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regc_cb
</UL>

<P><STRONG><a name="[395]"></a>is_private_ip</STRONG> (Thumb, 326 bytes, Stack size 168 bytes, pjsua_acc.o(.text.is_private_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = is_private_ip &rArr; pj_strncmp &rArr; pj_strcmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncmp
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_check_nat_addr
</UL>

<P><STRONG><a name="[213]"></a>close_snd_timer_cb</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pjsua_aud.o(.text.close_snd_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5440<LI>Call Chain = close_snd_timer_cb &rArr; close_snd_dev &rArr; pjmedia_master_port_destroy &rArr; pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_aud.o(.text.pjsua_aud_subsys_start)
</UL>
<P><STRONG><a name="[42e]"></a>close_snd_dev</STRONG> (Thumb, 244 bytes, Stack size 880 bytes, pjsua_aud.o(.text.close_snd_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 5424<LI>Call Chain = close_snd_dev &rArr; pjmedia_master_port_destroy &rArr; pjmedia_clock_destroy &rArr; pj_thread_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_param
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_get_info
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_master_port_destroy
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_unsubscribe
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_snd_stream
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_subsys_destroy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_timer_cb
</UL>

<P><STRONG><a name="[210]"></a>dtmf_event_callback</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pjsua_aud.o(.text.dtmf_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dtmf_event_callback &rArr; pj_log_pop_indent &rArr; pj_log_add_indent &rArr; log_set_indent &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_aud.o(.text.pjsua_aud_channel_update)
</UL>
<P><STRONG><a name="[211]"></a>dtmf_callback</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pjsua_aud.o(.text.dtmf_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dtmf_callback &rArr; pj_log_pop_indent &rArr; pj_log_add_indent &rArr; log_set_indent &rArr; pj_thread_local_set &rArr; pthread_setspecific &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_aud.o(.text.pjsua_aud_channel_update)
</UL>
<P><STRONG><a name="[451]"></a>create_aud_param</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, pjsua_aud.o(.text.create_aud_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = create_aud_param &rArr; pjsua_perror &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_default_param
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
</UL>

<P><STRONG><a name="[76d]"></a>open_snd_dev</STRONG> (Thumb, 984 bytes, Stack size 664 bytes, pjsua_aud.o(.text.open_snd_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 6144<LI>Call Chain = open_snd_dev &rArr; pjmedia_snd_port_create2 &rArr; pjmedia_snd_port_set_ec &rArr; pjmedia_echo_create2 &rArr; pjmedia_delay_buf_create &rArr; pj_lock_create_recursive_mutex &rArr; create_mutex_lock &rArr; pj_mutex_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_param
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_dev_get_info
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_resample_port_create
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_event_subscribe
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_set_port0_name
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_conf_get_master_port
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_destroy
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_connect
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_snd_stream
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_create2
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_param_default
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_null_snd_dev
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_initial_aud_param
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PJMEDIA_PIA_SRATE
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_snd_dev
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_set_snd_dev2
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_conf_connect2
</UL>

<P><STRONG><a name="[174]"></a>on_aud_prev_play_frame</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pjsua_aud.o(.text.on_aud_prev_play_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_aud_prev_play_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_aud.o(.text.open_snd_dev)
</UL>
<P><STRONG><a name="[175]"></a>on_aud_prev_rec_frame</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pjsua_aud.o(.text.on_aud_prev_rec_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_aud_prev_rec_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_aud.o(.text.open_snd_dev)
</UL>
<P><STRONG><a name="[35a]"></a>PJMEDIA_PIA_SRATE</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pjsua_aud.o(.text.PJMEDIA_PIA_SRATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PJMEDIA_PIA_SRATE &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[775]"></a>update_initial_aud_param</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, pjsua_aud.o(.text.update_initial_aud_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 4680<LI>Call Chain = update_initial_aud_param &rArr; pjsua_perror &rArr; pj_log_1 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_aud_stream_get_param
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_snd_port_get_snd_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_snd_dev
</UL>

<P><STRONG><a name="[741]"></a>reset_call</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, pjsua_call.o(.text.reset_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = reset_call &rArr; pjsip_rx_data_free_cloned &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_free_cloned
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_subsys_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_make_call_med_tp_complete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
</UL>

<P><STRONG><a name="[219]"></a>pjsua_call_on_state_changed</STRONG> (Thumb, 860 bytes, Stack size 56 bytes, pjsua_call.o(.text.pjsua_call_on_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 9608<LI>Call Chain = pjsua_call_on_state_changed &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettimeofday
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_status_text
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_send_request
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[21a]"></a>pjsua_call_on_forked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pjsua_call.o(.text.pjsua_call_on_forked))
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[21b]"></a>pjsua_call_on_media_update</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, pjsua_call.o(.text.pjsua_call_on_media_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 11144<LI>Call Chain = pjsua_call_on_media_update &rArr; pjsua_media_channel_update &rArr; pjsua_aud_channel_update &rArr; pjmedia_stream_create &rArr; pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_sdp_has_trickle
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_remote
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_schedule_reinvite_check
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_revert
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_disconnect
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_remote_nat_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[21c]"></a>pjsua_call_on_rx_offer</STRONG> (Thumb, 1012 bytes, Stack size 104 bytes, pjsua_call.o(.text.pjsua_call_on_rx_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 11096<LI>Call Chain = pjsua_call_on_rx_offer &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_3
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_sdp_answer
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_initial_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_is_changing
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[21d]"></a>pjsua_call_on_create_offer</STRONG> (Thumb, 628 bytes, Stack size 1008 bytes, pjsua_call.o(.text.pjsua_call_on_create_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12000<LI>Call Chain = pjsua_call_on_create_offer &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_is_changing
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_call_setting
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[21e]"></a>pjsua_call_on_tsx_state_changed</STRONG> (Thumb, 2452 bytes, Stack size 200 bytes, pjsua_call.o(.text.pjsua_call_on_tsx_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 11568<LI>Call Chain = pjsua_call_on_tsx_state_changed &rArr; on_call_transferred &rArr; pjsua_call_make_call &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strstr
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtok
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_elapsed_msec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_get_timestamp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_send_msg
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_invite_method
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_prack_method
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_apply_xml_control
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_accept_pager
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_revert
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_ice_check_start_trickling
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_ice_recv_sip_info
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_call_transferred
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_disconnect
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_refer_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[21f]"></a>pjsua_call_on_redirected</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pjsua_call.o(.text.pjsua_call_on_redirected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = pjsua_call_on_redirected &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[220]"></a>pjsua_call_on_rx_reinvite</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pjsua_call.o(.text.pjsua_call_on_rx_reinvite))
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_subsys_init)
</UL>
<P><STRONG><a name="[235]"></a>reinv_timer_cb</STRONG> (Thumb, 2012 bytes, Stack size 1064 bytes, pjsua_call.o(.text.reinv_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 10152<LI>Call Chain = reinv_timer_cb &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cmp
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_calloc
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_all_attr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_add_attr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_remove_all
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_clone
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_add
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_was_answer_remote
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_remote
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_active_local
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_state
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_remote_has_cap
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_update
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_reinvite
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_non_av_fmt
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.reset_call)
</UL>
<P><STRONG><a name="[222]"></a>trickle_ice_send_sip_info</STRONG> (Thumb, 880 bytes, Stack size 360 bytes, pjsua_call.o(.text.trickle_ice_send_sip_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 9200<LI>Call Chain = trickle_ice_send_sip_info &rArr; pjsua_call_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_init
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_print
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_endpt_create_base_sdp
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_send_local_cand
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_has_new_cand
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_init2
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_send_request
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pjsua_call.o(.text.reset_call)
<LI> pjsua_call.o(.text.pjsua_ice_check_start_trickling)
</UL>
<P><STRONG><a name="[401]"></a>call_inv_end_session</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, pjsua_call.o(.text.call_inv_end_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 9128<LI>Call Chain = call_inv_end_session &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_clone
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hangup_timer_cb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_state_changed
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_hangup
</UL>

<P><STRONG><a name="[a8a]"></a>update_remote_nat_type</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pjsua_call.o(.text.update_remote_nat_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = update_remote_nat_type &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_get_nat_name
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
</UL>

<P><STRONG><a name="[3fe]"></a>call_disconnect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pjsua_call.o(.text.call_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 9104<LI>Call Chain = call_disconnect &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_media_update
</UL>

<P><STRONG><a name="[3cc]"></a>apply_call_setting</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, pjsua_call.o(.text.apply_call_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 10992<LI>Call Chain = apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
</UL>

<P><STRONG><a name="[474]"></a>modify_sdp_of_call_hold</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, pjsua_call.o(.text.modify_sdp_of_call_hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 4688<LI>Call Chain = modify_sdp_of_call_hold &rArr; pjmedia_sdp_attr_create &rArr; pj_strdup2 &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_remove_all_attr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_add_attr
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_create
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sdp_of_call_hold
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_create_offer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_rx_offer
</UL>

<P><STRONG><a name="[724]"></a>on_call_transferred</STRONG> (Thumb, 932 bytes, Stack size 296 bytes, pjsua_call.o(.text.on_call_transferred))
<BR><BR>[Stack]<UL><LI>Max Depth = 11368<LI>Call Chain = on_call_transferred &rArr; pjsua_call_make_call &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strnicmp2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_respond
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_send_request
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_notify
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_accept
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_xfer_create_uas
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[a90]"></a>trickle_ice_recv_sip_info</STRONG> (Thumb, 552 bytes, Stack size 1032 bytes, pjsua_call.o(.text.trickle_ice_recv_sip_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 6552<LI>Call Chain = trickle_ice_recv_sip_info &rArr; pjmedia_ice_trickle_update &rArr; pj_ice_strans_start_ice &rArr; pj_ice_strans_update_check_list &rArr; setup_turn_perm &rArr; pj_turn_sock_set_perm &rArr; pj_turn_session_set_perm &rArr; pj_stun_session_send_msg &rArr; pj_stun_client_tsx_send_msg &rArr; tsx_transmit_msg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_decode_sdp
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_ice_trickle_update
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_media_type_init2
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_sdp_info2
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_tsx_state_changed
</UL>

<P><STRONG><a name="[4e1]"></a>dlg_set_via</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, pjsua_call.o(.text.dlg_set_via))
<BR><BR>[Stack]<UL><LI>Max Depth = 6632<LI>Call Chain = dlg_set_via &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_sip_acc_is_using_stun
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
</UL>

<P><STRONG><a name="[595]"></a>get_secure_level</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, pjsua_call.o(.text.get_secure_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = get_secure_level &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stristr
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
</UL>

<P><STRONG><a name="[215]"></a>on_make_call_med_tp_complete</STRONG> (Thumb, 928 bytes, Stack size 96 bytes, pjsua_call.o(.text.on_make_call_med_tp_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 9648<LI>Call Chain = on_make_call_med_tp_complete &rArr; pjsua_media_channel_deinit &rArr; pjsua_call_dump &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcpy2
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_invite
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_terminate
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_create_uac
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_call
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_check_snd_dev_idle
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_timer_init_session
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_make_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_make_call)
</UL>
<P><STRONG><a name="[73f]"></a>verify_request</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, pjsua_call.o(.text.verify_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 7688<LI>Call Chain = verify_request &rArr; pjsua_media_channel_create_sdp &rArr; pjmedia_rtcp_fb_encode_sdp &rArr; get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_neg_get_neg_remote
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_verify_request3
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_temp_sdp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
</UL>

<P><STRONG><a name="[218]"></a>on_incoming_call_med_tp_complete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pjsua_call.o(.text.on_incoming_call_med_tp_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 11120<LI>Call Chain = on_incoming_call_med_tp_complete &rArr; on_incoming_call_med_tp_complete2 &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_on_incoming)
</UL>
<P><STRONG><a name="[73e]"></a>on_incoming_call_med_tp_complete2</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, pjsua_call.o(.text.on_incoming_call_med_tp_complete2))
<BR><BR>[Stack]<UL><LI>Max Depth = 11104<LI>Call Chain = on_incoming_call_med_tp_complete2 &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_session
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_incoming_call_replace
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete
</UL>

<P><STRONG><a name="[740]"></a>process_incoming_call_replace</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, pjsua_call.o(.text.process_incoming_call_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 9128<LI>Call Chain = process_incoming_call_replace &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_answer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_get_inv_session
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_incoming_call_med_tp_complete2
</UL>

<P><STRONG><a name="[a8b]"></a>process_pending_call_answer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, pjsua_call.o(.text.process_pending_call_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 11088<LI>Call Chain = process_pending_call_answer &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>

<P><STRONG><a name="[214]"></a>on_answer_call_med_tp_complete</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, pjsua_call.o(.text.on_answer_call_med_tp_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 11104 + In Cycle
<LI>Call Chain = on_answer_call_med_tp_complete &rArr;  pjsua_call_answer2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_set_local_sdp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_send_msg
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_inv_end_session
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_answer2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_call_answer2)
</UL>
<P><STRONG><a name="[142]"></a>hangup_timer_cb</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pjsua_call.o(.text.hangup_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 9144<LI>Call Chain = hangup_timer_cb &rArr; call_inv_end_session &rArr; pjsip_inv_send_msg &rArr; pjsip_100rel_tx_response &rArr; on_retransmit &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_inv_end_session
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.call_inv_end_session)
</UL>
<P><STRONG><a name="[4dc]"></a>dlg_set_target</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, pjsua_call.o(.text.dlg_set_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 4936<LI>Call Chain = dlg_set_target &rArr; pjsip_parse_uri &rArr; int_parse_uri_or_name_addr &rArr; int_parse_name_addr &rArr; pjsip_name_addr_create &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strdup_with_null
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_add_uri
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_parse_uri
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_set_current
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_target_set_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
</UL>

<P><STRONG><a name="[472]"></a>create_sdp_of_call_hold</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pjsua_call.o(.text.create_sdp_of_call_hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 7664<LI>Call Chain = create_sdp_of_call_hold &rArr; pjsua_media_channel_create_sdp &rArr; pjmedia_rtcp_fb_encode_sdp &rArr; get_codec_info_from_sdp &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_create_sdp
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_sdp_of_call_hold
</UL>
<BR>[Called By]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_reinvite2
</UL>

<P><STRONG><a name="[223]"></a>trickle_ice_retrans_18x</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, pjsua_call.o(.text.trickle_ice_retrans_18x))
<BR><BR>[Stack]<UL><LI>Max Depth = 8928<LI>Call Chain = trickle_ice_retrans_18x &rArr; pjsip_tsx_retransmit_no_state &rArr; tsx_send_msg &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_add_ref
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tsx_retransmit_no_state
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.pjsua_ice_check_start_trickling)
</UL>
<P><STRONG><a name="[6a2]"></a>is_non_av_fmt</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, pjsua_call.o(.text.is_non_av_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = is_non_av_fmt &rArr; pjmedia_sdp_attr_get_rtpmap &rArr; init_sdp_parser &rArr; pj_leave_critical_section &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strtoul
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_find2
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_attr_get_rtpmap
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinv_timer_cb
</UL>

<P><STRONG><a name="[173]"></a>xfer_server_on_evsub_state</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pjsua_call.o(.text.xfer_server_on_evsub_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4472<LI>Call Chain = xfer_server_on_evsub_state &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_call.o(.text.on_call_transferred)
</UL>
<P><STRONG><a name="[229]"></a>log_writer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pjsua_core.o(.text.log_writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = log_writer &rArr; pj_log_write &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_file_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.pjsua_reconfigure_logging)
</UL>
<P><STRONG><a name="[225]"></a>worker_thread</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, pjsua_core.o(.text.worker_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448<LI>Call Chain = worker_thread &rArr; pjsip_endpt_handle_events2 &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.pjsua_init)
</UL>
<P><STRONG><a name="[26c]"></a>mod_pjsua_on_rx_request</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pjsua_core.o(.text.mod_pjsua_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 11496<LI>Call Chain = mod_pjsua_on_rx_request &rArr; pjsua_call_on_incoming &rArr; on_incoming_call_med_tp_complete2 &rArr; pjsua_call_answer2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_on_incoming
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.rodata..L__const.pjsua_init.mod_initializer)
</UL>
<P><STRONG><a name="[26d]"></a>mod_pjsua_on_rx_response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pjsua_core.o(.text.mod_pjsua_on_rx_response))
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.rodata..L__const.pjsua_init.mod_initializer)
</UL>
<P><STRONG><a name="[237]"></a>internal_stun_resolve_cb</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, pjsua_core.o(.text.internal_stun_resolve_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = internal_stun_resolve_cb &rArr; resolve_stun_server &rArr; pjsua_resolve_stun_servers &rArr; resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_detect_nat_type2
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_server
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.resolve_stun_server)
</UL>
<P><STRONG><a name="[abd]"></a>resolve_stun_entry</STRONG> (Thumb, 656 bytes, Stack size 232 bytes, pjsua_core.o(.text.resolve_stun_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 5784<LI>Call Chain = resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_parse2
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_start
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_create
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>

<P><STRONG><a name="[abe]"></a>stun_resolve_dec_ref</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, pjsua_core.o(.text.stun_resolve_dec_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960<LI>Call Chain = stun_resolve_dec_ref &rArr; pj_stun_sock_destroy &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_resolve_stun_servers
</UL>

<P><STRONG><a name="[236]"></a>test_stun_on_status</STRONG> (Thumb, 308 bytes, Stack size 352 bytes, pjsua_core.o(.text.test_stun_on_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 6136<LI>Call Chain = test_stun_on_status &rArr; resolve_stun_entry &rArr; pj_stun_sock_start &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_user_data
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_destroy
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stun_sock_get_info
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_complete
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.resolve_stun_entry)
</UL>
<P><STRONG><a name="[aed]"></a>stun_resolve_complete</STRONG> (Thumb, 188 bytes, Stack size 160 bytes, pjsua_core.o(.text.stun_resolve_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5120<LI>Call Chain = stun_resolve_complete &rArr; stun_resolve_dec_ref &rArr; pj_stun_sock_destroy &rArr; pj_stun_session_destroy &rArr; destroy_tdata &rArr; pj_stun_client_tsx_schedule_destroy &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_print
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stun_resolve_dec_ref
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stun_on_status
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_stun_entry
</UL>

<P><STRONG><a name="[23f]"></a>destroy_stun_resolve_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pjsua_core.o(.text.destroy_stun_resolve_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = destroy_stun_resolve_cb &rArr; release_stun_session &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_stun_session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.stun_resolve_dec_ref)
</UL>
<P><STRONG><a name="[166]"></a>nat_detect_cb</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pjsua_core.o(.text.nat_detect_cb))
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.internal_stun_resolve_cb)
</UL>
<P><STRONG><a name="[3fa]"></a>busy_sleep</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, pjsua_core.o(.text.busy_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 5472<LI>Call Chain = busy_sleep &rArr; pjsip_endpt_handle_events2 &rArr; pj_ioqueue_poll &rArr; ioqueue_dispatch_write_event &rArr; pj_ioqueue_unlock_key &rArr; pj_grp_lock_release &rArr; grp_lock_release &rArr; pj_grp_lock_dec_ref &rArr; grp_lock_dec_ref &rArr; grp_lock_destroy &rArr; pj_atomic_destroy &rArr; pj_mutex_destroy &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_gettickcount
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_handle_events2
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[4af]"></a>release_stun_session</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, pjsua_core.o(.text.release_stun_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = release_stun_session &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_stun_resolve_cb
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_destroy2
</UL>

<P><STRONG><a name="[22b]"></a>on_tp_state_callback</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pjsua_core.o(.text.on_tp_state_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 13424<LI>Call Chain = on_tp_state_callback &rArr; pjsua_acc_on_tp_state_changed &rArr; pjsua_acc_handle_call_on_ip_change &rArr; pjsua_call_reinvite &rArr; pjsua_call_reinvite2 &rArr; apply_call_setting &rArr; pjsua_media_channel_init &rArr; pjsua_call_media_init &rArr; pjmedia_ice_create3 &rArr; pj_ice_strans_create &rArr; add_update_turn &rArr; pj_turn_sock_create &rArr; destroy &rArr; pj_turn_session_shutdown &rArr; sess_shutdown &rArr; send_refresh &rArr;  sess_shutdown (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_on_tp_state_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.pjsua_transport_create)
</UL>
<P><STRONG><a name="[3c6]"></a>addr_string</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pjsua_core.o(.text.addr_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = addr_string &rArr; pj_inet_ntop &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_get_addr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_inet_ntop
</UL>
<BR>[Called By]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_transport_create
</UL>

<P><STRONG><a name="[22a]"></a>timer_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pjsua_core.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = timer_cb &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.text.pjsua_schedule_timer2_dbg)
</UL>
<P><STRONG><a name="[8b]"></a>logging_on_rx_msg</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, pjsua_core.o(.text.logging_on_rx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4896<LI>Call Chain = logging_on_rx_msg &rArr; pjsip_rx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.data.pjsua_msg_logger)
</UL>
<P><STRONG><a name="[8c]"></a>logging_on_tx_msg</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, pjsua_core.o(.text.logging_on_tx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856<LI>Call Chain = logging_on_tx_msg &rArr; pjsip_tx_data_get_info &rArr; get_msg_info &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_addr_str_print
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.data.pjsua_msg_logger)
</UL>
<P><STRONG><a name="[8d]"></a>options_on_rx_request</STRONG> (Thumb, 404 bytes, Stack size 120 bytes, pjsua_core.o(.text.options_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8960<LI>Call Chain = options_on_rx_request &rArr; pjsip_endpt_respond_stateless &rArr; pjsip_endpt_send_response &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_get_capability
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_create_response
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_hdr_clone
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_send_response
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_response_addr
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_generic_string_hdr_create
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_options_method
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_allow_events_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_core.o(.data.pjsua_options_handler)
</UL>
<P><STRONG><a name="[6f]"></a>im_on_rx_request</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, pjsua_im.o(.text.im_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5296<LI>Call Chain = im_on_rx_request &rArr; pjsua_im_process_pager &rArr; pjsip_iscomposing_parse &rArr; pj_xml_parse &rArr; xml_parse_node &rArr;  xml_parse_node (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_dlg
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_im_process_pager
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_im.o(.data.mod_pjsua_im)
</UL>
<P><STRONG><a name="[217]"></a>call_media_init_cb</STRONG> (Thumb, 382 bytes, Stack size 1000 bytes, pjsua_media.o(.text.call_media_init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = call_media_init_cb &rArr; pj_sockaddr_cp &rArr; pj_sockaddr_get_len &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_media.o(.text.pjsua_call_media_init)
</UL>
<P><STRONG><a name="[216]"></a>on_ice_complete</STRONG> (Thumb, 412 bytes, Stack size 992 bytes, pjsua_media.o(.text.on_ice_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 5896<LI>Call Chain = on_ice_complete &rArr; pjsua_schedule_timer2_dbg &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_4
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_sockaddr_cp
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_schedule_reinvite_check
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_media.o(.text.pjsua_call_media_init)
</UL>
<P><STRONG><a name="[35b]"></a>PJSUA_LOCK</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pjsua_media.o(.text.PJSUA_LOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = PJSUA_LOCK &rArr; pj_mutex_lock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_call_media_init
</UL>

<P><STRONG><a name="[ab0]"></a>sort_media</STRONG> (Thumb, 728 bytes, Stack size 112 bytes, pjsua_media.o(.text.sort_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sort_media &rArr; pjmedia_sdp_transport_get_proto &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strcmp2
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_media_find_attr2
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjmedia_sdp_transport_get_proto
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[ab1]"></a>sort_media2</STRONG> (Thumb, 1352 bytes, Stack size 112 bytes, pjsua_media.o(.text.sort_media2))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sort_media2 &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
</UL>

<P><STRONG><a name="[226]"></a>media_channel_init_cb</STRONG> (Thumb, 880 bytes, Stack size 80 bytes, pjsua_media.o(.text.media_channel_init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = media_channel_init_cb &rArr; pj_perror_5 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_destroy
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_perror_5
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_prov_clean_up
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_media.o(.text.pjsua_media_channel_init)
</UL>
<P><STRONG><a name="[aaf]"></a>stop_media_stream</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, pjsua_media.o(.text.stop_media_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 5360<LI>Call Chain = stop_media_stream &rArr; pjsua_aud_stop_stream &rArr; pjmedia_stream_destroy &rArr; send_rtcp &rArr; pj_perror_4 &rArr; pj_perror_imp &rArr; invoke_log &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_aud_stop_stream
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_deinit
</UL>

<P><STRONG><a name="[6c2]"></a>match_codec_fmtp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pjsua_media.o(.text.match_codec_fmtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = match_codec_fmtp &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_media_channel_update
</UL>

<P><STRONG><a name="[14e]"></a>ice_init_complete_cb</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pjsua_media.o(.text.ice_init_complete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = ice_init_complete_cb &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pjsua_media.o(.text.on_ice_complete)
<LI> pjsua_media.o(.text.ice_init_complete_cb)
</UL>
<P><STRONG><a name="[14d]"></a>ice_failed_nego_cb</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pjsua_media.o(.text.ice_failed_nego_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984<LI>Call Chain = ice_failed_nego_cb &rArr; pjsip_dlg_dec_lock &rArr; unregister_and_destroy_dialog &rArr; pjsip_tpselector_dec_ref &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_call
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer2_dbg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pjsua_media.o(.text.on_ice_complete)
<LI> pjsua_media.o(.text.ice_failed_nego_cb)
</UL>
<P><STRONG><a name="[552]"></a>find_buddy</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, pjsua_pres.o(.text.find_buddy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = find_buddy &rArr; pj_stricmp2 &rArr; pj_stricmp &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pres_on_rx_request
</UL>

<P><STRONG><a name="[6b8]"></a>lock_buddy</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, pjsua_pres.o(.text.lock_buddy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4664<LI>Call Chain = lock_buddy &rArr; pjsip_dlg_try_inc_lock &rArr; pj_grp_lock_tryacquire &rArr; grp_lock_tryacquire &rArr; pj_grp_lock_add_ref &rArr; grp_lock_add_ref &rArr; pj_atomic_inc &rArr; pj_atomic_inc_and_get &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_trylock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_sleep
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_try_inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[a79]"></a>unsubscribe_buddy_presence</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, pjsua_pres.o(.text.unsubscribe_buddy_presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8840<LI>Call Chain = unsubscribe_buddy_presence &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_initiate
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[a7a]"></a>subscribe_buddy_presence</STRONG> (Thumb, 796 bytes, Stack size 104 bytes, pjsua_pres.o(.text.subscribe_buddy_presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8920<LI>Call Chain = subscribe_buddy_presence &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_release
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_route_set
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uac
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_instance
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_send_request
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_initiate
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uac
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_add_header
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_outgoing
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_sip_acc_is_using_stun
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uac_contact
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_shutdown
</UL>

<P><STRONG><a name="[240]"></a>pjsua_evsub_on_state</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, pjsua_pres.o(.text.pjsua_evsub_on_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4912<LI>Call Chain = pjsua_evsub_on_state &rArr; pjsua_schedule_timer_dbg &rArr; pjsip_endpt_schedule_timer_dbg &rArr; pj_timer_heap_schedule_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_time_val_normalize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_rand
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp2
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strncpy
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_timer_entry_init
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_termination_reason
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state_name
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_notify_method
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_subscribe_method
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_schedule_timer_dbg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.subscribe_buddy_presence)
</UL>
<P><STRONG><a name="[241]"></a>pjsua_evsub_on_tsx_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, pjsua_pres.o(.text.pjsua_evsub_on_tsx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600<LI>Call Chain = pjsua_evsub_on_tsx_state &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_subscribe_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.subscribe_buddy_presence)
</UL>
<P><STRONG><a name="[242]"></a>pjsua_evsub_on_rx_notify</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pjsua_pres.o(.text.pjsua_evsub_on_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pjsua_evsub_on_rx_notify &rArr; pjsip_pres_get_status &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_get_status
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.subscribe_buddy_presence)
</UL>
<P><STRONG><a name="[227]"></a>publish_cb</STRONG> (Thumb, 160 bytes, Stack size 112 bytes, pjsua_pres.o(.text.publish_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 7192<LI>Call Chain = publish_cb &rArr; pjsua_pres_init_publish_acc &rArr; send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_1
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_strerror
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.pjsua_pres_init_publish_acc)
</UL>
<P><STRONG><a name="[ab5]"></a>send_publish</STRONG> (Thumb, 616 bytes, Stack size 456 bytes, pjsua_pres.o(.text.send_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 7040<LI>Call Chain = send_publish &rArr; pjsua_acc_get_uac_addr &rArr; pjsip_tpmgr_find_local_addr2 &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_3
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_5
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_tx_data_dec_ref
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_send
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_unpublish
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_publish
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_set_via_sent_by
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_publishc_destroy
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_pidf
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_sip_acc_is_using_stun
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_update_acc
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_delete_acc
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_unpublish
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
</UL>

<P><STRONG><a name="[228]"></a>pres_timer_cb</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, pjsua_pres.o(.text.pres_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8920<LI>Call Chain = pres_timer_cb &rArr; pjsua_start_mwi &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_schedule_timer_dbg
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_init_publish_acc
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_start_mwi
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_is_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.pjsua_pres_start)
</UL>
<P><STRONG><a name="[221]"></a>buddy_timer_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pjsua_pres.o(.text.buddy_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8952<LI>Call Chain = buddy_timer_cb &rArr; pjsua_buddy_update_pres &rArr; subscribe_buddy_presence &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_buddy_update_pres
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.pjsua_evsub_on_state)
</UL>
<P><STRONG><a name="[7b]"></a>mwi_evsub_on_state</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, pjsua_pres.o(.text.mwi_evsub_on_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = mwi_evsub_on_state &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state_name
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.data.mwi_cb)
</UL>
<P><STRONG><a name="[7c]"></a>mwi_evsub_on_rx_notify</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, pjsua_pres.o(.text.mwi_evsub_on_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = mwi_evsub_on_rx_notify &rArr; pj_log_4 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.data.mwi_cb)
</UL>
<P><STRONG><a name="[70]"></a>pres_on_rx_request</STRONG> (Thumb, 1320 bytes, Stack size 376 bytes, pjsua_pres.o(.text.pres_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 9728<LI>Call Chain = pres_on_rx_request &rArr; pjsua_pres_notify &rArr; subscribe_buddy_presence &rArr; pjsip_pres_send_request &rArr; pjsip_evsub_send_request &rArr; pjsip_dlg_send_request &rArr; pjsip_endpt_send_request_stateless &rArr; pjsip_endpt_resolve &rArr; pjsip_resolve &rArr; pj_dns_srv_resolve &rArr; pj_dns_resolver_start_query &rArr; transmit_query &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_perror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_str
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_insert_before
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_pool_alloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_2
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond_stateless
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rx_data_get_info
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_rdata_get_tsx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_send_response
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_response
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_via_sent_by
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_set_transport
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_create_uas_and_inc_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_dlg_dec_lock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_prefs
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_auth_clt_set_credentials
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_ua_instance
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_accept
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_terminate
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_pres_create_uas
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_add_header
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_subscribe_method
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_msg_data_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_process_msg_data
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_create_uas_contact
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_sip_acc_is_using_stun
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_init_tpselector
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_get_uac_addr
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_pres_notify
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_buddy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.data.mod_pjsua_pres)
</UL>
<P><STRONG><a name="[22e]"></a>pres_evsub_on_srv_state</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, pjsua_pres.o(.text.pres_evsub_on_srv_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = pres_evsub_on_srv_state &rArr; pj_mutex_unlock &rArr; pj_log_5 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_thread_this
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_mutex_lock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_list_erase
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state_name
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_state
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_get_mod_data
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_evsub_set_mod_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.text.pres_on_rx_request)
</UL>
<P><STRONG><a name="[8e]"></a>unsolicited_mwi_on_rx_request</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, pjsua_pres.o(.text.unsolicited_mwi_on_rx_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 5120<LI>Call Chain = unsolicited_mwi_on_rx_request &rArr; pjsip_endpt_respond &rArr; pjsip_tsx_send_msg &rArr; pjsip_tx_data_dec_ref &rArr; tx_data_destroy &rArr; pjsip_transport_dec_ref &rArr; pjsip_endpt_schedule_timer_w_grp_lock_dbg &rArr; pj_timer_heap_schedule_w_grp_lock_dbg &rArr; schedule_w_grp_lock_dbg &rArr; schedule_entry &rArr; insert_node &rArr; grow_heap &rArr; pj_pool_calloc &rArr; pj_pool_alloc &rArr; pj_pool_allocate_find &rArr; pj_pool_create_block &rArr; pj_log_6 &rArr; pj_log &rArr; pj_thread_this &rArr; __aeabi_assert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_get_level
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_4
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_stricmp
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_pop_indent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pj_log_push_indent
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_msg_find_hdr_by_name
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_method_cmp
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_get_notify_method
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsip_endpt_respond
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_acc_find_for_incoming
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjsua_get_pjsip_endpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pjsua_pres.o(.data.pjsua_unsolicited_mwi_mod)
</UL>
<P><STRONG><a name="[376]"></a>SrcUD</STRONG> (Thumb, 680 bytes, Stack size 80 bytes, resamplesubs.o(.text.SrcUD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SrcUD &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
</UL>

<P><STRONG><a name="[378]"></a>SrcUp</STRONG> (Thumb, 568 bytes, Stack size 72 bytes, resamplesubs.o(.text.SrcUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SrcUp &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_Resample
</UL>

<P><STRONG><a name="[43d]"></a>dump_stack</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, cm_backtrace.o(.text.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dump_stack &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[43e]"></a>print_call_stack</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, cm_backtrace.o(.text.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = print_call_stack &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[2f5]"></a>EventRecordItem</STRONG> (Thumb, 664 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[b66]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b62]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b69]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b68]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[26b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
